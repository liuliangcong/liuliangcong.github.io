<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis-Plus</title>
      <link href="/2024/03/15/Mybatis-Plus/"/>
      <url>/2024/03/15/Mybatis-Plus/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MyBatis-Plus（简称MP）是一个MyBatis的增强工具，在MyBatis的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>特性：</p><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本CURD，性能基本无损耗，直接面向对象操作</li><li>强大的CRUD操作：内置通用Mapper、通用Service，仅仅通过少量配置即可实现单表大部分CRUD操作，更有强大的条件构造器，满足各类使用需求</li><li>支持Lambda形式调用：通过Lambda表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持主键自动生成：支持多达4种主键策略（内含分布式唯一ID生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持ActiveRecord模式：支持ActiveRecord形式调用，实体类只需继承Model类即可进行强大的CRUD操作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>内置代码生成器：采用代码或者Maven插件可快速生成Mapper、Model、Service、Controller层代码，支持模板引擎</li><li>内置分页插件：基于MyBatis物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通List查询</li><li>分页插件支持多种数据库：支持MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer等多种数据库</li><li>内置性能分析插件：可输出SQL语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件：提供全表delete、update操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>数据库脚本如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis_plus`;</span><br><span class="line">USE `mybatis_plus`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">    `id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    `age` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    `email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h3><p>创建Spring Boot项目，<code>pom.xml</code>相关依赖如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改<code>application.yaml</code>配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?userUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span></span><br></pre></td></tr></table></figure><p>在Spring Boot启动类中添加<code>@MapperScan</code>注解，扫描Mapper文件夹</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.mybatis_plus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>编写实体类User</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Mapper接口UserMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>添加测试类，进行功能测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisPlusApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 通过条件构造器查询一个 List 集合，若无条件，则可以设置为null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----- selectList method test ------&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h2><p>在配置文件<code>application.yaml</code>中配置日志</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>运行之后，可以查看生成的SQL语句，也可以使用<code>Log4jImpl</code>对日志进行打印。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">// 设置实体类所对应的表名</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 设置表前缀：</p> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="attr">global-config:</span></span><br><span class="line"><span class="attr">db-config:</span></span><br><span class="line">  <span class="attr">table-prefix:</span> <span class="string">t_</span> <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="TableId注解"><a href="#TableId注解" class="headerlink" title="@TableId注解"></a>@TableId注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将属性所对应字段作为主键</span></span><br><span class="line"><span class="meta">@TableId(value = &quot;uid&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><h3 id="TableField注解"><a href="#TableField注解" class="headerlink" title="@TableField注解"></a>@TableField注解</h3><p>当数据库字段名与定义的字段名不一致时可以使用该注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(&quot;nickname&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h3 id="TableLogic注解"><a href="#TableLogic注解" class="headerlink" title="@TableLogic注解"></a>@TableLogic注解</h3><p>逻辑删除是为了方便数据恢复和保护数据本身价值的一种方案，但实际就是删除。</p><p>在数据库中添加字段<code>is deleted</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer isDeleted;</span><br></pre></td></tr></table></figure><p>删除操作</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> deleted <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> isDeleted <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Mapper-CRUD接口"><a href="#Mapper-CRUD接口" class="headerlink" title="Mapper CRUD接口"></a>Mapper CRUD接口</h2><h3 id="BaseMapper接口简介"><a href="#BaseMapper接口简介" class="headerlink" title="BaseMapper接口简介"></a>BaseMapper接口简介</h3><p>在前面的入门案例中我们定义了一个UserMapper接口，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，我们在UserMapper中没有声明任何方法，但是我们在测试时使用了<code>selectList()</code>方法，该方法来自于BaseMapper接口，该接口提供了添加、删除、更新和查询的相关方法，具体如下：</p><img src="image-20240314115036674.png" alt="image-20240314115036674"/><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 实现新增用户信息</span></span><br><span class="line">    <span class="comment">// INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?, ? )</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;zhangsan@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span> + user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 ID 删除一个用户</span></span><br><span class="line">    <span class="comment">// DELETE FROM user WHERE id=?</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1764458255159918594L</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 根据 Map 集合中的所设置的条件删除用户信息</span></span><br><span class="line">    <span class="comment">// DELETE FROM user WHERE name = ? AND age = ?</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="number">28</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatchIds</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过多个 ID 实现批量删除</span></span><br><span class="line">    <span class="comment">// DELETE FROM user WHERE id IN ( ? , ? )</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 ID 来更新用户的信息</span></span><br><span class="line">    <span class="comment">// UPDATE user SET name=?, age=? WHERE id=?</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">4L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Sandy&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>); <span class="comment">// 修改年龄</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 ID 查询用户信息</span></span><br><span class="line">    <span class="comment">// SELECT id, name, age, email FROM user WHERE id=?</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBatchIds</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过多个 ID 实现批量查询用户的信息</span></span><br><span class="line">    <span class="comment">// SELECT id, name, age, email FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">    List&lt;User&gt; userList1 = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    userList1.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 根据 Map 集合中的条件来查询用户信息</span></span><br><span class="line">    <span class="comment">// SELECT id, name, age, email FROM user WHERE id = ? AND age = ?</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; userList2 = userMapper.selectByMap(map);</span><br><span class="line">    userList2.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有数据</span></span><br><span class="line">    <span class="comment">// SELECT id, name, age, email FROM user</span></span><br><span class="line">    List&lt;User&gt; userList3 = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    userList3.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义功能"><a href="#自定义功能" class="headerlink" title="自定义功能"></a>自定义功能</h3><p>UserMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 根据 ID 查询用户信息为 Map 集合</span></span><br><span class="line">    <span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">    Map&lt;String, Object&gt; <span class="title function_">selectMapById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mybatis_plus.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMapById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">        SELECT id, name, age, email FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectMapById</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = userMapper.selectMapById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service-CRUD接口"><a href="#Service-CRUD接口" class="headerlink" title="Service CRUD接口"></a>Service CRUD接口</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>MyBatis-Plus提供了通用的Mapper接口，即BaseMapper接口，该接口对应DAO层，在该接口中包含常用的CRUD方法。</p><p>除了BaseMapper接口，MyBatis-Plus还提供了IService接口，该接口对应Service层。MyBatis-Plus的通用Service CRUD实现了IService接口，进一步封装CRUD。为了避免与BaseMapper中定义的方法混淆，该接口使用get（查询单行）、remove（删除）、list（查询集合）和page（分页）前缀命名的方式进行区别。</p><h3 id="自定义Service接口"><a href="#自定义Service接口" class="headerlink" title="自定义Service接口"></a>自定义Service接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询总记录数</span></span><br><span class="line">    <span class="comment">// SELECT COUNT( * ) FROM user</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> userService.count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertMore</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 批量添加</span></span><br><span class="line">    <span class="comment">// INSERT INTO user ( id, name, age ) VALUES ( ?, ?, ? )</span></span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;test_&quot;</span> + i);</span><br><span class="line">        user.setAge(<span class="number">20</span> + i);</span><br><span class="line">        user.setEmail(<span class="string">&quot;test_&quot;</span> + i + <span class="string">&quot;@163.com&quot;</span>);</span><br><span class="line">        list.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userService.saveBatch(list);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="Save"><a href="#Save" class="headerlink" title="Save"></a>Save</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 插入（批量），一次性全部插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 插入（批量），多次插入，一次插入 batchSize 条</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>T</td><td>entity</td><td>实体对象</td></tr><tr><td>Collection&lt;T&gt;</td><td>entityList</td><td>实体对象集合</td></tr><tr><td>int</td><td>batchSize</td><td>插入批次数量</td></tr></tbody></table><h4 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a>Remove</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 queryWrapper 设置的条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量删除</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>Wrapper&lt;T&gt;</td><td>queryWrapper</td><td>实体包装类QueryWrappe</td></tr><tr><td>Serializable</td><td>id</td><td>主键ID</td></tr><tr><td>Map&lt;String, Object&gt;</td><td>columnMap</td><td>表字段map对象</td></tr><tr><td>Collection&lt;? extends Serializable&gt;</td><td>idList</td><td>主键ID列表</td></tr></tbody></table><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录，需要设置sqlset</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure><h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">getById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。如果有多个结果会抛出异常，选取第一条可加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录，throwEx 用于指定是否抛出异常</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。如果有多个结果会返回第一条记录。</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>boolean</td><td>throwEx</td><td>有多个result是否抛出异常</td></tr></tbody></table><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 查询所有列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure><h4 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无条件分页查询</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">page</span><span class="params">(IPage&lt;T&gt; page)</span>;</span><br><span class="line"><span class="comment">// 条件分页查询</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">page</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 无条件分页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">pageMaps</span><span class="params">(IPage&lt;T&gt; page)</span>;</span><br><span class="line"><span class="comment">// 条件分页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">pageMaps</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">Page&lt;User&gt; page = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">Page&lt;Map&lt;String, Object&gt;&gt; page = userService.pageMaps(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;());</span><br></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>IPage&lt;T&gt;</td><td>page</td><td>翻页对象</td></tr></tbody></table><blockquote><p>注意：使用时需添加分页插件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 可以把启动类中扫描mapper的注解放在MyBatisPlusConfig中</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.mybatis_plus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="comment">// 配置MybatisPlus中的插件</span></span><br><span class="line"> <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">     interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">     <span class="keyword">return</span> interceptor;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure><h2 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h2><h3 id="wrapper介绍"><a href="#wrapper介绍" class="headerlink" title="wrapper介绍"></a>wrapper介绍</h3><p>MyBatis-Plus提供了强大的条件构造器，用于构造where条件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wrapper：条件构造抽象类</span><br><span class="line">  - AbstractWrapper：查询条件封装，用于生成sql中的where语句。</span><br><span class="line">    - QueryWrapper：Query封装操作类，用于查询。</span><br><span class="line">    - UpdateWrapper：Update条件封装操作类，用于更新。</span><br><span class="line">    - AbstractLambdaWrapper：使用Lambda表达式封装wrapper</span><br><span class="line">      - LambdaQueryWrapper：使用Lambda语法封装条件，用于查询。</span><br><span class="line">      - LambdaUpdateWrapper：使用Lambda语法封装条件，用于更新。</span><br></pre></td></tr></table></figure><h3 id="AbstractWrapper"><a href="#AbstractWrapper" class="headerlink" title="AbstractWrapper"></a>AbstractWrapper</h3><p>QueryWrapper（LambdaQueryWrapper）和UpdateWrapper（LambdaUpdateWrapper）的父类，用于生成sql的where条件。</p><h4 id="allEq"><a href="#allEq" class="headerlink" title="allEq"></a>allEq</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">allEq(Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="type">boolean</span> condition, Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br></pre></td></tr></table></figure><p>功能说明：全部eq或个别isNull</p><p>个别参数说明:</p><ul><li><code>params</code>：<code>key</code>为数据库字段名，<code>value</code>为字段值。</li><li><code>null2IsNull</code>：为<code>true</code>则在<code>map</code>的<code>value</code>为<code>null</code>时调用<code>isNull</code>方法，为<code>false</code>时则忽略<code>value</code>为<code>null</code>的。</li><li><code>condition</code>：表示该条件是否加入最后生成的<code>sql</code>中。</li></ul><p>示例：</p><ul><li>例1：<code>allEq(&#123;id: 1, name: &quot;老王&quot;, age: null&#125;)</code> -&gt; <code>id = 1 and name = &#39;老王&#39; and age is null</code></li><li>例2：<code>allEq(&#123;id: 1, name: &quot;老王&quot;, age: null&#125;, false)</code> -&gt; <code>id = 1 and name = &#39;老王&#39;</code></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params)</span><br><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="type">boolean</span> condition, BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull) </span><br></pre></td></tr></table></figure><p>个别参数说明:</p><ul><li><code>filter</code>：过滤函数，是否允许字段传入比对条件中。</li><li><code>params</code>、<code>null2IsNull</code>及<code>condition</code>：同上。</li></ul><p>示例：</p><ul><li>例1: <code>allEq((k,v) -&gt; k.contains(&quot;a&quot;), &#123;id: 1, name: &quot;老王&quot;, age: null&#125;)</code> -&gt; <code>name = &#39;老王&#39; and age is null</code></li><li>例2: <code>allEq((k,v) -&gt; k.contains(&quot;a&quot;), &#123;id: 1, name: &quot;老王&quot;, age: null&#125;, false)</code> -&gt; <code>name = &#39;老王&#39;</code></li></ul><h4 id="eq"><a href="#eq" class="headerlink" title="eq"></a>eq</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eq(R column, Object val)</span><br><span class="line">eq(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：等于<code>=</code></p><p>示例：<code>eq(&quot;name&quot;, &quot;老王&quot;)</code> -&gt; <code>name = &#39;老王&#39;</code></p><h4 id="ne"><a href="#ne" class="headerlink" title="ne"></a>ne</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ne(R column, Object val)</span><br><span class="line">ne(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：不等于<code>&lt;&gt;</code></p><p>示例：<code>ne(&quot;name&quot;, &quot;老王&quot;)</code> -&gt; <code>name &lt;&gt; &#39;老王&#39;</code></p><h4 id="gt"><a href="#gt" class="headerlink" title="gt"></a>gt</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gt(R column, Object val)</span><br><span class="line">gt(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：大于<code>&gt;</code></p><p>示例：<code>gt(&quot;age&quot;, 18)</code> -&gt; <code>age &gt; 18</code></p><h4 id="ge"><a href="#ge" class="headerlink" title="ge"></a>ge</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ge(R column, Object val)</span><br><span class="line">ge(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：大于等于<code>&gt;=</code></p><p>示例：<code>ge(&quot;age&quot;, 18)</code> -&gt; <code>age &gt;= 18</code></p><h4 id="lt"><a href="#lt" class="headerlink" title="lt"></a>lt</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lt(R column, Object val)</span><br><span class="line">lt(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：小于<code>&lt;</code></p><p>示例：<code>lt(&quot;age&quot;, 18)</code> -&gt; <code>age &lt; 18</code></p><h4 id="le"><a href="#le" class="headerlink" title="le"></a>le</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">le(R column, Object val)</span><br><span class="line">le(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：小于等于<code>&lt;=</code></p><p>示例：<code>le(&quot;age&quot;, 18)</code> -&gt; <code>age &lt;= 18</code></p><h4 id="between"><a href="#between" class="headerlink" title="between"></a>between</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">between(R column, Object val1, Object val2)</span><br><span class="line">between(<span class="type">boolean</span> condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure><p>功能说明：<code>between 值1 and 值2</code></p><p>示例：<code>between(&quot;age&quot;, 18, 30)</code> -&gt; <code>age between 18 and 30</code></p><h4 id="notBetween"><a href="#notBetween" class="headerlink" title="notBetween"></a>notBetween</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notBetween(R column, Object val1, Object val2)</span><br><span class="line">notBetween(<span class="type">boolean</span> condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure><p>功能说明：<code>not between 值1 and 值2</code></p><p>示例：<code>notBetween(&quot;age&quot;, 18, 30)</code> -&gt; <code>age not between 18 and 30</code></p><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">like(R column, Object val)</span><br><span class="line">like(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：<code>like &#39;%值%&#39;</code></p><p>示例：<code>like(&quot;name&quot;, &quot;王&quot;)</code> -&gt; <code>name like &#39;%王%&#39;</code></p><h4 id="notLike"><a href="#notLike" class="headerlink" title="notLike"></a>notLike</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notLike(R column, Object val)</span><br><span class="line">notLike(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：<code>not like &#39;%值%&#39;</code></p><p>示例：<code>notLike(&quot;name&quot;, &quot;王&quot;)</code> -&gt; <code>name not like &#39;%王%&#39;</code></p><h4 id="likeLeft"><a href="#likeLeft" class="headerlink" title="likeLeft"></a>likeLeft</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">likeLeft(R column, Object val)</span><br><span class="line">likeLeft(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：<code>like &#39;%值&#39;</code></p><p>示例：<code>likeLeft(&quot;name&quot;, &quot;王&quot;)</code> -&gt; <code>name like &#39;%王&#39;</code></p><h4 id="likeRight"><a href="#likeRight" class="headerlink" title="likeRight"></a>likeRight</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">likeRight(R column, Object val)</span><br><span class="line">likeRight(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：<code>like &#39;值%&#39;</code></p><p>示例：<code>likeRight(&quot;name&quot;, &quot;王&quot;)</code> -&gt; <code>name like &#39;王%&#39;</code></p><h4 id="notLikeLeft"><a href="#notLikeLeft" class="headerlink" title="notLikeLeft"></a>notLikeLeft</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notLikeLeft(R column, Object val)</span><br><span class="line">notLikeLeft(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：<code>not like &#39;%值&#39;</code></p><p>示例：<code>notLikeLeft(&quot;name&quot;, &quot;王&quot;)</code> -&gt; <code>name not like &#39;%王&#39;</code></p><h4 id="notLikeRight"><a href="#notLikeRight" class="headerlink" title="notLikeRight"></a>notLikeRight</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notLikeRight(R column, Object val)</span><br><span class="line">notLikeRight(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：<code>not like &#39;值%&#39;</code></p><p>示例：<code>notLikeRight(&quot;name&quot;, &quot;王&quot;)</code> -&gt; <code>name not like &#39;王%&#39;</code></p><h4 id="isNull"><a href="#isNull" class="headerlink" title="isNull"></a>isNull</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isNull(R column)</span><br><span class="line">isNull(<span class="type">boolean</span> condition, R column)</span><br></pre></td></tr></table></figure><p>功能说明：字段<code>is null</code></p><p>示例：<code>isNull(&quot;name&quot;)</code> -&gt; <code>name is null</code></p><h4 id="isNotNull"><a href="#isNotNull" class="headerlink" title="isNotNull"></a>isNotNull</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isNotNull(R column)</span><br><span class="line">isNotNull(<span class="type">boolean</span> condition, R column)</span><br></pre></td></tr></table></figure><p>功能说明：字段<code>is not null</code></p><p>示例：<code>isNotNull(&quot;name&quot;)</code> -&gt; <code>name is not null</code></p><h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">in(R column, Collection&lt;?&gt; value)</span><br><span class="line">in(<span class="type">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure><p>功能说明：字段<code>in (value.get(0), value.get(1), ...)</code></p><p>示例：<code>in(&quot;age&quot;, &#123;1, 2, 3&#125;)</code> -&gt; <code>age in (1, 2, 3)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">in(R column, Object... values)</span><br><span class="line">in(<span class="type">boolean</span> condition, R column, Object... values)</span><br></pre></td></tr></table></figure><p>功能说明：<code>字段in (v0, v1, ...)</code></p><p>示例：<code>in(&quot;age&quot;, 1, 2, 3)</code> -&gt; <code>age in (1, 2, 3)</code></p><h4 id="notIn"><a href="#notIn" class="headerlink" title="notIn"></a>notIn</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notIn(R column, Collection&lt;?&gt; value)</span><br><span class="line">notIn(<span class="type">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure><p>功能说明：字段<code>not in (value.get(0), value.get(1), ...)</code></p><p>示例：<code>notIn(&quot;age&quot;, &#123;1, 2, 3&#125;)</code> -&gt; <code>age not in (1, 2, 3)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notIn(R column, Object... values)</span><br><span class="line">notIn(<span class="type">boolean</span> condition, R column, Object... values)</span><br></pre></td></tr></table></figure><p>功能说明：字段<code>not in (v0, v1, ...)</code></p><p>示例：<code>notIn(&quot;age&quot;, 1, 2, 3)</code> -&gt; <code>age not in (1, 2, 3)</code></p><h4 id="inSql"><a href="#inSql" class="headerlink" title="inSql"></a>inSql</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inSql(R column, String inValue)</span><br><span class="line">inSql(<span class="type">boolean</span> condition, R column, String inValue)</span><br></pre></td></tr></table></figure><p>功能说明：字段<code>in ( sql语句 )</code></p><p>示例：</p><ul><li>例1：<code>inSql(&quot;age&quot;, &quot;1, 2, 3, 4, 5, 6&quot;)</code> -&gt; <code>age in (1, 2, 3, 4, 5, 6)</code></li><li>例2：<code>inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code> -&gt; <code>id in (select id from table where id &lt; 3)</code></li></ul><h4 id="notInSql"><a href="#notInSql" class="headerlink" title="notInSql"></a>notInSql</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notInSql(R column, String inValue)</span><br><span class="line">notInSql(<span class="type">boolean</span> condition, R column, String inValue)</span><br></pre></td></tr></table></figure><p>字段<code>not in ( sql语句 )</code></p><p>示例：</p><ul><li>例1：<code>notInSql(&quot;age&quot;, &quot;1, 2, 3, 4, 5, 6&quot;)</code> -&gt; <code>age not in (1, 2, 3, 4, 5, 6)</code></li><li>例2：<code>notInSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code> -&gt; <code>id not in (select id from table where id &lt; 3)</code></li></ul><h4 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">groupBy(R... columns)</span><br><span class="line">groupBy(<span class="type">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><p>功能说明：分组<code>group by 字段, ...</code></p><p>示例：<code>groupBy(&quot;id&quot;, &quot;name&quot;)</code> -&gt; <code>group by id, name</code></p><h4 id="orderByAsc"><a href="#orderByAsc" class="headerlink" title="orderByAsc"></a>orderByAsc</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">orderByAsc(R... columns)</span><br><span class="line">orderByAsc(<span class="type">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><p>功能说明：排序<code>order by 字段, ... ASC</code></p><p>示例：<code>orderByAsc(&quot;id&quot;, &quot;name&quot;)</code> -&gt; <code>order by id ASC, name ASC</code></p><h4 id="orderByDesc"><a href="#orderByDesc" class="headerlink" title="orderByDesc"></a>orderByDesc</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">orderByDesc(R... columns)</span><br><span class="line">orderByDesc(<span class="type">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><p>功能说明：排序<code>order by 字段, ... DESC</code></p><p>示例：<code>orderByDesc(&quot;id&quot;, &quot;name&quot;)</code> -&gt; <code>order by id DESC, name DESC</code></p><h4 id="orderBy"><a href="#orderBy" class="headerlink" title="orderBy"></a>orderBy</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">orderBy(<span class="type">boolean</span> condition, <span class="type">boolean</span> isAsc, R... columns)</span><br></pre></td></tr></table></figure><p>功能说明：排序<code>order by 字段, ...</code></p><p>示例：<code>orderBy(true, true, &quot;id&quot;, &quot;name&quot;)</code> -&gt; <code>order by id ASC, name ASC</code></p><h4 id="having"><a href="#having" class="headerlink" title="having"></a>having</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">having(String sqlHaving, Object... params)</span><br><span class="line">having(<span class="type">boolean</span> condition, String sqlHaving, Object... params)</span><br></pre></td></tr></table></figure><p>功能说明：<code>having ( sql语句 )</code></p><p>示例：</p><ul><li>例1：<code>having(&quot;sum(age) &gt; 10&quot;)</code> -&gt; <code>having sum(age) &gt; 10</code></li><li>例2：<code>having(&quot;sum(age) &gt; &#123;0&#125;&quot;, 11)</code> -&gt; <code>having sum(age) &gt; 11</code></li></ul><h4 id="func"><a href="#func" class="headerlink" title="func"></a>func</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">func(Consumer&lt;Children&gt; consumer)</span><br><span class="line">func(<span class="type">boolean</span> condition, Consumer&lt;Children&gt; consumer)</span><br></pre></td></tr></table></figure><p>功能说明：<code>func</code>方法主要方便在出现<code>if...else</code>时调用不同方法能不断链</p><p>示例: <code>func(i -&gt; if(true) &#123;i.eq(&quot;id&quot;, 1)&#125; else &#123;i.ne(&quot;id&quot;, 1)&#125;)</code></p><h4 id="or"><a href="#or" class="headerlink" title="or"></a>or</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">or()</span><br><span class="line">or(<span class="type">boolean</span> condition)</span><br></pre></td></tr></table></figure><p>功能说明：拼接<code>or</code></p><blockquote><p>注意事项：主动调用<code>or</code>表示紧接着下一个方法不是使用<code>and</code>连接，不调用<code>or</code>则默认使用<code>and</code>连接。</p></blockquote><p>示例：<code>eq(&quot;id&quot;, 1).or().eq(&quot;name&quot;, &quot;老王&quot;)</code> -&gt; <code>id = 1 or name = &#39;老王&#39;</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">or(Consumer&lt;Param&gt; consumer)</span><br><span class="line">or(<span class="type">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><p>功能说明：<code>or</code>嵌套</p><p>示例：<code>or(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code> -&gt; <code>or (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></p><h4 id="and"><a href="#and" class="headerlink" title="and"></a>and</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">and(Consumer&lt;Param&gt; consumer)</span><br><span class="line">and(<span class="type">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><p>功能说明：<code>and</code>嵌套</p><p>示例：<code>and(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code> -&gt; <code>and (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></p><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apply(String applySql, Object... params)</span><br><span class="line">apply(<span class="type">boolean</span> condition, String applySql, Object... params)</span><br></pre></td></tr></table></figure><p>功能说明：拼接<code>sql</code></p><blockquote><p>注意事项：该方法可用于数据库函数动态入参的<code>params</code>，对应前面<code>applySql</code>内部的<code>&#123;index&#125;</code>部分，这样不会有<code>sql</code>注入风险，反之会有！</p></blockquote><p>示例：</p><ul><li>例1：<code>apply(&quot;id = 1&quot;)</code> -&gt; <code>id = 1</code></li><li>例2：<code>apply(&quot;date_format(dateColumn, &#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code> -&gt; <code>date_format(dateColumn, &#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code></li><li>例3：<code>apply(&quot;date_format(dateColumn, &#39;%Y-%m-%d&#39;) = &#123;0&#125;&quot;, &quot;2008-08-08&quot;)</code> -&gt; <code>date_format(dateColumn, &#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code></li></ul><h4 id="last"><a href="#last" class="headerlink" title="last"></a>last</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">last(String lastSql)</span><br><span class="line">last(<span class="type">boolean</span> condition, String lastSql)</span><br></pre></td></tr></table></figure><p>功能说明：无视优化规则直接拼接到<code>sql</code>的最后</p><blockquote><p>注意事项：只能调用一次，多次调用以最后一次为准，有<code>sql</code>注入的风险，请谨慎使用！</p></blockquote><p>示例：<code>last(&quot;limit 1&quot;)</code></p><h4 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exists(String existsSql)</span><br><span class="line">exists(<span class="type">boolean</span> condition, String existsSql)</span><br></pre></td></tr></table></figure><p>功能说明：拼接<code>exists ( sql语句 )</code></p><p>示例：<code>exists (&quot;select id from table where age = 1&quot;)</code> -&gt; <code>exists (select id from table where age = 1)</code></p><h4 id="notExists"><a href="#notExists" class="headerlink" title="notExists"></a>notExists</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notExists(String notExistsSql)</span><br><span class="line">notExists(<span class="type">boolean</span> condition, String notExistsSql)</span><br></pre></td></tr></table></figure><p>功能说明：拼接<code>not exists ( sql语句 )</code></p><p>示例：<code>notExists (&quot;select id from table where age = 1&quot;)</code> -&gt; <code>not exists (select id from table where age = 1)</code></p><h3 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h3><h4 id="select-1"><a href="#select-1" class="headerlink" title="select"></a>select</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select(String... sqlSelect)</span><br><span class="line">select(Class&lt;T&gt; entityClass, Predicate&lt;TableFieldInfo&gt; predicate)</span><br></pre></td></tr></table></figure><p>功能说明：设置查询字段</p><blockquote><p>说明：方法二用于过滤查询字段，主键无法过滤</p></blockquote><p>示例：</p><ul><li>例1：<code>select(&quot;id&quot;, &quot;name&quot;, &quot;age&quot;)</code> -&gt; 指定查询主键、名字、年龄字段</li><li>例2：<code>select(User.class, i -&gt; !i.getColumn().equals(&quot;manager_id&quot;) &amp;&amp; !i.getColumn().equals(&quot;create_time&quot;))</code> -&gt; 查询<code>User</code>对象中除<code>manager_id</code>和<code>create_time</code>外其它字段的数据</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询用户名包含 a、年龄在 20 到 30 之间、邮箱信息不为 null 的用户信息</span></span><br><span class="line"><span class="comment">// SELECT id, name, age, email FROM user WHERE (name LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</span></span><br><span class="line">queryWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>).between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>, <span class="number">30</span>).isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询用户信息，按照年龄降序排序，若年龄相同，则按照 ID 升序排序</span></span><br><span class="line"><span class="comment">// SELECT id, name, age, email FROM user ORDER BY age DESC, id ASC</span></span><br><span class="line">queryWrapper.orderByDesc(<span class="string">&quot;age&quot;</span>).orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除邮箱地址为 null 的用户信息</span></span><br><span class="line"><span class="comment">// DELETE FROM user WHERE (email IS NULL)</span></span><br><span class="line">queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对（年龄大于 20 并且用户名中包含有 a）或邮箱为 null 的用户信息进行修改</span></span><br><span class="line"><span class="comment">// UPDATE user SET name=?, email=? WHERE (age &gt; ? AND name LIKE ? OR email IS NULL)</span></span><br><span class="line">queryWrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>).or().isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">user.setEmail(<span class="string">&quot;test@atguigu.com&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对用户名中包含 a 并且（年龄大于 20 或邮箱为 null）的用户信息进行修改</span></span><br><span class="line"><span class="comment">// Lambda 中的条件优先执行</span></span><br><span class="line"><span class="comment">// UPDATE user SET name=?, email=? WHERE (name LIKE ? AND (age &gt; ? OR email IS NULL))</span></span><br><span class="line">queryWrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>).and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">user.setEmail(<span class="string">&quot;tset@atguigu.com&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询用户的用户名、年龄、邮箱信息</span></span><br><span class="line"><span class="comment">// SELECT name, age, email FROM user</span></span><br><span class="line">queryWrapper.select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;email&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询 ID 小于等于 5 的用户信息</span></span><br><span class="line"><span class="comment">// SELECT id, name, age, email FROM user WHERE (id IN (select id from user where id &lt;= 5))</span></span><br><span class="line">queryWrapper.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from user where id &lt;= 5&quot;</span>);</span><br><span class="line">List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟开发中的组装条件</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">// SELECT id, name, age, email FROM user WHERE (name LIKE ? AND age &gt;= ? AND age &lt;= ?)</span></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(username)) &#123;</span><br><span class="line">    <span class="comment">// 判断某个字符串是否不为空字符串、不为null、不为空白符</span></span><br><span class="line">    queryWrapper.like(<span class="string">&quot;name&quot;</span>, username);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ageBegin != <span class="literal">null</span>) &#123;</span><br><span class="line">    queryWrapper.ge(<span class="string">&quot;age&quot;</span>, ageBegin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ageEnd != <span class="literal">null</span>) &#123;</span><br><span class="line">    queryWrapper.le(<span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用condition动态组装条件</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">queryWrapper.like(StringUtils.isNotBlank(username), <span class="string">&quot;name&quot;</span>, username).ge(ageBegin != <span class="literal">null</span>, <span class="string">&quot;age&quot;</span>, ageBegin).lt(ageEnd != <span class="literal">null</span>, <span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br></pre></td></tr></table></figure><h3 id="UpdateWrapper"><a href="#UpdateWrapper" class="headerlink" title="UpdateWrapper"></a>UpdateWrapper</h3><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">set(String column, Object val)</span><br><span class="line">set(<span class="type">boolean</span> condition, String column, Object val)</span><br></pre></td></tr></table></figure><p>功能说明：<code>sql set</code>字段</p><p>示例：</p><ul><li>例1：<code>set(&quot;name&quot;, &quot;老李头&quot;)</code></li><li>例2：<code>set(&quot;name&quot;, &quot;&quot;)</code> -&gt; 数据库字段值变为空字符串</li><li>例3：<code>set(&quot;name&quot;, null)</code> -&gt; 数据库字段值变为<code>null</code></li></ul><h4 id="setSql"><a href="#setSql" class="headerlink" title="setSql"></a>setSql</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setSql(String sql)</span><br></pre></td></tr></table></figure><p>功能说明：设置<code>set</code>部分<code>sql</code></p><p>示例：<code>setSql(&quot;name = &#39;老李头&#39;&quot;)</code></p><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对用户名中包含 a 并且（年龄大于 20 或邮箱为 null）的用户信息进行修改</span></span><br><span class="line"><span class="comment">// UPDATE user SET name=?, email=? WHERE (name LIKE ? AND (age &gt; ? OR email IS NULL))</span></span><br><span class="line">updateWrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>).and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">updateWrapper.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小黑&quot;</span>);</span><br><span class="line">updateWrapper.set(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;abc@atguigu.com&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br></pre></td></tr></table></figure><h3 id="LambdaQueryWrapper"><a href="#LambdaQueryWrapper" class="headerlink" title="LambdaQueryWrapper"></a>LambdaQueryWrapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectWrapper11</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.like(StringUtils.isNotBlank(username), User::getName, username)</span><br><span class="line">        .ge(ageBegin != <span class="literal">null</span>, User::getAge, ageBegin)</span><br><span class="line">        .lt(ageEnd != <span class="literal">null</span>, User::getAge, ageEnd);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>LambdaQueryWrapper</code>也可以通过<code>new QueryWrapper().lambda()</code>方法获取。</p></blockquote><h3 id="LambdaUpdateWrapper"><a href="#LambdaUpdateWrapper" class="headerlink" title="LambdaUpdateWrapper"></a>LambdaUpdateWrapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectWrapper12</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 对用户名中包含 a 并且（年龄大于 20 或邮箱为 null）的用户信息进行修改</span></span><br><span class="line">    LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(User::getName, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">        .and(i -&gt; i.gt(User::getAge, <span class="number">20</span>)</span><br><span class="line">             .or()</span><br><span class="line">             .isNull(User::getEmail));</span><br><span class="line">    updateWrapper.set(User::getName, <span class="string">&quot;小黑&quot;</span>).set(User::getEmail, <span class="string">&quot;abc@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>LambdaUpdateWrapper</code>也可以通过<code>new UpdateWrapper().lambda()</code>方法获取。</p></blockquote><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><p>Mybatis-Plus自带分页插件，只需简单配置即可实现分页功能</p><p>编写配置类MybatisPlusConfig</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 可以把启动类中扫描mapper的注解放在MyBatisPlusConfig中</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.mybatis_plus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 配置MybatisPlus中的插件</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span> &#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(page.getRecords());</span><br><span class="line">    System.out.println(page.getPages());</span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">    System.out.println(page.hasNext());</span><br><span class="line">    System.out.println(page.hasPrevious());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的分页功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserMapper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过年龄查询用户信息并分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page Mybatis-Plus所提供的分页对象，必须位于第一个参数的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age 参数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Page&lt;User&gt; <span class="title function_">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UserMapper.xml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mybatis_plus.pojo.entity.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, name, age, email FROM user WHERE age &gt; #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageVo</span><span class="params">()</span> &#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    userMapper.selectPageVo(page, <span class="number">20</span>);</span><br><span class="line">    System.out.println(page.getRecords());</span><br><span class="line">    System.out.println(page.getPages());</span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">    System.out.println(page.hasNext());</span><br><span class="line">    System.out.println(page.hasPrevious());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>数据库中增加商品表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键id&#x27;</span>,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">    price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">    VERSION <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁版本号&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product (id, NAME, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;外星人&#x27;</span>, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p>编写实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写ProductMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Product&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模拟修改冲突问题"><a href="#模拟修改冲突问题" class="headerlink" title="模拟修改冲突问题"></a>模拟修改冲突问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProduct1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 小李查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李查询的商品价格：&quot;</span> + productLi.getPrice());</span><br><span class="line">    <span class="comment">// 小王查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小王查询的商品价格：&quot;</span> + productWang.getPrice());</span><br><span class="line">    <span class="comment">// 小李将商品价格 +50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice() + <span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line">    <span class="comment">// 小王将商品的价格 -30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice() - <span class="number">30</span>);</span><br><span class="line">    productMapper.updateById(productWang);</span><br><span class="line">    <span class="comment">// 老板查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productBOSS</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老板查询的商品价格：&quot;</span> + productBOSS.getPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="乐观锁的实现流程"><a href="#乐观锁的实现流程" class="headerlink" title="乐观锁的实现流程"></a>乐观锁的实现流程</h4><p>取出记录数，获取当前的version</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, price, version <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>更新时，version+1，如果where语句中的version版本不对，则更新失败</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> price <span class="operator">=</span> price <span class="operator">+</span> <span class="number">50</span>, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> version <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="Mybatis-Plus实现乐观锁"><a href="#Mybatis-Plus实现乐观锁" class="headerlink" title="Mybatis-Plus实现乐观锁"></a>Mybatis-Plus实现乐观锁</h4><p>修改实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="comment">// 表示乐观锁版本号字段</span></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中添加乐观锁插件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 可以把启动类中扫描mapper的注解放在MyBatisPlusConfig中</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.mybatis_plus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 配置MybatisPlus中的插件</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">// 添加乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProduct2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 小李查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李查询的商品价格：&quot;</span> + productLi.getPrice());</span><br><span class="line">    <span class="comment">// 小王查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小王查询的商品价格：&quot;</span> + productWang.getPrice());</span><br><span class="line">    <span class="comment">// 小李将商品价格 +50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice() + <span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line">    <span class="comment">// 小王将商品的价格 -30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice() - <span class="number">30</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> productMapper.updateById(productWang);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 操作失败，重试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;操作失败，正在进行重试...&quot;</span>);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">productNew</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        productNew.setPrice(productNew.getPrice() - <span class="number">30</span>);</span><br><span class="line">        productMapper.updateById(productNew);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 老板查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productBoss</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老板查询的商品价格：&quot;</span> + productBoss.getPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通用枚举"><a href="#通用枚举" class="headerlink" title="通用枚举"></a>通用枚举</h2><p>表中有些字段的值是固定的，例如性别（男、女），此时我们可以使用Mybatis-Plus的通用枚举来实现。</p><p>数据库user表添加sex字段，并在实体中添加属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SexEnum sex;</span><br></pre></td></tr></table></figure><p>创建枚举类型</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SexEnum</span> &#123;</span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="number">2</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">    <span class="comment">// 将注解所标识的属性值保存到数据库中</span></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> String sexName;</span><br><span class="line">    SexEnum(Integer sex, String sexName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.sexName = sexName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnum</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">33</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;admin@163.com&quot;</span>);</span><br><span class="line">    user.setSex(SexEnum.MALE);</span><br><span class="line">    <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(insert);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnumSelect</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    System.out.println(userService.getOne(queryWrapper));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果 =&gt; User(id=1768155412849340418, name=admin, age=33, email=admin@163.com, sex=MALE)</span></span><br></pre></td></tr></table></figure><blockquote><p>若希望性别显示为中文，需重写SexEnum的toString()方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SexEnum</span> &#123;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.sexName;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新运行testEnumSelect，结果 &#x3D;&gt; <code>User(id=1768155412849340418, name=admin, age=33, email=admin@163.com, sex=男)</code></p></blockquote><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybaits-plus 代码生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- freemarke 模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>快速生成</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastAutoGeneratorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?userUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">            .globalConfig(builder -&gt; &#123;</span><br><span class="line">                builder.author(<span class="string">&quot;llc&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                    <span class="comment">//.enableSwagger() // 开启 swagger 模式</span></span><br><span class="line">                    .fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">                    .outputDir(<span class="string">&quot;D://mybatis-plus&quot;</span>); <span class="comment">// 指定输出目录</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .packageConfig(builder -&gt; &#123;</span><br><span class="line">                builder.parent(<span class="string">&quot;com&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                    .moduleName(<span class="string">&quot;mybatis-plus&quot;</span>) <span class="comment">// 设置父包模块名</span></span><br><span class="line">                    .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;D://mybatis-plus&quot;</span>)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                builder.addInclude(<span class="string">&quot;user&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                    .addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">            .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h2><p>创建数据库mybatis_plus_1及表product</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mybatis_plus_1;</span><br><span class="line">USE mybatis_plus_1;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键id&#x27;</span>,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">    price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">    VERSION <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁版本号&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product (id, NAME, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;外星人&#x27;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>删除mybatis_plus库中的product表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE mybatis_plus;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> product;</span><br></pre></td></tr></table></figure><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置多数据源</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="comment"># 设置默认的数据源或数据源组，默认值即为master</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 严格匹配数据源，默认false，true未匹配到指定数据源时抛异常，false使用默认数据源</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?userUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">slave_1:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_1?userUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>创建UserService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建ProductService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Product&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DS(&quot;slave_1&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ProductMapper, Product&gt; <span class="keyword">implements</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamicDatasource</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(userService.getById(<span class="number">1</span>));</span><br><span class="line">    System.out.println(productService.getById(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多对一、一对多"><a href="#多对一、一对多" class="headerlink" title="多对一、一对多"></a>多对一、一对多</h2><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>数据准备：创建班级表和学生表，多个学生对应一个班级，一个班级包含多个学生</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 班级表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> class (</span><br><span class="line">cno <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">primary</span> key comment <span class="string">&#x27;班级编号&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;班级名称&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">sno <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">primary</span> key comment <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">cno <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;班级编号&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class <span class="keyword">values</span> (<span class="string">&#x27;1001&#x27;</span>, <span class="string">&#x27;软件工程1班&#x27;</span>), (<span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;软件工程2班&#x27;</span>), (<span class="string">&#x27;2001&#x27;</span>, <span class="string">&#x27;应用数学1班&#x27;</span>), (<span class="string">&#x27;3001&#x27;</span>, <span class="string">&#x27;会计1班&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> (<span class="string">&#x27;19100101&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;1001&#x27;</span>), (<span class="string">&#x27;19100102&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;1001&#x27;</span>), (<span class="string">&#x27;19100201&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;1002&#x27;</span>), (<span class="string">&#x27;19200101&#x27;</span>, <span class="string">&#x27;赵丽&#x27;</span>, <span class="string">&#x27;2001&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建实体</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;class&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cno;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String sno;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class aClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Mapper接口StudentMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Student&gt; &#123;</span><br><span class="line">    Student <span class="title function_">selectBySno</span><span class="params">(<span class="meta">@Param(&quot;sno&quot;)</span> String sno)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写StudentMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mybatis_plus.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.mybatis_plus.pojo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sno&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;aClass&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.mybatis_plus.pojo.entity.Class&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cno&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectClass&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- column将作为select语句的参数进行传入 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cno&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBySno&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from student where sno = #&#123;sno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectClass&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mybatis_plus.pojo.entity.Class&quot;</span>&gt;</span></span><br><span class="line">        select * from class where cno = #&#123;cno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBySno</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentMapper.selectBySno(<span class="string">&quot;19100101&quot;</span>);</span><br><span class="line">    System.out.println(student);</span><br><span class="line">    <span class="comment">// 结果 =&gt; Student(sno=19100101, name=张三, aClass=Class(cno=1001, name=软件工程1班, students=null))</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>编写Mapper接口ClassMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ClassMapper&gt; &#123;</span><br><span class="line">    Class <span class="title function_">selectByCno</span><span class="params">(<span class="meta">@Param(&quot;cno&quot;)</span> String cno)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写ClassMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mybatis_plus.mapper.ClassMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;ClassResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.mybatis_plus.pojo.entity.Class&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cno&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.mybatis_plus.pojo.entity.Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cno&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectStudent&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- column将作为select语句的参数进行传入 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sno&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCno&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ClassResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from class where cno = #&#123;cno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mybatis_plus.pojo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student where cno = #&#123;cno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCno</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> classMapper.selectByCno(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">    System.out.println(aClass);</span><br><span class="line">    <span class="comment">// 结果 =&gt; Class(cno=1001, name=软件工程1班, students=[Student(sno=19100101, name=张三, aClass=null), Student(sno=19100102, name=李四, aClass=null)])</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2024/02/06/Nginx/"/>
      <url>/2024/02/06/Nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Nginx是一个高性能的Http和反向代理服务器及电子邮件代理服务器，可实现高效的反向代理和负载均衡，其特点是占有内存少、并发能力强。</p><p>主要特点：</p><ul><li><p>更快：单次请求响应更快，高并发可以更快的处理响应；</p></li><li><p>高拓展性：设计极具扩展性，由多个不同功能、不同层次、不同类型且耦合度极低的模块组成；</p></li><li><p>高可靠性：很多高流量网站都在核心服务器上大规模使用Nginx；</p></li><li><p>低内存消耗：一般1万个非活跃的HTTP Keep-Alive连接在Nginx中仅消耗2.5MB内存；</p></li><li><p>高并发：单机支持10万以上的并发连接；</p></li><li><p>热部署：master管理进程与worker工作进程的分离设计，使得Nginx能够支持热部署。</p></li></ul><p>使用场景：</p><ul><li>静态资源服务，通过本地文件系统提供服务；</li><li>反向代理服务，延伸出包括缓存、负载均衡等；</li><li>API服务，OpenResty。</li></ul><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>代理是在服务器和客户端之间假设的一层服务器，代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。</p><img src="image-20230918171804801.png" alt="image-20230918171804801" style="zoom:80%;" /><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>正向代理（forward）意思是一个位于客户端和原始服务器（origin server）之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p><p>正向代理是为我们服务的，即为客户端服务的，客户端可以根据正向代理访问到它本身无法访问到的服务器资源。</p><p>正向代理对我们是透明的，对服务端是非透明的，即服务端并不知道自己收到的是来自代理的访问还是来自真实客户端的访问。</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p>反向代理是为服务端服务的，反向代理可以帮助服务器接收来自客户端的请求，帮助服务器做请求转发、负载均衡等。</p><p>反向代理对服务端是透明的，对我们是非透明的，即我们并不知道自己访问的是代理服务器，而服务器知道反向代理在为它服务。</p><p>反向代理的优势：</p><ul><li>隐藏真实服务器；</li><li>负载均衡便于横向扩充后端动态服务；</li><li>动静分离，提升系统健壮性。</li></ul><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>一般情况下，客户端发送多个请求到服务器，服务器处理请求，其中一部分可能要操作一些资源比如数据库、静态资源等，服务器处理完毕后，再将结果返回给客户端。这种模式对于早期的系统来说，功能要求不复杂，且并发请求相对较少的情况下还能胜任，成本也低。随着信息数量不断增长，访问量和数据量飞速增长，以及系统业务复杂度持续增加，这种做法已无法满足要求，并发量特别大时，服务器容易崩。</p><p>很明显这是由于服务器性能的瓶颈造成的问题，除了堆机器之外，最重要的做法就是负载均衡。</p><p>请求爆发式增长的情况下，单台机器性能再强劲也无法满足要求了，这个时候集群的概念产生了。单台服务器解决不了的问题，可以使用多台服务器，然后将请求分发到各服务器上。将负载分发到不同的服务器，这就是负载均衡，核心是分摊压力。Nginx实现负载均衡，一般来说指的是将请求转发给服务器集群。</p><p>举个具体的例子：晚高峰乘坐地铁的时候，入站口经常会有地铁工作人员用喇叭喊“请走B口，B口人少车空….”，这个工作人员的作用就是负载均衡。</p><img src="image-20230922110138433.png" alt="image-20230922110138433" style="zoom: 80%;" /><p>Nginx实现负载均衡的策略：</p><ul><li><p><code>轮询策略</code>：默认情况下采用的策略，将所有客户端请求轮询分配给服务端。这种策略是可以正常工作的，但是如果其中某一台服务器压力太大，出现延迟，会影响所有分配在这台服务器下的用户。</p></li><li><p><code>最小连接数策略</code>：将请求优先分配给压力较小的服务器，它可以平衡每个队列的长度，避免向压力大的服务器添加更多的请求。</p></li><li><p><code>最快响应时间策略</code>：优先分配给响应时间最短的服务器。</p></li><li><p><code>客户端ip绑定策略</code>：来自同一个ip的请求永远只分配一台服务器，有效解决了动态网页存在的<code>session</code>共享问题。</p><blockquote><p><code>ip_hash</code>：如果用户已经访问了某台服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。每个请求按访问ip的hash结果分配，这样每个用户固定访问一台后端服务器，以此来解决session共享问题。</p></blockquote></li></ul><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>动静分离是指在web服务器架构中，将静态页面与动态页面或者静态内容接口和动态内容接口分开不同系统访问的架构设计方法，进而提升整个服务的访问性和可维护性。</p><img src="image-20230922105147818.png" alt="image-20230922105147818" /><p>一般来说，都需要将动态资源和静态资源分开，由于Nginx的高并发和静态资源缓存等特性，通常将静态资源部署在Nginx上。如果请求的是静态资源，直接到静态资源目录获取资源，如果是动态资源的请求，则利用反向代理的原理，把请求转发给对应后台应用去处理，从而实现动静分离。</p><p>使用前后端分离后，可以很大程度提升静态资源的访问速度，即使动态服务不可用，静态资源的访问也不会受到影响。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在Linux上安装Nginx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.15.8.tar.gz </span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf nginx-1.15.8.tar.gz</span><br><span class="line"><span class="comment"># 进入nginx文件夹</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.15.8</span><br><span class="line"><span class="comment"># 安装基础依赖</span></span><br><span class="line">yum -y install gcc pcre-devel zlib-devel openssl-devel</span><br><span class="line"><span class="comment"># 生成makefile文件</span></span><br><span class="line">./configure --with-http_ssl_module</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 默认安装在/usr/local/nginx，可以使用命令【whereis nginx】来查看安装目录。</span></span><br><span class="line"><span class="built_in">cd</span> ../nginx</span><br></pre></td></tr></table></figure><p>主要关注的文件夹有两个：</p><ul><li><code>conf</code>文件夹：用于存放配置文件，包含<code>nginx.conf</code>主配置文件。</li><li><code>html</code>文件夹：用于存放静态文件。</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>systemctl系统命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开机配置</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx <span class="comment"># 开机自动启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> nginx <span class="comment"># 关闭开机自动启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Nginx</span></span><br><span class="line">systemctl start nginx <span class="comment"># 启动Nginx成功后，可以直接访问主机IP，此时会展示Nginx默认页面</span></span><br><span class="line"><span class="comment"># 停止Nginx</span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"><span class="comment"># 重启Nginx</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="comment"># 重新加载Nginx</span></span><br><span class="line">systemctl reload nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Nginx 运行状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="comment"># 查看Nginx进程</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"><span class="comment"># 杀死Nginx进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 pid <span class="comment"># 根据上面查看到的Nginx进程号，杀死Nginx进程，-9 表示强制结束进程</span></span><br></pre></td></tr></table></figure><p>Nginx应用程序命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./nginx</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">./nginx -s stop </span><br><span class="line"><span class="comment"># 重新加载配置文件，热重启</span></span><br><span class="line">./nginx -s reload</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">./nginx -s reopen</span><br><span class="line"><span class="comment"># 等待工作进程处理完成后关闭</span></span><br><span class="line">./nginx -s quit</span><br><span class="line"><span class="comment"># 查看当前Nginx最终配置</span></span><br><span class="line">./nginx -T</span><br><span class="line"><span class="comment"># 检查配置是否有问题</span></span><br><span class="line">./nginx -t</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>Nginx启动后访问<code>服务器公网IP</code>，结果如下：</p><img src="image-20230912162458898.png" alt="image-20230912162458898" /><p>注意：如果连接不上，请检查<code>安全组</code>是否开放<code>80</code>端口，或者服务器<code>防火墙</code>是否允许<code>80</code>端口通过。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"><span class="comment"># 查看对应端口是否被允许，返回no则表示不允许</span></span><br><span class="line">firewall-cmd --query-port=80/tcp</span><br><span class="line"><span class="comment"># 允许80端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h3><p>Nginx配置文件为<code>conf</code>目录下的<code>nginx.conf</code>，该文件包含Nginx服务器的基础配置。</p><p>Nginx的典型配置示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># main段配置信息</span><br><span class="line"># user  nginx;                  # 运行用户，可以不进行设置</span><br><span class="line">worker_processes  auto;         # Nginx进程数，一般设置为和CPU核数一样</span><br><span class="line">error_log  logs/error.log warn; # Nginx的错误日志存放目录</span><br><span class="line">pid        logs/nginx.pid;      # Nginx服务启动时的pid存放位置</span><br><span class="line"></span><br><span class="line"># events段配置信息</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;      # 使用epoll的I/O模型（如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的）</span><br><span class="line">    worker_connections 1024; # 每个进程允许最大并发数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># http段配置信息</span><br><span class="line"># 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置</span><br><span class="line">http &#123; </span><br><span class="line">    # 设置日志模式</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main; # Nginx访问日志存放位置</span><br><span class="line"></span><br><span class="line">    sendfile            on; # 开启高效传输模式</span><br><span class="line">    tcp_nopush          on; # 减少网络报文段的数量</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65; # 保持连接的时间，也叫超时时间，单位秒</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             mime.types;  # 文件扩展名与类型映射表</span><br><span class="line">    default_type        application/octet-stream; # 默认文件类型</span><br><span class="line"></span><br><span class="line">    include conf.d/*.conf; # 加载子配置项</span><br><span class="line">    </span><br><span class="line">    # server段配置信息</span><br><span class="line">    server &#123;</span><br><span class="line">    listen       80;        # 配置监听的端口</span><br><span class="line">    server_name  localhost; # 配置的域名</span><br><span class="line">      </span><br><span class="line">    # location段配置信息</span><br><span class="line">    location / &#123;</span><br><span class="line">    root   /usr/local/nginx/html; # 网站根目录</span><br><span class="line">    index  index.html index.htm;  # 默认首页文件</span><br><span class="line">    deny 172.168.22.11;    # 禁止访问的ip地址，可以为all</span><br><span class="line">    allow 172.168.33.44;   # 允许访问的ip地址，可以为all</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page 500 502 503 504 /50x.html; # 默认50x对应的访问页面</span><br><span class="line">    error_page 400 404 error.html;     # 同上</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>main</code>：全局配置，对全局生效；</li><li><code>events</code>：配置影响Nginx服务器与用户的网络连接；</li><li><code>http</code>：配置代理、缓存、日志定义等绝大多数功能和第三方模块；</li><li><code>server</code>：配置虚拟主机的相关参数，一个<code>http</code>块中可以有多个<code>server</code>块；</li><li><code>location</code>：用于配置匹配的<code>uri</code>；</li><li><code>upstream</code>：配置后端服务器具体地址，是负载均衡配置不可或缺的部分。</li></ul><p>层级结构如下图所示：</p><img src="image-20230922085402001.png" alt="image-20230922085402001" style="zoom:67%;" /><h3 id="配置文件main段核心参数"><a href="#配置文件main段核心参数" class="headerlink" title="配置文件main段核心参数"></a>配置文件main段核心参数</h3><p><strong>user</strong></p><p>指定运行Nginx的<code>woker</code>子进程的属主和属组，其中组可以不指定。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user USERNAME [GROUP]</span><br><span class="line"></span><br><span class="line">user nginx lion; # 用户是nginx，组是lion</span><br></pre></td></tr></table></figure><p><strong>pid</strong></p><p>指定运行Nginx的<code>master</code>主进程的<code>pid</code>文件存放路径。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pid /opt/nginx/logs/nginx.pid; # master主进程的的pid存放在nginx.pid文件中</span><br></pre></td></tr></table></figure><p><strong>worker_rlimit_nofile_number</strong></p><p>指定<code>worker</code>子进程可以打开的最大文件句柄数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_rlimit_nofile 20480; # 可以理解成每个worker子进程的最大连接数量</span><br></pre></td></tr></table></figure><p><strong>worker_rlimit_core</strong></p><p>指定<code>worker</code>子进程异常终止后的<code>core</code>文件，用于记录分析问题。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_rlimit_core 50M; # 存放大小限制</span><br><span class="line">working_directory /opt/nginx/tmp; # 存放目录</span><br></pre></td></tr></table></figure><p><strong>worker_processes_number</strong></p><p>指定Nginx启动的<code>worker</code>子进程数量。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes 4; # 指定具体子进程数量</span><br><span class="line">worker_processes auto; # 与当前cpu物理核心数一致</span><br></pre></td></tr></table></figure><p><strong>worker_cpu_affinity</strong></p><p>将每个<code>worker</code>子进程与<code>CPU</code>物理核心绑定。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_cpu_affinity 0001 0010 0100 1000; # 4个物理核心，4个worker子进程</span><br></pre></td></tr></table></figure><img src="image-20240117085324787.png" alt="image-20240117085324787" /><p>将每个<code>worker</code>子进程与特定<code>CPU</code>物理核心绑定，优势在于避免同一个<code>worker</code>子进程在不同的<code>CPU</code>核心上切换，导致缓存失效，降低性能，但其并不能真正的避免进程切换。</p><p><strong>worker_priority</strong></p><p>指定<code>worker</code>子进程的<code>nice</code>值，以调整运行Nginx的优先级，通常设定为负值，以优先调用Nginx 。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_priority -10; # 120-10=110，110就是最终的优先级</span><br></pre></td></tr></table></figure><p>Linux默认进程的优先级值为<code>120</code>，值越小越优先。<code>nice</code>范围为<code>-20</code>到<code>+19</code>。</p><blockquote><p>注：应用的默认优先级值是<code>120</code>加上<code>nice</code>值等于它最终的值，这个值越小，优先级越高。</p></blockquote><p><strong>worker_shutdown_timeout</strong></p><p>指定<code>worker</code>子进程优雅退出时的超时时间。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_shutdown_timeout 5s;</span><br></pre></td></tr></table></figure><p><strong>timer_resolution</strong></p><p><code>worker</code>子进程内部使用的计时器精度，调整时间间隔越大，系统调用越少，有利于性能提升；反之，系统调用越多，性能下降。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">timer_resolution 100ms;</span><br></pre></td></tr></table></figure><p>在Linux系统中，用户需要获取计时器时需要向操作系统内核发送请求，有请求就必然会有开销，因此这个间隔越大开销就越小。</p><p><strong>daemon</strong></p><p>指定Nginx的运行方式，前台还是后台，前台用于调试，后台用于生产。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">daemon off; # 默认是on，后台运行模式</span><br></pre></td></tr></table></figure><h3 id="配置文件events段核心参数"><a href="#配置文件events段核心参数" class="headerlink" title="配置文件events段核心参数"></a>配置文件events段核心参数</h3><p><strong>use</strong></p><p>Nginx使用何种事件驱动模型。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use method; # 不推荐配置它，让nginx自己选择</span><br><span class="line"></span><br><span class="line">method可选值为：select、poll、kqueue、epoll、/dev/poll、eventport</span><br></pre></td></tr></table></figure><p><strong>worker_connections</strong></p><p><code>worker</code>子进程能够处理的最大并发连接数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_connections 1024; # 每个子进程的最大连接数为1024</span><br></pre></td></tr></table></figure><p><strong>accept_mutex</strong></p><p>是否打开负载均衡互斥锁。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">accept_mutex on; # 默认是off关闭的，这里推荐打开</span><br></pre></td></tr></table></figure><h3 id="server-name指令"><a href="#server-name指令" class="headerlink" title="server_name指令"></a>server_name指令</h3><p>指定虚拟主机域名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server_name name1 name2 name3</span><br><span class="line"></span><br><span class="line"># 示例：</span><br><span class="line">server_name www.nginx.com;</span><br></pre></td></tr></table></figure><p>域名匹配的四种写法：</p><ul><li><p>精确匹配：<code>server_name www.nginx.com</code>;</p></li><li><p>左侧通配：<code>server_name *.nginx.com</code>;</p></li><li><p>右侧通配：<code>server_name www.nginx.*</code>;</p></li><li><p>正则匹配：<code>server_name ~^www\.nginx\.*$</code>。</p></li></ul><p>匹配优先级：精确匹配 &gt; 左侧通配符匹配 &gt; 右侧通配符匹配 &gt; 正则表达式匹配。</p><h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><p>指定静态资源目录位置，它可以写在<code>http</code>、<code>server</code>、<code>location</code>等配置中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root path</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">location /image &#123;</span><br><span class="line">root /opt/nginx/static;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">当用户访问 www.test.com/image/1.png 时，实际在服务器找的路径是 /opt/nginx/static/image/1.png</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>root</code>会将定义路径与<code>URI</code>叠加，而<code>alias</code>只取定义路径。</p></blockquote><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>它也是指定静态资源目录位置，但只能写在<code>location</code>中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /image &#123;</span><br><span class="line">alias /opt/nginx/static/image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">当用户访问 www.test.com/image/1.png 时，实际在服务器找的路径是 /opt/nginx/static/image/1.png</span><br></pre></td></tr></table></figure><blockquote><p>注：使用<code>alias</code>时末尾是否需要添加<code>/</code>取决于<code>location</code>中的<code>URI</code>末尾是否有<code>/</code>，若<code>URI</code>末尾存在<code>/</code>，则<code>alias</code>末尾需要添加<code>/</code>，否则可省略。</p></blockquote><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p>配置路径。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location [ = | ~ | ~* | ^~ ] uri &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配规则：</p><ul><li><code>=</code>：精确匹配；</li><li><code>~</code>：正则匹配，区分大小写；</li><li><code>~*</code>：正则匹配，不区分大小写；</li><li><code>^~</code>：匹配到即停止搜索。</li></ul><p>匹配优先级：<code>=</code> &gt; <code>^~</code> &gt; <code>~</code> &gt; <code>~*</code> &gt; 不带任何字符。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_namewww.nginx-test.com;</span><br><span class="line"></span><br><span class="line">    # 只有当访问 www.nginx-test.com/match_all/ 时才会匹配到 /usr/local/nginx/html/match_all/index.html</span><br><span class="line">    location = /match_all/ &#123;</span><br><span class="line">        root /usr/local/nginx/html;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 当访问 www.nginx-test.com/1.jpg 时会去 /usr/local/nginx/images/1.jpg 中找对应的资源</span><br><span class="line">    location ~ \.(jpeg|jpg|png|svg)$ &#123;</span><br><span class="line">    root /usr/local/nginx/images;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 当访问 www.nginx-test.com/bbs/ 时会匹配上 /usr/local/nginx/html/bbs/index.html</span><br><span class="line">    location ^~ /bbs/ &#123;</span><br><span class="line">        root /usr/local/nginx/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>location URI结尾带不带&#x2F;</strong></p><p>如果<code>URL</code>的结构为<code>http://www.nginx-test.com/homepage/</code>。尾部如果缺少<code>/</code>将导致重定向，因为根据约定，<code>URL</code>尾部的<code>/</code>表示目录，没有<code>/</code>表示文件。所以访问<code>/homepage/</code>时，服务器会自动去该目录下找对应的默认文件。如果访问<code>/homepage</code>的话，服务器会先去找<code>homepage</code>文件，找不到的话会将<code>homepage</code>当成目录，重定向到<code>/homepage/</code>，去该目录下找默认文件。</p><blockquote><p><strong>URI</strong></p><p>URI，统一资源标志符（Uniform Resource Identifier），表示的是<code>Web</code>上每一种可用的资源，如<code>HTML</code>文档、图像、视频片段、程序等都由一个URI进行标识的。</p><p>URI通常由三部分组成：</p><ul><li>资源的命名机制</li><li>存放资源的主机名</li><li>资源自身的名称</li></ul><blockquote><p>注意：这只是一般URI资源的命名方式，只要是可以唯一标识资源的都被称为URI，上面三条合在一起是URI的充分不必要条件。</p></blockquote><p>URI举例：<code>https://www.nginx-test.com/img/1.jpg</code></p><p>解释：</p><ol><li>这是一个可以通过<code>https</code>协议访问的资源；</li><li>位于主机<code>www.nginx-test.com</code>上；</li><li>通过<code>/img/1.jpg</code>可以对该资源进行唯一标识（注意，这个不一定是完整的路径）。</li></ol><blockquote><p>注意：以上三点只不过是对实例的解释，以上三点并不是URI的必要条件，URI只是一种概念，怎样实现无所谓，只要它唯一标识一个资源就可以了。</p></blockquote><p><strong>URL</strong></p><p>URL，统一资源定位符（Uniform Resource Locator）。通俗地说，URL是<code>Internet</code>上描述信息资源的字符串，主要用在各种<code>www</code>客户程序和服务器程序上。采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL是URI概念的一种实现方式。</p><p>URL的一般格式为（带方括号<code>[]</code>的为可选项）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scheme://host[:port#]/path/.../[;url-params][?query-string][#anchor]</span><br><span class="line"></span><br><span class="line">scheme       # 有我们很熟悉的http、https、ftp以及著名的ed2k、迅雷的thunder等</span><br><span class="line">host         # HTTP服务器的IP地址或者域名</span><br><span class="line">port#        # HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如tomcat的默认端口是8080 -&gt; http://localhost:8080/</span><br><span class="line">path         # 访问资源的路径</span><br><span class="line">url-params   # 所带参数 </span><br><span class="line">query-string # 发送给http服务器的数据</span><br><span class="line">anchor       # 锚点定位</span><br></pre></td></tr></table></figure><p><strong>区别</strong></p><p>从上面的例子来看，可能觉得URI和URL是相同的概念，其实并不是，URI和URL都定义了资源是什么，但URL还定义了该如何访问资源。URL是一种具体的URI，它是URI的一个子集，它不仅唯一标识资源，而且还提供了定位该资源的信息。URI是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而URL则必须提供足够的信息来定位，是绝对的。</p></blockquote><p><strong>return</strong></p><p>停止处理请求，直接返回响应码或重定向到其他<code>URL</code>。执行<code>return</code>指令后，<code>location</code>中后续指令将不会被执行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return code [text];</span><br><span class="line">return code URL;</span><br><span class="line">return URL;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">location / &#123;</span><br><span class="line">return 404; # 直接返回状态码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">return 404 &quot;pages not found&quot;; # 返回状态码 + 一段文本</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">return 302 /bbs ; # 返回状态码 + 重定向地址</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">return https://www.baidu.com ; # 返回重定向地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h3><p>根据指定正则表达式匹配规则，重写<code>URL</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：rewrite 正则表达式 要替换的内容 [flag];</span><br><span class="line"></span><br><span class="line">上下文：server、location、if</span><br><span class="line"></span><br><span class="line">示例：rewrite /images/(.*\.jpg)$ /pic/$1; # $1是前面括号(.*\.jpg)的反向引用</span><br></pre></td></tr></table></figure><p><code>flag</code>可选值的含义：</p><ul><li><p><code>last</code>：重写后的<code>URL</code>发起新请求，再次进入<code>server</code>段，重试<code>location</code>中的匹配；</p></li><li><p><code>break</code>：直接使用重写后的<code>URL</code>，不再匹配其它<code>location</code>中语句；</p></li><li><p><code>redirect</code>：返回<code>302</code>临时重定向；</p></li><li><p><code>permanent</code>：返回<code>301</code>永久重定向。</p></li></ul><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name nginx-test.com; # 要在本地hosts文件进行配置</span><br><span class="line">    root html;</span><br><span class="line">    location /search &#123;</span><br><span class="line">    rewrite ^/(.*) https://www.baidu.com redirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /images &#123;</span><br><span class="line">    rewrite /images/(.*) /pics/$1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /pics &#123;</span><br><span class="line">    rewrite /pics/(.*) /photos/$1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /photos &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按照这个配置进行分析：</p><ul><li>当访问<code>nginx-test.com/search</code>时，会自动帮我们重定向到<code>https://www.baidu.com</code>。</li><li>当访问<code>nginx-test.com/images/1.jpg</code>时，第一步重写<code>URL</code>为<code>nginx-test.com/pics/1.jpg</code>，找到<code>pics</code>的<code>location</code>，继续重写<code>URL</code>为<code>nginx-test.com/photos/1.jpg</code>，找到<code>/photos</code>的<code>location</code>后，去<code>html/photos</code>目录下寻找<code>1.jpg</code>静态资源。</li></ul><h3 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：if (condition) &#123;...&#125;</span><br><span class="line"></span><br><span class="line">上下文：server、location</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">if ($http_user_agent ~ Chrome) &#123;</span><br><span class="line">rewrite /(.*)/browser/$1 break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>condition</code>判断条件：</p><ul><li><code>$variable</code>：仅为变量时，值为空或以0开头字符串都会被当做<code>false</code>处理；</li><li><code>=</code>或<code>!=</code>：相等或不等；</li><li><code>~</code>：正则匹配；</li><li><code>! ~</code>：非正则匹配；</li><li><code>~*</code>：正则匹配，不区分大小写；</li><li><code>-f</code>或<code>! -f</code>：检测文件存在或不存在；</li><li><code>-d</code>或<code>! -d</code>：检测目录存在或不存在；</li><li><code>-e</code>或<code>! -e</code>：检测文件、目录、符号链接等存在或不存在；</li><li><code>-x</code>或<code>! -x</code>：检测文件可以执行或不可执行。</li></ul><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    root html;</span><br><span class="line">    location / &#123;</span><br><span class="line">        if ( $uri = &quot;/images/&quot; )&#123;</span><br><span class="line">        rewrite (.*) /pics/ break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：当访问<code>localhost:8080/images/</code>时，会进入<code>if</code>判断里面执行<code>rewrite</code>命令。</p><h3 id="autoindex"><a href="#autoindex" class="headerlink" title="autoindex"></a>autoindex</h3><p>用户请求以<code>/</code>结尾时，列出目录结构，可以用于快速搭建静态资源下载网站。</p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name nginx-test.com;</span><br><span class="line"></span><br><span class="line">    location /download/ &#123;</span><br><span class="line">        root /opt/source;</span><br><span class="line"></span><br><span class="line">        autoindex on; # 打开autoindex，可选参数有 on | off</span><br><span class="line">        autoindex_exact_size on; # 修改为off，以KB、MB、GB显示文件大小，默认为on，以bytes显示出⽂件的确切⼤⼩</span><br><span class="line">        autoindex_format html; # 以html的方式进行格式化，可选参数有 html | json | xml</span><br><span class="line">        autoindex_localtime off; # 显示的⽂件时间为⽂件的服务器时间，默认为off，显示的⽂件时间为GMT时间</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：当访问<code>nginx-test.com/download/</code>时，会把服务器<code>/opt/source/download/</code>路径下的文件展示出来。</p><h2 id="实战配置"><a href="#实战配置" class="headerlink" title="实战配置"></a>实战配置</h2><p>在配置反向代理和负载均衡等功能之前，有两个核心模块是必须掌握的，这两个模块可以说是Nginx应用配置中的核心，它们分别是：<code>upstream</code>、<code>proxy_pass</code>。</p><h3 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h3><p>用于定义上游服务器（指的是后台提供的应用服务器）的相关信息。</p><img src="image-20240117114123786.png" alt="image-20240117114123786" /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：upstream name &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上下文：http</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">upstream back_end_server &#123;</span><br><span class="line">  server 192.168.100.33:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>upstream</code>内可使用的指令：</p><ul><li><code>server</code>：定义上游服务器地址；</li><li><code>zone</code>：定义共享内存，用于跨<code>worker</code>子进程；</li><li><code>keepalive</code>：对上游服务启用长连接；</li><li><code>keepalive_requests</code>：一个长连接最多请求<code>HTTP</code>的个数；</li><li><code>keepalive_timeout</code>：空闲情形下，一个长连接的超时时长；</li><li><code>hash</code>：哈希负载均衡算法；</li><li><code>ip_hash</code>：依据<code>IP</code>进行哈希计算的负载均衡算法；</li><li><code>least_conn</code>：最少连接数负载均衡算法；</li><li><code>least_time</code>：最短响应时间负载均衡算法；</li><li><code>random</code>：随机负载均衡算法。</li></ul><p><strong>server</strong></p><p>定义上游服务器地址。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：server address [parameters]</span><br><span class="line"></span><br><span class="line">上下文：upstream</span><br></pre></td></tr></table></figure><p><code>parameters</code>可选值：</p><ul><li><code>weight=number</code>：权重值，默认为1；</li><li><code>max_conns=number</code>：上游服务器的最大并发连接数；</li><li><code>fail_timeout=time</code>：服务器不可用的判定时间；</li><li><code>max_fails=numer</code>：服务器不可用的检查次数；</li><li><code>backup</code>：备份服务器，仅当其他服务器都不可用时才会启用；</li><li><code>down</code>：标记服务器长期不可用，离线维护。</li></ul><p><strong>keepalive</strong></p><p>限制每个<code>worker</code>子进程与上游服务器空闲长连接的最大数量。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keepalive connections;</span><br><span class="line"></span><br><span class="line">上下文：upstream</span><br><span class="line"></span><br><span class="line">示例：keepalive 16;</span><br></pre></td></tr></table></figure><p><strong>keepalive_requests</strong></p><p>单个长连接可以处理的最多<code>HTTP</code>请求个数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：keepalive_requests number;</span><br><span class="line"></span><br><span class="line">默认值：keepalive_requests 100;</span><br><span class="line"></span><br><span class="line">上下文：upstream</span><br></pre></td></tr></table></figure><p><strong>keepalive_timeout</strong></p><p>空闲长连接的最长保持时间。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：keepalive_timeout time;</span><br><span class="line"></span><br><span class="line">默认值：keepalive_timeout 60s;</span><br><span class="line"></span><br><span class="line">上下文：upstream</span><br></pre></td></tr></table></figure><p><strong>配置实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream back_end &#123;</span><br><span class="line">    server 127.0.0.1:8081 weight=3 max_conns=1000 fail_timeout=10s max_fails=2;</span><br><span class="line">    keepalive 32;</span><br><span class="line">    keepalive_requests 50;</span><br><span class="line">    keepalive_timeout 30s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h3><p>用于配置代理服务器。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：proxy_pass URL;</span><br><span class="line"></span><br><span class="line">上下文：location、if、limit_except</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">proxy_pass http://127.0.0.1:8081;</span><br><span class="line">proxy_pass http://127.0.0.1:8081/proxy;</span><br></pre></td></tr></table></figure><p><code>URL</code>参数原则：</p><ol><li><code>URL</code>必须以<code>http</code>或<code>https</code>开头；</li><li><code>URL</code>中可以携带变量；</li><li><code>URL</code>中是否带<code>URI</code>，会直接影响发往上游请求的<code>URL</code>。</li></ol><p>接下来让我们来看看两种常见的URL用法：</p><ul><li><code>proxy_pass http://192.168.100.33:8081</code> </li><li><code>proxy_pass http://192.168.100.33:8081/</code></li></ul><p>这两种用法的区别就是<code>带/</code>和<code>不带/</code>，在配置代理时区别如下：</p><ul><li><code>不带/</code>意味着Nginx不会修改用户<code>URL</code>，而是直接传给上游的应用服务器；</li><li><code>带/</code>意味着Nginx会修改用户<code>URL</code>，修改方法是将<code>location</code>后的<code>URI</code>从用户<code>URL</code>中删除。</li></ul><p><strong>不带&#x2F;的用法</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /bbs/ &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><ol><li>用户请求<code>URL</code>：<code>/bbs/abc/test.html</code> </li><li>请求到达Nginx的<code>URL</code>：<code>/bbs/abc/test.html</code> </li><li>请求到达上游应用服务器的<code>URL</code>： <code>/bbs/abc/test.html</code></li></ol><p><strong>带&#x2F;的用法</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /bbs/&#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><ol><li><p>用户请求<code>URL</code>：<code>/bbs/abc/test.html</code></p></li><li><p>请求到达Nginx的<code>URL</code>：<code>/bbs/abc/test.html</code></p></li><li><p>请求到达上游应用服务器的<code>URL</code>：<code>abc/test.html</code></p></li></ol><p>并没有拼接上<code>/bbs/</code>，这点和<code>root</code>与<code>alias</code>之间的区别是保持一致的。</p><h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><p>典型场景：反向代理（Reverse Proxy）方式是指以代理服务器来接受<code>internet</code>上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给<code>internet</code>上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><img src="image-20240117173335047.png" alt="image-20240117173335047" style="zoom:80%;" /><p>Nginx主要作为应用接入层，并为后端的<code>tomcat</code>等服务实现反向代理。</p><h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><ol><li><p>在<code>/usr/local/nginx/conf/</code>下创建<code>conf.d</code>目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/conf/</span><br><span class="line"><span class="built_in">mkdir</span> conf.d</span><br></pre></td></tr></table></figure><p>修改Nginx默认配置<code>nginx.conf</code>，新增内容如下：</p><img src="image-20240119090202382.png" alt="image-20240119090202382" /><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增内容</span></span><br><span class="line">include conf.d/*.conf;</span><br></pre></td></tr></table></figure></li><li><p>进入<code>conf.d</code>目录创建<code>reverse_proxy.conf</code>文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> conf.d</span><br><span class="line">vim reverse_proxy.conf</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80; </span><br><span class="line">    server_name reverse_proxy.com; </span><br><span class="line">    location / &#123; </span><br><span class="line">        proxy_pass https://www.baidu.com; </span><br><span class="line">        proxy_set_header Host $proxy_host; </span><br><span class="line">        #proxy_set_header Host $host; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新加载Nginx配置文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>访问<code>服务器公网IP</code>，此时直接跳转到百度页面。</p></li></ol><h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><p>准备两台服务器，公网<code>IP</code>分别是<code>1.12.36.60</code>、<code>121.43.178.226</code></p><p><strong>把1.12.36.60服务器作为上游服务器</strong></p><ol><li><p>在<code>/usr/local/nginx/conf/</code>下创建<code>conf.d</code>目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/conf/</span><br><span class="line"><span class="built_in">mkdir</span> conf.d</span><br></pre></td></tr></table></figure><p>修改Nginx默认配置<code>nginx.conf</code>，新增内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增内容</span></span><br><span class="line">include conf.d/*.conf;</span><br></pre></td></tr></table></figure></li><li><p>进入<code>conf.d</code>目录创建<code>proxy.conf</code>文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> conf.d</span><br><span class="line">vim proxy.conf</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name proxy.com;</span><br><span class="line">    location /proxy/ &#123;</span><br><span class="line">        root html/proxy;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>/usr/local/nginx/html/</code>下创建<code>proxy</code>目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/html/</span><br><span class="line"><span class="built_in">mkdir</span> proxy</span><br></pre></td></tr></table></figure></li><li><p>进入<code>proxy</code>目录创建<code>index.html</code>文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> proxy</span><br><span class="line">vim index.html</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt; 1.12.36.60 proxy html &lt;/h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置完成后重启<code>Nginx</code>服务器。</p></li><li><p>访问<code>http://1.12.36.60/proxy/</code>，结果如下：</p><img src="image-20240122084922862.png" alt="image-20240122084922862" /></li></ol><p><strong>把121.43.178.226服务器作为代理服务器</strong></p><ol><li><p>在<code>/usr/local/nginx/conf/</code>下创建<code>conf.d</code>目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/conf/</span><br><span class="line"><span class="built_in">mkdir</span> conf.d</span><br></pre></td></tr></table></figure><p>修改Nginx默认配置<code>nginx.conf</code>，新增内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增内容</span></span><br><span class="line">include conf.d/*.conf;</span><br></pre></td></tr></table></figure></li><li><p>进入<code>conf.d</code>目录创建<code>proxy.conf</code>文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> conf.d</span><br><span class="line">vim proxy.conf</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream back_end &#123;</span><br><span class="line">    server 1.12.36.60 weight=2 max_conns=1000 fail_timeout=10s max_fails=3;</span><br><span class="line">    keepalive 32;</span><br><span class="line">    keepalive_requests 80;</span><br><span class="line">    keepalive_timeout 20s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name proxy.com;</span><br><span class="line">    location /proxy &#123;</span><br><span class="line">    proxy_pass http://back_end/proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置完成后重启<code>Nginx</code>服务器。</p></li><li><p>访问<code>http://121.43.178.226/proxy/</code>，结果如下：</p><img src="image-20240118112037030.png" alt="image-20240118112037030" /></li></ol><p><strong>分析</strong></p><ul><li><p>当访问<code>http://121.43.178.226/proxy/</code>时通过<code>upstream</code>的配置找到<code>1.12.36.60</code>；</p></li><li><p>因此访问地址变为<code>http://1.12.36.60/proxy/</code>；</p></li><li><p>连接到<code>1.12.36.60</code>服务器，找到提供的<code>server</code>；</p></li><li><p>通过<code>server</code>找到<code>html/proxy/index.html</code>资源，最终展示出来。</p></li></ul><h3 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h3><p>作用：Nginx会按照相应的策略将客户端发来的请求转发至不同的应用服务器上，减轻单台服务器的压力，提高服务器的并发量。</p><p>Nginx负载均衡策略有6种：</p><ol><li><p>轮询：默认策略，Nginx自带策略，它是<code>upstream</code>模块默认的负载均衡默认策略，会将每个请求按时间顺序分配到不同的后端服务器。</p></li><li><p><code>weight</code>：权重，Nginx自带策略，指定轮询的访问几率，用于后端服务器性能不均时调整访问比例。</p></li><li><p><code>ip_hash</code>：依据<code>IP</code>分配，Nginx自带策略，指定负载均衡器按照基于客户端<code>IP</code>的分配方式，这个方法确保了相同客户端的请求一直发送到相同的服务器，可以解决<code>session</code>不能跨服务器的问题。</p></li><li><p><code>least_conn</code>：最少连接，Nginx自带策略，把请求转发给连接数较少的后端服务器。</p></li><li><p><code>fair</code>：第三方，按照服务器端的响应时间来分配请求，响应时间短的优先分配。</p></li><li><p><code>url_hash</code>：第三方，该策略按访问<code>URL</code>的<code>hash</code>结果来分配请求，使每个<code>URL</code>定向到同一台后端服务器，需要配合缓存用。</p></li></ol><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>把<code>1.12.36.60</code>服务器作为上游服务器，做如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /usr/loca/nginx/conf/conf.d/balance.conf</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    listen 8020;</span><br><span class="line">    location / &#123;</span><br><span class="line">    return 200 &#x27;return 8020 \n&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    listen 8030;</span><br><span class="line">    location / &#123;</span><br><span class="line">    return 200 &#x27;return 8030 \n&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    listen 8040;</span><br><span class="line">    location / &#123;</span><br><span class="line">    return 200 &#x27;return 8040 \n&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后重启Nginx服务器。</p><p>把<code>121.43.178.226</code>服务器作为代理服务器，做如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /usr/local/nginx/conf/conf.d/balance.conf</span><br><span class="line"></span><br><span class="line">upstream demo_server &#123;</span><br><span class="line">    server 1.12.36.60:8020;</span><br><span class="line">    server 1.12.36.60:8030;</span><br><span class="line">    server 1.12.36.60:8040;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name balance.com;</span><br><span class="line">    location /balance/ &#123;</span><br><span class="line">    proxy_pass http://demo_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后重启Nginx服务器。</p><p>执行<code>curl http://121.43.178.226/balance/</code>命令，结果如下：</p><img src="image-20240118130036649.png" alt="image-20240118130036649" /><p>可以看出负载均衡的配置已经生效了，每次给我们分发的上游服务器都不一样。这时只是通过简单的轮询策略进行上游服务器分发，接下来再来了解下Nginx的其它分发策略。</p><h4 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h4><p>通过制定关键字作为<code>hash key</code>，基于<code>hash</code>算法映射到特定的上游服务器中。关键字可以包含有变量、字符串。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream demo_server &#123;</span><br><span class="line">    hash $request_uri;</span><br><span class="line">    server 121.42.11.34:8020;</span><br><span class="line">    server 121.42.11.34:8030;</span><br><span class="line">    server 121.42.11.34:8040;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name balance.com;</span><br><span class="line"></span><br><span class="line">    location /balance/ &#123;</span><br><span class="line">    proxy_pass http://demo_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>hash $request_uri</code>表示使用<code>request_uri</code>变量作为<code>hash</code>的<code>key</code>值，只要访问的<code>uri</code>保持不变，就会一直分发给同一台服务器。</p><img src="image-20240118130531619.png" alt="image-20240118130531619" /><h4 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h4><p>根据客户端的请求<code>IP</code>进行判断，只要<code>IP</code>地址不变，就永远分配到同一台主机，它可以有效解决后台服务器<code>session</code>保持的问题。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream demo_server &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 121.42.11.34:8020;</span><br><span class="line">    server 121.42.11.34:8030;</span><br><span class="line">    server 121.42.11.34:8040;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name balance.com;</span><br><span class="line"></span><br><span class="line">    location /balance/ &#123;</span><br><span class="line">    proxy_pass http://demo_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="image-20240118130743765.png" alt="image-20240118130743765" /><h4 id="最小连接数算法"><a href="#最小连接数算法" class="headerlink" title="最小连接数算法"></a>最小连接数算法</h4><p>各个<code>worker</code>子进程通过读取共享内存的数据，来获取后端服务器的信息，挑选一台当前已建立连接数最少的服务器进行分配请求。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：least_conn;</span><br><span class="line"></span><br><span class="line">上下文：upstream;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream demo_server &#123;</span><br><span class="line">    zone test 10M; # zone可以设置共享内存空间的名字和大小</span><br><span class="line">    least_conn;</span><br><span class="line">    server 121.42.11.34:8020;</span><br><span class="line">    server 121.42.11.34:8030;</span><br><span class="line">    server 121.42.11.34:8040;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name balance.com;</span><br><span class="line"></span><br><span class="line">    location /balance/ &#123;</span><br><span class="line">    proxy_pass http://demo_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="image-20240118131131406.png" alt="image-20240118131131406" /><h4 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream demo_server &#123;</span><br><span class="line">    server 1.12.36.60:8020 weight=6;</span><br><span class="line">    server 1.12.36.60:8030 weight=6;</span><br><span class="line">    server 1.12.36.60:8040 weight=2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name balance.com;</span><br><span class="line"></span><br><span class="line">    location /balance/ &#123;</span><br><span class="line">    proxy_pass http://demo_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="image-20240118143902512.png" alt="image-20240118143902512" /><h4 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h4><p>在一般情况下，升级服务器端应用，需要将应用源码或程序包上传到服务器，然后停止掉老版本服务，再启动新版本。但是这种简单的发布方式存在两个问题，一方面，在新版本升级过程中，服务是暂时中断的，另一方面，如果新版本有BUG，升级失败，回滚起来也非常麻烦，容易造成更长时间的服务不可用。下面介绍一种解决策略——<code>灰度发布</code>。</p><p>灰度发布也叫金丝雀发布，起源是，矿井工人发现，金丝雀对瓦斯气体很敏感，矿工会在下井之前，先放一只金丝雀到井中，如果金丝雀不叫了，就代表瓦斯浓度高。</p><img src="image-20240118153035212.png" alt="image-20240118153035212" style="zoom:80%;" /><p>在灰度发布开始后，先启动一个新版本应用，但是并不直接将流量切过来，而是测试人员对新版本进行线上测试，启动的这个新版本应用，就是我们的金丝雀。如果没有问题，那么可以将少量的用户流量导入到新版本上，然后再对新版本做运行状态观察，收集各种运行时数据，如果此时对新旧版本做各种数据对比，就是所谓的<code>A/B测试</code>。</p><p>当确认新版本运行良好后，再逐步将更多的流量导入到新版本上，在此期间，还可以不断地调整新旧两个版本的运行服务器副本数量，以使得新版本能够承受越来越大的流量压力，直到将100%的流量都切换到新版本上，最后关闭剩下的老版本服务，完成灰度发布。</p><p>如果在灰度发布过程中（灰度期）发现了新版本有问题，就应该立即将流量切回老版本上，这样可以将负面影响控制在最小范围内。</p><p>使用场景：利用灰度发布稳定低风险地实现迁移后业务验证以及业务割接。</p><img src="image-20240118150520681.png" alt="image-20240118150520681" style="zoom:80%;" /><h3 id="配置缓存"><a href="#配置缓存" class="headerlink" title="配置缓存"></a>配置缓存</h3><p>缓存可以非常有效的提升性能，因此不论是客户端（浏览器），还是代理服务器（Nginx），乃至上游服务器都多少会涉及到缓存。</p><p><strong>proxy_cache</strong></p><p>存储一些之前被访问过、而且可能将要被再次访问的资源，使用户可以直接从代理服务器获得，从而减少上游服务器的压力，加快整体访问速度。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：proxy_cache zone | off ; # zone 是共享内存的名称</span><br><span class="line"></span><br><span class="line">默认值：proxy_cache off;</span><br><span class="line"></span><br><span class="line">上下文：http、server、location</span><br></pre></td></tr></table></figure><p><strong>proxy_cache_path</strong></p><p>设置缓存文件的存放路径。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：proxy_cache_path path [level=levels] ... # 可选参数省略，下面会详细列举</span><br><span class="line"></span><br><span class="line">默认值：proxy_cache_path off;</span><br><span class="line"></span><br><span class="line">上下文：http</span><br></pre></td></tr></table></figure><p>参数含义：</p><ul><li><code>path</code>：缓存文件的存放路径。</li><li><code>level</code>：<code>path</code>的目录层级。</li><li><code>keys_zone</code>：设置共享内存。</li><li><code>inactive</code>：在指定时间内没有被访问，缓存会被清理，默认10分钟。</li></ul><p><strong>proxy_cache_key</strong></p><p>设置缓存文件的<code>key</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：proxy_cache_key</span><br><span class="line"></span><br><span class="line">默认值：proxy_cache_key $scheme$proxy_host$request_uri;</span><br><span class="line"></span><br><span class="line">上下文：http、server、location</span><br></pre></td></tr></table></figure><p><strong>proxy_cache_valid</strong></p><p>配置什么状态码可以被缓存，以及缓存时长。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：proxy_cache_valid [code...] time;</span><br><span class="line"></span><br><span class="line">上下文：http、server、location</span><br><span class="line"></span><br><span class="line">配置示例：proxy_cache_valid 200 304 2m; # 对于状态为200和304的缓存文件，缓存时间为2分钟</span><br></pre></td></tr></table></figure><p><strong>proxy_no_cache</strong></p><p>定义条件，如果至少一个字符串条件非空而且非0，则该响应不会被缓存。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：proxy_no_cache string;</span><br><span class="line"></span><br><span class="line">上下文：http、server、location</span><br><span class="line"></span><br><span class="line">示例：proxy_no_cache $http_pragma $http_authorization;</span><br></pre></td></tr></table></figure><p><strong>proxy_cache_bypass</strong></p><p>定义条件，如果至少一个字符串条件非空而且非0，Nginx就不会从缓存中获取响应。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：proxy_cache_bypass string;</span><br><span class="line"></span><br><span class="line">上下文：http、server、location</span><br><span class="line"></span><br><span class="line">示例：proxy_cache_bypass $http_pragma $http_authorization;</span><br></pre></td></tr></table></figure><p><strong>upstream_cache_status</strong></p><p>它存储了缓存是否命中的信息，会设置在响应头信息中，在调试中非常有用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MISS: 未命中缓存</span><br><span class="line">HIT： 命中缓存</span><br><span class="line">EXPIRED: 缓存过期</span><br><span class="line">STALE: 命中了陈旧缓存</span><br><span class="line">REVALIDDATED: Nginx验证陈旧缓存依然有效</span><br><span class="line">UPDATING: 内容陈旧，但正在更新</span><br><span class="line">BYPASS: X响应从原始服务器获取</span><br></pre></td></tr></table></figure><p><strong>配置实例</strong></p><p>把<code>1.12.36.60</code>服务器作为上游服务器，做如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /usr/local/nginx/conf/conf.d/cache.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8020;</span><br><span class="line">    location / &#123;</span><br><span class="line">    root html/8020;</span><br><span class="line">    index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8030;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root html/8030;</span><br><span class="line">    index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># html/8020/index.html</span><br><span class="line">&lt;h1&gt; 1.12.36.60 - 8020 html &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"># html/8030/index.html</span><br><span class="line">&lt;h1&gt; 1.12.36.60 - 8030 html &lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>配置完成后重启Nginx服务器。</p><p>把<code>121.43.178.226</code>服务器作为代理服务器，做如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /usr/local/nginx/conf/conf.d/cache.conf</span><br><span class="line"></span><br><span class="line">proxy_cache_path /usr/local/nginx/cache_temp levels=2:2 keys_zone=cache_zone:30m max_size=2g inactive=60m use_temp_path=off;</span><br><span class="line"></span><br><span class="line">upstream cache_server &#123;</span><br><span class="line">    server 1.12.36.60:8020;</span><br><span class="line">    server 1.12.36.60:8030;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name cache.com;</span><br><span class="line">    location /cache/ &#123;</span><br><span class="line">        proxy_cache cache_zone; # 设置缓存内存，上面配置中已经定义好的</span><br><span class="line">        proxy_cache_valid 200 5m; # 缓存状态为200的请求，缓存时长为5分钟</span><br><span class="line">        proxy_cache_key $request_uri; # 缓存文件的key为请求的URI</span><br><span class="line">        add_header Nginx-Cache-Status $upstream_cache_status; # 把缓存状态设置为头部信息，响应给客户端</span><br><span class="line">        proxy_pass http://cache_server/; # 代理转发</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后重启Nginx服务器。</p><p>测试：</p><img src="image-20240122125955060.png" alt="image-20240122125955060" /><p>此时可以在<code>/usr/local/nginx/cache_temp</code>路径下找到相应的缓存文件。</p><img src="image-20240122130111070.png" alt="image-20240122130111070" /><blockquote><p>对于一些实时性要求非常高的页面或数据来说，不应该设置缓存。下面来看看如何配置不缓存的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name cache.com;</span><br><span class="line">    # URI中后缀为.txt或.text的设置变量值为&quot;no cache&quot;</span><br><span class="line">    if ($request_uri ~ \.(txt|text)$) &#123;</span><br><span class="line">    set $cache_name &quot;no cache&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /cache/ &#123;</span><br><span class="line">        proxy_no_cache $cache_name; # 判断该变量是否有值，如果有值则不进行缓存，如果没有值则进行缓存</span><br><span class="line">        proxy_cache cache_zone; # 设置缓存内存</span><br><span class="line">        proxy_cache_valid 200 5m; # 缓存状态为200的请求，缓存时长为5分钟</span><br><span class="line">        proxy_cache_key $request_uri; # 缓存文件的key为请求的URI</span><br><span class="line">        add_header Nginx-Cache-Status $upstream_cache_status; # 把缓存状态设置为头部信息，响应给客户端</span><br><span class="line">        proxy_pass http://cache_server/; # 代理转发</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><h4 id="HTTPS工作流程"><a href="#HTTPS工作流程" class="headerlink" title="HTTPS工作流程"></a>HTTPS工作流程</h4><ol><li><p>客户端（浏览器）访问<code>https://www.baidu.com</code>；</p></li><li><p>百度服务器返回<code>HTTPS</code>使用的<code>CA</code>证书；</p></li><li><p>浏览器验证<code>CA</code>证书是否为合法证书；</p></li><li><p>验证通过，证书合法，生成一串随机数并使用公钥（证书中提供的）进行加密；</p></li><li><p>发送公钥加密后的随机数给百度服务器；</p></li><li><p>百度服务器拿到密文，通过私钥进行解密，获取到随机数（公钥加密，私钥解密，反之也可以）；</p></li><li><p>百度服务器把要发送给浏览器的内容，使用随机数进行加密后传输给浏览器；</p></li><li><p>此时浏览器可以使用随机数进行解密，获取到服务器的真实传输内容。</p></li></ol><p>这就是<code>HTTPS</code>的基本运作原理，对称加密和非对称加密配合使用，保证传输内容的安全性。</p><h4 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h4><p>下载证书的压缩文件，里面有个<code>Nginx</code>文件夹，把<code>xxx.crt</code>和<code>xxx.key</code>文件拷贝到服务器目录，再进行如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2 default_server; # SSL访问端口号为443</span><br><span class="line">    server_name fuyuan.com; # 填写绑定证书的域名（我这里是随便写的）</span><br><span class="line">    ssl_certificate /etc/nginx/https/lion.club_bundle.crt; # 证书地址</span><br><span class="line">    ssl_certificate_key /etc/nginx/https/lion.club.key; # 私钥地址</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 支持ssl协议版本，默认为后三个，主流版本是[TLSv1.2]</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此配置后就能正常访问<code>HTTPS</code>版的网站了。</p><h3 id="配置跨域CORS"><a href="#配置跨域CORS" class="headerlink" title="配置跨域CORS"></a>配置跨域CORS</h3><p><strong>跨域的定义</strong></p><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互，这是一个用于隔离潜在恶意文件的重要安全机制，通常不允许不同源间的读操作。</p><p><strong>同源的定义</strong></p><p>如果两个页面的协议、端口（如果有指定）和域名都相同，则两个页面具有相同的源。</p><p>下面给出了与URL<code>http://store.company.com/dir/page.html</code>的源进行对比的示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://store.company.com/dir2/other.html # 同源</span><br><span class="line">https://store.company.com/secure.html    # 不同源，协议不同</span><br><span class="line">http://store.company.com:81/dir/etc.html # 不同源，端口不同</span><br><span class="line">http://news.company.com/dir/other.html   # 不同源，主机不同</span><br></pre></td></tr></table></figure><p>不同源会有如下限制：</p><ul><li><code>Web</code>数据层面：同源策略限制了不同源的站点读取当前站点的<code>Cookie</code>、<code>IndexDB</code>、<code>LocalStorage</code>等数据。</li><li><code>DOM</code>层面：同源策略限制了来自不同源的<code>JavaScript</code>脚本对当前<code>DOM</code>对象读和写的操作。</li><li>网络层面：同源策略限制了通过<code>XMLHttpRequest</code>等方式将站点的数据发送给不同源的站点。</li></ul><p><strong>Nginx解决跨域的原理</strong></p><p>例如：</p><ul><li>前端服务的域名为：<code>fe.server.com</code></li><li>后端服务的域名为：<code>dev.server.com</code></li></ul><p>现在从<code>fe.server.com</code>对<code>dev.server.com</code>发起请求一定会出现跨域，此时我们只需启动一个Nginx服务器，将<code>server_name</code>设置为<code>fe.server.com</code>，然后设置相应的<code>location</code>以拦截前端需要跨域的请求，最后将请求代理回<code>dev.server.com</code>，具体配置如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name fe.server.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass dev.server.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可以完美绕过浏览器的同源策略：<code>fe.server.com</code>访问Nginx的<code>fe.server.com</code>属于同源访问，而Nginx对服务端转发的请求不会触发浏览器的同源策略。</p><h3 id="配置开启gzip压缩"><a href="#配置开启gzip压缩" class="headerlink" title="配置开启gzip压缩"></a>配置开启gzip压缩</h3><p><code>gzip</code>是规定的三种标准<code>HTTP</code>压缩格式之一，目前绝大多数的网站都在使用<code>gzip</code>传输<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>等资源文件。</p><p>对于文本文件，<code>gzip</code>的效果非常明显，开启后传输所需流量大约会降至<code>1/4 ~ 1/3</code>。值得注意的是，并不是每个浏览器都支持<code>gzip</code>的，那么如何知道客户端是否支持<code>gzip</code>呢——客户端通过请求头中的<code>Accept-Encoding</code>来标识对压缩的支持。</p><img src="image-20240118173142953.png" alt="image-20240118173142953" /><p>启用<code>gzip</code>同时需要客户端和服务端的支持，如果客户端支持<code>gzip</code>的解析，那么只要服务端能够返回<code>gzip</code>的文件就可以启用<code>gzip</code>了，我们可以通过Nginx的配置来让服务端支持<code>gzip</code>。下面的<code>respone</code>中<code>content-encoding:gzip</code>表明服务端开启了<code>gzip</code>的压缩方式。</p><img src="image-20240118173556589.png" alt="image-20240118173556589" /><p>在<code>/usr/local/nginx/conf/conf.d/</code>文件夹中新建配置文件<code>gzip.conf</code>，配置如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 默认 off，是否开启 gzip</span><br><span class="line">gzip on; </span><br><span class="line"># 要采用 gzip 压缩的 MIME 文件类型，其中 text/html 被系统强制启用</span><br><span class="line">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line"># ---- 以上两个参数开启就可以支持gzip压缩了 ---- #</span><br><span class="line"></span><br><span class="line"># 默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 .gz 文件内容</span><br><span class="line">gzip_static on;</span><br><span class="line"></span><br><span class="line"># 默认 off，Nginx 做为反向代理时启用，用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩</span><br><span class="line">gzip_proxied any;</span><br><span class="line"></span><br><span class="line"># 用于在响应消息头中添加 Vary：Accept-Encoding，使代理服务器根据请求头中的 Accept-Encoding 识别是否启用 gzip 压缩</span><br><span class="line">gzip_vary on;</span><br><span class="line"></span><br><span class="line"># gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line"></span><br><span class="line"># 获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位获得</span><br><span class="line">gzip_buffers 16 8k;</span><br><span class="line"></span><br><span class="line"># 允许压缩的页面最小字节数，页面字节数从header头中的 Content-Length 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大</span><br><span class="line"># gzip_min_length 1k;</span><br><span class="line"></span><br><span class="line"># 默认 1.1，启用 gzip 所需的 HTTP 最低版本</span><br><span class="line">gzip_http_version 1.1;</span><br></pre></td></tr></table></figure><blockquote><p>配置<code>gzip_static</code>后报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZbp13q6vsoi3olxdbo7syZ sbin]<span class="comment"># ./nginx -s reload</span></span><br><span class="line">nginx: [emerg] unknown directive <span class="string">&quot;gzip_static&quot;</span> <span class="keyword">in</span> /usr/local/nginx/conf/conf.d/web.conf:2</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用./nginx -V查看当前nginx的配置信息，看有没有配置--with-http_gzip_static_module</span><br><span class="line">[root@iZbp13q6vsoi3olxdbo7syZ sbin]# ./nginx -V</span><br><span class="line">nginx version: nginx/1.15.8</span><br><span class="line">built by gcc 9.3.1 20200408 (Red Hat 9.3.1-2) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --with-http_ssl_module</span><br><span class="line"></span><br><span class="line"># 通过以上信息中的configure arguments看出我们没有配置该信息，这时需要我们进入原来nginx解压的目录中，进行配置并重新安装。</span><br><span class="line">[root@iZbp13q6vsoi3olxdbo7syZ sbin]# cd /usr/local/nginx-1.15.8</span><br><span class="line">[root@iZbp13q6vsoi3olxdbo7syZ nginx-1.15.8]# ./configure --with-http_ssl_module --with-http_gzip_static_module</span><br><span class="line">[root@iZbp13q6vsoi3olxdbo7syZ nginx-1.15.8]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure></blockquote><p>也可以通过前端构建工具例如<code>webpack</code>、<code>rollup</code>等在打生产包时就做好<code>gzip</code>压缩，然后放到Nginx服务器中，这样可以减少服务器的开销，加快访问速度。</p><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><p>前端使用Nginx做反向代理，如果后端服务器宕掉的话，Nginx是不能把这台<code>real server</code>踢出<code>upstream</code>的，所以还会有请求转发到后端的这台<code>real server</code>上面去，虽然Nginx可以在<code>localtion</code>中启用<code>proxy_next_upstream</code>来解决返回给用户的错误页面，但这个还是会把请求转发给这台服务器的，然后再转发给别的服务器，这样就浪费了一次转发。本次使用淘宝技术团队开发的Nginx模快<code>nginx_upstream_check_module</code>来检测后方<code>real server</code>的健康状态，如果后端服务器不可用，则所有的请求不转发到这台服务器。</p><p><code>nginx_upstream_check_module</code>模块专门提供负载均衡器内节点的健康检查的外部模块，通过它可以用来检测后端<code>real server</code>的健康状态。如果后端<code>real server</code>不可用，则后面的请求就不会转发到该节点上，并持续检查节点的状态。</p><h4 id="Nginx后端健康检查"><a href="#Nginx后端健康检查" class="headerlink" title="Nginx后端健康检查"></a>Nginx后端健康检查</h4><p>Nginx自带健康检查的缺陷：</p><ol><li>Nginx只有访问时才发起对后端节点的探测。</li><li>如果本次请求中节点正好出现故障，Nginx依然将请求转交给故障节点，然后再转交给健康节点进行处理。所以不会影响到这次请求的正常进行，但是会影响效率，因为多了一次转发。</li><li>自带模块无法做到预警。</li><li>被动健康检查。</li></ol><p>使用第三访模块<code>nginx_upstream_check_module</code>：</p><ol><li>区别于Nginx自带的非主动式的心跳检测，<code>nginx_upstream_check_module</code>自带一个提供主动式后端服务器心跳检测模块。</li><li>若健康检查包类型为<code>http</code>，在开启健康检查功能后，Nginx会根据设置的间隔向指定的后端服务器端口发送健康检查包，并根据期望的<code>http</code>回复状态码来判断服务是否健康。</li><li>后端真实节点不可用，则请求不会转发到故障节点。</li><li>故障节点恢复后，请求正常转发。</li></ol><h4 id="Nginx被动检查"><a href="#Nginx被动检查" class="headerlink" title="Nginx被动检查"></a>Nginx被动检查</h4><p>Nginx自带健康检查模块：ngx_http_upstream_module，可以做到基本的健康检查，配置如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream health_check &#123;</span><br><span class="line">    server 1.12.36.60:8020 max_fails=1 fail_timeout=10s;</span><br><span class="line">    server 1.12.36.60:8030 max_fails=1 fail_timeout=10s;</span><br><span class="line">    # max_fails=1和fail_timeout=10s表示在单位周期为10s内，达到1次连接失败，那么将把节点标记为不可用，并等待下一个周期（同样时常为fail_timeout）再一次去请求，判断连接是否成功</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name check.com; </span><br><span class="line">    location /check &#123;</span><br><span class="line">    proxy_pass http://health_check;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：Nginx只有访问时才发起对后端节点的探测。如果本次请求中节点正好出现故障，Nginx依然将请求转交给故障节点，然后再转交给健康节点进行处理。所以不会影响到这次请求的正常进行，但是会影响效率，因为多了一次转发。</p><h4 id="Nginx主动检查"><a href="#Nginx主动检查" class="headerlink" title="Nginx主动检查"></a>Nginx主动检查</h4><p>Nignx定时主动地去ping后端的服务列表，当发现某服务出现异常时，把该服务从健康列表中移除，当发现某服务恢复时，又能够将该服务加回健康列表中。</p><p><strong>安装nginx_upstream_check_module模块</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载安装包</span></span><br><span class="line">wget https://codeload.github.com/yaoweibin/nginx_upstream_check_module/zip/master</span><br><span class="line"></span><br><span class="line">unzip master &amp;&amp; <span class="built_in">rm</span> -f maste</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx-1.15.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打上nginx_upstream_check_module补丁</span></span><br><span class="line">patch -p1 &lt; /usr/local/nginx_upstream_check_module-master/check_1.16.1+.patch</span><br><span class="line"></span><br><span class="line">./configure --add-module=/usr/local/nginx_upstream_check_module-master --with-http_ssl_module --with-http_gzip_static_module</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><p>Nginx提供了三种HTTP服务健康检查方案供用户选择：</p><ol><li><p>TCP层默认检查方案：定时与后端服务建立一条tcp链接，链接建立成功则认为服务节点是健康的。</p></li><li><p>HTTP层默认检查方案：</p><p>TCP层检查有一定的局限性：</p><ul><li>很多HTTP服务是带状态的，端口处于listen状态并不能代表服务已经完成预热。</li><li>不能真实反映服务内部处理逻辑是否产生拥堵。</li></ul><p>这时可以选择http层健康检查，会向服务发送一个http请求GET &#x2F; HTTP&#x2F;1.0\r\n\r\n，返回状态是2xx或3xx时认为后端服务正常。</p></li><li><p>自定义方案：nginx_upstream_check_module模块。</p><p>可根据下文描述自定义检查方案。</p></li></ol><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream health_check1 &#123;</span><br><span class="line">    server 1.12.36.60:8020;</span><br><span class="line">    server 1.12.36.60:8030;</span><br><span class="line">    check interval=3000 rise=2 fall=5 timeout=1000 type=http;</span><br><span class="line">    check_http_send &quot;HEAD / HTTP/1.0\r\n\r\n&quot;;</span><br><span class="line">    check_http_expect_alive http_2xx http_3xx;</span><br><span class="line">&#125;</span><br><span class="line">upstream health_check2 &#123;</span><br><span class="line">    server 1.12.36.60:8020;</span><br><span class="line">    server 1.12.36.60:8030;</span><br><span class="line">    check interval=3000 rise=2 fall=5 timeout=1000 type=http;</span><br><span class="line">    check_keepalive_requests 100;</span><br><span class="line">    check_http_send &quot;HEAD / HTTP/1.1\r\nConnection: keep-alive\r\n\r\n&quot;;</span><br><span class="line">    check_http_expect_alive http_2xx http_3xx;</span><br><span class="line">&#125;</span><br><span class="line">server &#123; </span><br><span class="line">    listen 80;</span><br><span class="line">    location /check1 &#123;</span><br><span class="line">    proxy_pass http://health_check1/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /check2 &#123;</span><br><span class="line">    proxy_pass http://health_check2/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /status &#123;</span><br><span class="line">        check_status;</span><br><span class="line">        access_log off;</span><br><span class="line">        error_log /dev/null emerg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置参数详解</strong></p><ol><li><p><code>check</code>：用于打开后端服务器的健康检查功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: check interval=milliseconds [fall=count] [rise=count] [timeout=milliseconds] [default_down=true|false] [type=tcp|http|ssl_hello|mysql|ajp] [port=check_port]</span><br><span class="line">Default: 如果没有配置参数，默认值为：interval=30000 fall=5 rise=2 timeout=1000 default_down=true type=tcp</span><br><span class="line">Context: upstream</span><br></pre></td></tr></table></figure><ul><li><code>interval</code>：向后端发送的健康检查包的间隔，单位为毫秒。</li><li><code>fall（fall_count）</code>：如果连续失败次数达到<code>fall_count</code>，服务器就被认为是<code>down</code>。</li><li><code>rise（rise_count）</code>：如果连续成功次数达到<code>rise_count</code>，服务器就被认为是<code>up</code>。</li><li><code>timeout</code>：后端健康请求的超时时间。</li><li><code>default_down</code>：设定初始时服务器的状态，如果是<code>true</code>，就说明默认是<code>down</code>的，如果是<code>false</code>，就是<code>up</code>的。默认值为<code>true</code>，也就是一开始服务器认为是不可用，要等健康检查包达到一定成功次数以后才会被认为是健康的。</li><li><code>type</code>：健康检查包的类型，现在支持以下多种类型    <ul><li><code>tcp</code>：简单的<code>tcp</code>连接，如果连接成功，就说明后端正常。</li><li><code>ssl_hello</code>：发送一个初始的<code>SSL hello</code>包并接受服务器的<code>SSL hello</code>包。</li><li><code>http</code>：发送<code>http</code>请求，通过后端的回复包状态来判断后端是否存活。</li><li><code>mysql</code>：与<code>mysql</code>服务器进行连接，通过接收服务器的<code>greeting</code>包来判断后端是否存活。</li><li><code>ajp</code>：向后端发送<code>AJP</code>协议的<code>Cping</code>包，通过接收<code>Cpong</code>包来判断后端是否存活。</li><li><code>port</code>：指定后端服务器的检查端口。可以指定不同于真实服务的后端服务器端口，比如后端提供的是443端口的应用，我们可以去检查80端口的状态来判断后端健康状况。默认为<code>0</code>，表示跟后端提供真实服务的端口一致。</li></ul></li></ul></li><li><p><code>check_keepalive_requests</code>：配置一个连接发送的请求数，其默认值为1，表示完成1次请求后关闭连接。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: check_keepalive_requests request_num</span><br><span class="line">Default: 1</span><br><span class="line">Context: upstream</span><br></pre></td></tr></table></figure></li><li><p><code>check_http_send</code>：配置<code>http</code>健康检查包发送的请求内容。为了减少传输数据量，推荐采用<code>HEAD</code>方法。</p><p>当采用长连接进行健康检查时，需在该指令中添加<code>keep-alive</code>请求头，如：<code>HEAD / HTTP/1.1\r\nConnection: keep-alive\r\n\r\n</code>。</p><p>同时，在采用<code>GET</code>方法的情况下，请求<code>uri</code>的<code>size</code>不宜过大，确保可以在1个<code>interval</code>内传输完成，否则会被健康检查模块视为后端服务器或网络异常。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: check_http_send http_packet</span><br><span class="line">Default: &quot;GET / HTTP/1.0\r\n\r\n&quot;</span><br><span class="line">Context: upstream</span><br></pre></td></tr></table></figure></li><li><p><code>check_http_expect_alive</code>：指定<code>http</code>回复的成功状态，默认认为<code>2XX</code>和<code>3XX</code>的状态是健康的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: check_http_expect_alive [ http_2xx | http_3xx | http_4xx | http_5xx ]</span><br><span class="line">Default: http_2xx | http_3xx</span><br><span class="line">Context: upstream</span><br></pre></td></tr></table></figure></li><li><p><code>check_shm_size</code>：所有的后端服务器健康检查状态都存于共享内存中，该参数用于设置共享内存的大小，默认为<code>1M</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: check_shm_size size</span><br><span class="line">Default: 1M</span><br><span class="line">Context: http</span><br></pre></td></tr></table></figure></li><li><p><code>check_status</code>：显示服务器的健康状态页面。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: check_status [html|csv|json]</span><br><span class="line">Default: check_status html</span><br><span class="line">Context: location</span><br></pre></td></tr></table></figure><p>可以配置显示页面的格式，支持的格式有：<code>html</code>、<code>csv</code>、 <code>json</code>。默认类型为<code>html</code>。</p><p>也可以通过请求的参数来指定格式，假设<code>/status</code>为状态页面的<code>URI</code>，<code>format</code>参数改变页面的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/status?format=html</span><br><span class="line">/status?format=csv</span><br><span class="line">/status?format=json</span><br></pre></td></tr></table></figure><p>同时也可以通过<code>status</code>参数来获取相同服务器状态的列表，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/status?format=html&amp;amp;status=down</span><br><span class="line">/status?format=csv&amp;amp;status=up</span><br></pre></td></tr></table></figure><p>下面是一个<code>html</code>状态页面的例子（<code>server number</code>是后端服务器的数量，<code>generation</code>是<code>Nginx reload</code>的次数。<code>Index</code>是服务器的索引，<code>Upstream</code>是配置中<code>upstream</code>的名称，<code>Name</code>是服务器<code>IP</code>，<code>Status</code>是服务器的状态，<code>Rise</code>是服务器连续检查成功的次数，<code>Fall</code>是连续检查失败的次数，<code>Check type</code>是检查的方式，<code>Check port</code>是后端专门为健康检查设置的端口）：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN</span></span></span><br><span class="line"><span class="string"><span class="meta">&quot;</span>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd<span class="string">&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">&lt;html xmlns=&quot;</span>http://www.w3.org/1999/xhtml<span class="string">&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &lt;head&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;title&gt;Nginx http upstream check status&lt;/title&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &lt;/head&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &lt;body&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;h1&gt;Nginx http upstream check status&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;h2&gt;Check upstream server number: 1, generation: 3&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;table style=&quot;</span>background-color:white<span class="string">&quot; cellspacing=&quot;</span>0<span class="string">&quot; cellpadding=&quot;</span>3<span class="string">&quot; border=&quot;</span>1<span class="string">&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;tr bgcolor=&quot;</span>#C0C0C0<span class="string">&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;th&gt;Index&lt;/th&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;th&gt;Upstream&lt;/th&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;th&gt;Name&lt;/th&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;th&gt;Status&lt;/th&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;th&gt;Rise counts&lt;/th&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;th&gt;Fall counts&lt;/th&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;th&gt;Check type&lt;/th&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;th&gt;Check port&lt;/th&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;/tr&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;tr&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;td&gt;0&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;td&gt;backend&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;td&gt;106.187.48.116:80&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;td&gt;up&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;td&gt;39&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;td&gt;0&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;td&gt;http&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;td&gt;80&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;/tr&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;/table&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &lt;/body&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">&lt;/html&gt;</span></span></span><br></pre></td></tr></table></figure><p>下面是<code>csv</code>格式页面的例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0,backend,106.187.48.116:80,up,46,0,http,80</span><br></pre></td></tr></table></figure><p>下面是<code>json</code>格式页面的例子：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;servers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;generation&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;upstream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;backend&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;106.187.48.116:80&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;up&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;rise&quot;</span><span class="punctuation">:</span> <span class="number">58</span><span class="punctuation">,</span> <span class="attr">&quot;fall&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>状态测试</strong></p><img src="image-20240204104125996.png" alt="image-20240204104125996" /><h2 id="Nginx架构"><a href="#Nginx架构" class="headerlink" title="Nginx架构"></a>Nginx架构</h2><h3 id="进程结构"><a href="#进程结构" class="headerlink" title="进程结构"></a>进程结构</h3><p>多进程结构Nginx的进程模型图：</p><img src="image-20240119081335618.png" alt="image-20240119081335618" /><p>多进程中Nginx进程架构如上图所示，会有一个父进程（Master Process），它会有很多子进程（Child Processes）。</p><ol><li><code>Master Process</code>用来管理子进程，其本身并不真正处理用户请求。<ul><li>某个子进程宕掉，它会向<code>Master</code>进程发送一条消息，表明自己不可用了，此时<code>Master</code>进程会新起一个子进程。</li><li>某个配置文件被修改后<code>Master</code>进程会去通知<code>work</code>进程获取新的配置信息，也就是我们所说的热部署。</li></ul></li><li>子进程间通过共享内存的方式进行通信。</li></ol><h3 id="配置文件重载原理"><a href="#配置文件重载原理" class="headerlink" title="配置文件重载原理"></a>配置文件重载原理</h3><p><code>reload</code>重载配置文件的流程：</p><ol><li>向<code>master</code>进程发送<code>HUP</code>信号（<code>reload</code>命令）；</li><li><code>master</code>进程检查配置语法是否正确；</li><li><code>master</code>进程打开监听端口；</li><li><code>master</code>进程使用新的配置文件启动新的<code>worker</code>子进程；</li><li><code>master</code>进程向老的<code>worker</code>子进程发送<code>QUIT</code>信号；</li><li>老的<code>worker</code>进程关闭监听句柄，处理完当前连接后关闭进程；</li><li>整个过程<code>Nginx</code>始终处于平稳运行中，实现了平滑升级，用户无感知。</li></ol><h3 id="Nginx模块化管理机制"><a href="#Nginx模块化管理机制" class="headerlink" title="Nginx模块化管理机制"></a>Nginx模块化管理机制</h3><p>Nginx内部结构是由核心部分和一系列的功能模块所组成，这样划分是为了使得每个模块的功能相对简单，便于开发，同时也便于对系统进行功能扩展。Nginx的模块是互相独立的，低耦合高内聚。</p><img src="image-20240119082950052.png" alt="image-20240119082950052" />]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页布局方式</title>
      <link href="/2024/01/28/%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/"/>
      <url>/2024/01/28/%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="弹性盒子-flex"><a href="#弹性盒子-flex" class="headerlink" title="弹性盒子 - flex"></a>弹性盒子 - flex</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-us&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flexbox 0 — starting code<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-family</span>: sans-serif;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">header</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: purple;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">article</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: aqua;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sample flexbox example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>First article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday</span><br><span class="line">                    carry vinyl typewriter. Tacos PBR&amp;B pork belly, everyday carry ennui pickled sriracha normcore</span><br><span class="line">                    hashtag polaroid single-origin coffee cold-pressed. PBR&amp;B tattooed trust fund twee, leggings salvia</span><br><span class="line">                    iPhone photo booth health goth gastropub hammock.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Second article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday</span><br><span class="line">                    carry vinyl typewriter. Tacos PBR&amp;B pork belly, everyday carry ennui pickled sriracha normcore</span><br><span class="line">                    hashtag polaroid single-origin coffee cold-pressed. PBR&amp;B tattooed trust fund twee, leggings salvia</span><br><span class="line">                    iPhone photo booth health goth gastropub hammock.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Third article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday</span><br><span class="line">                    carry vinyl typewriter. Tacos PBR&amp;B pork belly, everyday carry ennui pickled sriracha normcore</span><br><span class="line">                    hashtag polaroid single-origin coffee cold-pressed. PBR&amp;B tattooed trust fund twee, leggings salvia</span><br><span class="line">                    iPhone photo booth health goth gastropub hammock.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="image-20230920102018625.png" alt="image-20230920102018625" style="zoom:67%;" /><p>可以看到这个页面有一个含有顶级标题的&lt;header&gt;元素，和一个包含三个&lt;article&gt;的&lt;section&gt;，我们将使用这些来创建一个三列布局。</p><h3 id="指定元素的布局为flex"><a href="#指定元素的布局为flex" class="headerlink" title="指定元素的布局为flex"></a>指定元素的布局为flex</h3><p>首先，我们需要选择将哪些元素设置为弹性盒子，并将这些元素父元素的<code>display属性</code>设置为<code>flex</code>。在本例中，我们想要设置&lt;article&gt;元素，因此我们给&lt;section&gt;元素（变成了flex容器）设置display属性：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920102053604.png" alt="image-20230920102053604" style="zoom:67%;" /><h3 id="flex模型说明"><a href="#flex模型说明" class="headerlink" title="flex模型说明"></a>flex模型说明</h3><p>当元素表现为flex框时，它们沿着两个轴来布局：</p><img src="image-20240128183805758.png" alt="image-20240128183805758" /><ul><li>主轴（main axis）是沿着flex元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）。该轴的开始和结束被称为main start和main end。</li><li>交叉轴（cross axis）是垂直于flex元素放置方向的轴。该轴的开始和结束被称为cross start和cross end。</li><li>设置了<code>display: flex</code>的父元素被称之为<code>flex容器（flex container）</code>（在本例中是&lt;section&gt;）。</li><li>在flex容器中表现为弹性盒子的元素被称之为<code>flex项（flex item）</code>（本例中是&lt;article&gt;元素）。</li></ul><h3 id="行还是列？"><a href="#行还是列？" class="headerlink" title="行还是列？"></a>行还是列？</h3><p>弹性盒子提供了<code>flex-direction</code>这样一个属性，它可以指定主轴的方向，它默认值为<code>row</code>。</p><p>尝试将以下声明添加到&lt;section&gt;元素的css规则中：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: column;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920102121214.png" alt="image-20230920102121214" style="zoom:67%;" /><blockquote><p>注意：可以使用<code>row-reverse</code>和<code>column-reverse</code>反向排列flex项。例如将以下声明添加到&lt;section&gt;元素的css规则中：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row-reverse;</span><br></pre></td></tr></table></figure><img src="image-20230920102141289.png" alt="image-20230920102141289" style="zoom:67%;" /></blockquote><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>当我们在布局中使用定宽的时候，可能会出现问题，即处于容器中的flex项溢出，破坏布局，例如：</p><img src="image-20230920101028238.png" alt="image-20230920101028238" style="zoom:67%;" /><p>在这里我们可以看到flex项确实超出了它们的容器。解决此问题的一种方法是将以下声明添加到&lt;section&gt;元素的css规则中：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br></pre></td></tr></table></figure><p>同时把以下声明添加到&lt;article&gt;元素的css规则中：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: <span class="number">200px</span>;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920101048614.png" alt="image-20230920101048614" style="zoom:67%;" /><p>我们现在有多个行，每行都尽可能多的放flex项，任何溢出都会移动到下一行。</p><p>在article上设置的<code>flex：200px</code>声明意味着每个flex项宽至少为200px。</p><p>此时我们可以看到，最后一行上的最后几个flex项每个都变得更宽，以便把整个行填满。</p><blockquote><p>flex-flow缩写：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 缩写前 */</span></span><br><span class="line"><span class="attribute">flex-direction</span>: row;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 缩写后 */</span></span><br><span class="line"><span class="attribute">flex-flow</span>: row wrap;</span><br></pre></td></tr></table></figure></blockquote><h3 id="flex项的动态尺寸"><a href="#flex项的动态尺寸" class="headerlink" title="flex项的动态尺寸"></a>flex项的动态尺寸</h3><p>接下来让我们通过下面的例子来看看该如何控制flex项占用空间的比例。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-us&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flexbox 0 — starting code<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-family</span>: sans-serif;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">header</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: purple;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">article</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: aqua;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sample flexbox example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>First article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday</span><br><span class="line">                    carry vinyl typewriter. Tacos PBR&amp;B pork belly, everyday carry ennui pickled sriracha normcore</span><br><span class="line">                    hashtag polaroid single-origin coffee cold-pressed. PBR&amp;B tattooed trust fund twee, leggings salvia</span><br><span class="line">                    iPhone photo booth health goth gastropub hammock.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Second article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday</span><br><span class="line">                    carry vinyl typewriter. Tacos PBR&amp;B pork belly, everyday carry ennui pickled sriracha normcore</span><br><span class="line">                    hashtag polaroid single-origin coffee cold-pressed. PBR&amp;B tattooed trust fund twee, leggings salvia</span><br><span class="line">                    iPhone photo booth health goth gastropub hammock.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Third article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday</span><br><span class="line">                    carry vinyl typewriter. Tacos PBR&amp;B pork belly, everyday carry ennui pickled sriracha normcore</span><br><span class="line">                    hashtag polaroid single-origin coffee cold-pressed. PBR&amp;B tattooed trust fund twee, leggings salvia</span><br><span class="line">                    iPhone photo booth health goth gastropub hammock.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="image-20230920101956080.png" alt="image-20230920101956080" style="zoom:67%;" /><p>第一步，将以下声明添加到&lt;article&gt;元素的css规则中：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>此时页面效果未发生变化。</p></blockquote><p>这是一个无单位的比例值，表示每个flex项沿主轴的可用空间大小。本例中，我们设置&lt;article&gt;元素的flex值为1，这表示每个元素占用空间都是相等的，占用的空间是在设置padding和margin之后剩余的空间。因为它是一个比例，这意味着将每个flex项设置为100或1时的效果是完全一样的。</p><p>第二步，新增规则：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920103912077.png" alt="image-20230920103912077" style="zoom:67%;" /><p>我们可以看出现在总共有四个比例单位，前两个flex项各占一个，第三个flex项占用两个。</p><p>我们还可以指定flex项的最小值。尝试修改现有的article规则：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920104921764.png" alt="image-20230920104921764" style="zoom:67%;" /><p>这表示每个flex项将首先给出200px的可用空间，然后剩余的可用空间将根据分配的比例共享。</p><h3 id="水平和垂直对齐"><a href="#水平和垂直对齐" class="headerlink" title="水平和垂直对齐"></a>水平和垂直对齐</h3><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-us&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flexbox align 0 — starting code<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-family</span>: sans-serif;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">max-width</span>: <span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>Smile<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>Laugh<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>Wink<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>Shrug<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>Blush<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="image-20230920105845047.png" alt="image-20230920105845047" style="zoom:67%;" /><p>新增规则：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920110000584.png" alt="image-20230920110000584" style="zoom:67%;" /><p>说明：</p><ol><li><p><code>align-items</code>属性控制flex项在交叉轴上的位置。</p><ul><li>stretch：默认值，flex项沿交叉轴方向拉伸以填充父容器。如果父容器在交叉轴方向上没有固定宽度（即高度），则所有flex项将变得与最长的flex项一样长（即高度保持一致），这就是默认情况下列高度相同的原因。</li><li>flex-start：flex项保持其原有的高度，沿交叉轴顶部对齐</li><li>flex-end：flex项保持其原有的高度，沿交叉轴底部对齐。</li><li>center：flex项保持其原有的高度，沿交叉轴居中对齐。</li></ul></li><li><p><code>justify-content</code>属性控制flex项在主轴上的位置。</p><ul><li>flex-start：默认值，flex项左对齐</li><li>flex-end：flex项右对齐。</li><li>center：flex项居中。</li><li>space-evenly：flex项沿着主轴均匀分布</li><li>space-around：flex项沿着主轴均匀分布，但两端保留一定空间。</li><li>space-between：flex项沿着主轴均匀分布，但两端不保留空间。</li></ul></li><li><p>使用<code>align-self</code>属性单独改变flex项在交叉轴上的位置，属性值同<code>align-items</code>。示例：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920113909472.png" alt="image-20230920113909472" style="zoom:67%;" /></li></ol><h3 id="flex项排序"><a href="#flex项排序" class="headerlink" title="flex项排序"></a>flex项排序</h3><p>改变flex项的布局顺序，但不会影响到源顺序（即dom树中元素的顺序）。示例：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920114431727.png" alt="image-20230920114431727" style="zoom:67%;" /><p>说明：</p><ul><li>所有flex项默认的order值为0，且order值只能为整数。</li><li>order值越大越靠后，相同order值按源顺序显示。</li></ul><h2 id="网格布局-grid"><a href="#网格布局-grid" class="headerlink" title="网格布局 - grid"></a>网格布局 - grid</h2><p>css网格是一个用于web的二维布局系统。利用网格，我们可以把内容按照行与列的格式进行排版。</p><p>一个网格通常具有许多的行（row）与列（column），而行与行、列与列之间的间隙被称为沟槽（gutter）。</p><h3 id="定义一个网格"><a href="#定义一个网格" class="headerlink" title="定义一个网格"></a>定义一个网格</h3><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-us&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS Grid starting point<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">max-width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">2em</span> auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font</span>: .<span class="number">9em</span>/<span class="number">1.2</span> Arial, Helvetica, sans-serif;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple grid example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Six<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Seven<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="image-20230920143533824.png" alt="image-20230920143533824" /><p>首先，我们通过把容器的<code>display属性</code>设置为<code>grid</code>，以此来定义一个网格。与弹性盒子一样，将父容器改为网格布局后，它的直接子项会变为网格项。新增规则：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与弹性盒子不同的是，在定义网格后，网页并不会马上发生变化，因为<code>display: grid</code>的声明只创建了一个只有一列的网格，所以子项还是会像正常布局流那样，自上而下、一个接一个的排布。</p><p>为了让我们的容器看起来更像一个网格，我们要给刚定义的网格加一些列，此时我们添加三个宽度为200px的列。当然，这里可以用任何长度单位，包括百分比。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">200px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920144723587.png" alt="image-20230920144723587" /><h3 id="使用fr单位的灵活网格"><a href="#使用fr单位的灵活网格" class="headerlink" title="使用fr单位的灵活网格"></a>使用fr单位的灵活网格</h3><p>除了长度和百分比，我们也可以用<code>fr</code>这个单位来灵活地定义网格的行与列的大小，这个单位代表网格容器中可用空间的一份。</p><p>使用下面的规则来修改网格，创建3个宽度为1fr的列：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="image-20230920144658440.png" alt="image-20230920144658440" /><blockquote><p>注意：fr可以与一般的长度单位混合使用，例如设置<code>grid-template-columns: 300px 2fr 1fr</code>，那么第一列宽度为300px，剩下的两列会根据剩余的可用空间按比例分配。</p></blockquote><h3 id="网格间隙"><a href="#网格间隙" class="headerlink" title="网格间隙"></a>网格间隙</h3><p>使用<code>grid-column-gap</code>属性来定义列间隙，使用<code>grid-row-gap</code>来定义行间隙，使用<code>grid-gap</code>可以同时设定两者。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="image-20230920145322494.png" alt="image-20230920145322494" /><blockquote><p>注意：间隙距离可以用任何长度单位包括百分比来表示，但不能使用<code>fr</code>单位。</p><p>注意：<code>gap</code>属性曾经有一个<code>grid-</code>前缀，不过后来的标准进行了修改，目的是让它们能够在不同的布局方法中都能起作用。尽管现在这个前缀不会影响语义，但为了代码的健壮性，我们可以把两个属性都写上。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="重复构建轨道组"><a href="#重复构建轨道组" class="headerlink" title="重复构建轨道组"></a>重复构建轨道组</h3><p>我们可以使用<code>repeat</code>来重复构建具有某些宽度配置的某些列。举个例子，如果要创建多个等宽轨道，可以用下面的方法。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">    <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和之前一样，我们仍然得到了3个1fr的列。第一个传入repeat函数的值<code>3</code>表明了后续列宽的配置要重复多少次，而第二个值<code>1fr</code>表示需要重复的构建配置，这个配置可以具有多个长度设定，例如repeat(2, 2fr 1fr)，相当于填入了 2fr 1fr 2fr 1fr。</p><h3 id="显式网格与隐式网格"><a href="#显式网格与隐式网格" class="headerlink" title="显式网格与隐式网格"></a>显式网格与隐式网格</h3><p>通过设置css属性<code>display: grid</code>可以定义一个css网格，接着可以使用<code>grid-template-rows</code>和<code>grid-template-columns</code>属性定义网格的行和列。使用这些属性定义的网格被称为显式网格 (explicit grid)。</p><p>如果开发者将内容放置在显式网格之外，或者依赖自动布局的话，将需要创建额外的轨道来包含显示网格之外的内容。当内容添加到了已定义的轨道之外时，隐式网格 (implicit grid) 会被自动创建。</p><p>下面的例子创建了一个有两行三列的显式网格<em>。</em>由于超过显式网格可容纳的六个条目，此网格中的第三行将是一个隐式网格行轨道。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-us&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS Grid starting point<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">grid-gap</span>: <span class="number">10px</span></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.wrapper</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Six<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Seven<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Eight<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="image-20230920165914826.png" alt="image-20230920165914826" /><blockquote><p>在容器div上用row和column定义的网格总数，等于行数乘以列数，例如一个容器div定义了2行 * 3列 &#x3D; 6个网格，这6个就是显式网格，但是假如里面有8个子div，多出来那2个就叫做隐式网格。</p></blockquote><p>隐式网格中生成的行&#x2F;列大小参数默认是<code>auto</code>，大小会根据放入的内容自动调整，当然也可以使用<code>grid-auto-rows</code>和<code>grid-auto-columns</code>属性手动设定隐式网格轨道的大小。</p><p>修改css规则：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-auto-rows</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-gap</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920165947789.png" alt="image-20230920165947789" /><h3 id="minmax-函数"><a href="#minmax-函数" class="headerlink" title="minmax()函数"></a>minmax()函数</h3><p>100像素高的轨道有时可能会不够用，因为时常会有比100像素高的内容加进去。所以，我们可以将其设定为至少100像素，并且能够跟随内容来自动拓展尺寸，从而保证能容纳所有内容。</p><p><code>minmax()</code>函数为一个行&#x2F;列的尺寸设置了取值范围，例如设定minmax(100px, auto)，那么尺寸至少为100像素，并且如果内容尺寸大于100像素则会根据内容自动调整。在这里试一下把<code>grid-auto-rows</code>属性设置为minmax()函数。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">100px</span>, auto);</span><br><span class="line">    <span class="attribute">grid-gap</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动使用多列填充"><a href="#自动使用多列填充" class="headerlink" title="自动使用多列填充"></a>自动使用多列填充</h3><p>某些情况下，我们需要让网格自动创建很多列来填满整个容器。通过设置grid-template-columns属性，我们可以实现这个效果，不过这一次我们会用到repeat()函数中的一个关键字<code>auto-fill</code>来替代确定的重复次数，而函数的第二个参数，我们使用minmax()函数来设定一个行&#x2F;列的最小值，以及最大值1fr，css规则如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="built_in">minmax</span>(<span class="number">200px</span>, <span class="number">1</span>fr));</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">100px</span>, auto);</span><br><span class="line">    <span class="attribute">grid-gap</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="image-20230920170247415.png" alt="image-20230920170247415" /><p>我们可以看到形成了一个包含了许多至少200像素宽的列的网格，来将容器填满。随着容器宽度的改变，网格会自动根据容器宽度进行调整，每一列的宽度总是大于200像素，并且容器总会被列填满。</p><h3 id="基于线的元素放置"><a href="#基于线的元素放置" class="headerlink" title="基于线的元素放置"></a>基于线的元素放置</h3><p>在定义完了网格之后，我们要把元素放入网格中。我们的网格有许多分隔线，第一条线的起始点与文档书写模式相关。在英文中，第一条列分隔线（即网格边缘线）在网格的最左边，而第一条行分隔线在网格的最上面。而对于阿拉伯语，第一条列分隔线在网格的最右边，因为阿拉伯文是从右往左书写的。</p><p>我们根据这些分隔线来放置元素，通过以下属性来指定从哪条线开始到哪条线结束。</p><ul><li>grid-column-start</li><li>grid-column-end</li><li>grid-row-start</li><li>grid-row-end</li></ul><p>这些属性的值均为分隔线序号，我们也可以用以下缩写形式来同时指定开始与结束的线。</p><ul><li>grid-column</li><li>grid-row</li></ul><blockquote><p>注意：开始与结束的线的序号要使用<code>/</code>符号分开。</p></blockquote><p>下方示例定义了一个网格以及一篇简单的文章位于网格之外，我们可以看到元素已经被自动放置到了网格中。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-us&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS Grid - line-based placement starting point<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">max-width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">2em</span> auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font</span>: <span class="number">0.9em</span>/<span class="number">1.2</span> Arial, Helvetica, sans-serif;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">3</span>fr;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">gap</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">header</span>,</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">aside</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span>&gt;</span>This is my lovely blog<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My article<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras</span><br><span class="line">                    porttitor imperdiet nunc, at ultricies tellus laoreet sit amet. Sed</span><br><span class="line">                    auctor cursus massa at porta. Integer ligula ipsum, tristique sit amet</span><br><span class="line">                    orci vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac</span><br><span class="line">                    ornare ex malesuada et. In vitae convallis lacus. Aliquam erat</span><br><span class="line">                    volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin</span><br><span class="line">                    eros pharetra congue. Duis ornare egestas augue ut luctus. Proin</span><br><span class="line">                    blandit quam nec lacus varius commodo et a urna. Ut id ornare felis,</span><br><span class="line">                    eget fermentum sapien.</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    Nam vulputate diam nec tempor bibendum. Donec luctus augue eget</span><br><span class="line">                    malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,</span><br><span class="line">                    facilisis sed est. Nam id risus quis ante semper consectetur eget</span><br><span class="line">                    aliquam lorem. Vivamus tristique elit dolor, sed pretium metus</span><br><span class="line">                    suscipit vel. Mauris ultricies lectus sed lobortis finibus. Vivamus eu</span><br><span class="line">                    urna eget velit cursus viverra quis vestibulum sem. Aliquam tincidunt</span><br><span class="line">                    eget purus in interdum. Cum sociis natoque penatibus et magnis dis</span><br><span class="line">                    parturient montes, nascetur ridiculus mus.</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Other things<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    Nam vulputate diam nec tempor bibendum. Donec luctus augue eget</span><br><span class="line">                    malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,</span><br><span class="line">                    facilisis sed est.</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">footer</span>&gt;</span>Contact me@mysite.com<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="image-20230920155146837.png" alt="image-20230920155146837" /><p>接下来，我们用定义网格线的方法将所有元素放置到网格中。添加规则：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920155518297.png" alt="image-20230920155518297" /><blockquote><p>注意：可以用<code>-1</code>来定位到最后一条列分隔线或是行分隔线，并且可以用负数来指定倒数的某一条分隔线。但是这只能用于显式网格，对于隐式网格-1不一定能定位到最后一条分隔线。</p></blockquote><h3 id="使用grid-template-areas属性放置元素"><a href="#使用grid-template-areas属性放置元素" class="headerlink" title="使用grid-template-areas属性放置元素"></a>使用grid-template-areas属性放置元素</h3><p>另一种往网格放元素的方式是使用<code>grid-template-areas</code>属性，此时需要命名一些元素并在该属性中使用这些名字作为一个区域。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-us&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS Grid - line-based placement starting point<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">max-width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">2em</span> auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font</span>: <span class="number">0.9em</span>/<span class="number">1.2</span> Arial, Helvetica, sans-serif;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">3</span>fr;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">gap</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">header</span>,</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">aside</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span>&gt;</span>This is my lovely blog<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My article<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras</span><br><span class="line">                    porttitor imperdiet nunc, at ultricies tellus laoreet sit amet. Sed</span><br><span class="line">                    auctor cursus massa at porta. Integer ligula ipsum, tristique sit amet</span><br><span class="line">                    orci vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac</span><br><span class="line">                    ornare ex malesuada et. In vitae convallis lacus. Aliquam erat</span><br><span class="line">                    volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin</span><br><span class="line">                    eros pharetra congue. Duis ornare egestas augue ut luctus. Proin</span><br><span class="line">                    blandit quam nec lacus varius commodo et a urna. Ut id ornare felis,</span><br><span class="line">                    eget fermentum sapien.</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    Nam vulputate diam nec tempor bibendum. Donec luctus augue eget</span><br><span class="line">                    malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,</span><br><span class="line">                    facilisis sed est. Nam id risus quis ante semper consectetur eget</span><br><span class="line">                    aliquam lorem. Vivamus tristique elit dolor, sed pretium metus</span><br><span class="line">                    suscipit vel. Mauris ultricies lectus sed lobortis finibus. Vivamus eu</span><br><span class="line">                    urna eget velit cursus viverra quis vestibulum sem. Aliquam tincidunt</span><br><span class="line">                    eget purus in interdum. Cum sociis natoque penatibus et magnis dis</span><br><span class="line">                    parturient montes, nascetur ridiculus mus.</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Other things<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    Nam vulputate diam nec tempor bibendum. Donec luctus augue eget</span><br><span class="line">                    malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,</span><br><span class="line">                    facilisis sed est.</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">footer</span>&gt;</span>Contact me@mysite.com<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="image-20230920155146837.png" alt="image-20230920155146837" /><p>添加规则：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>:</span><br><span class="line">        <span class="string">&quot;header header&quot;</span></span><br><span class="line">        <span class="string">&quot;sidebar content&quot;</span></span><br><span class="line">        <span class="string">&quot;footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="image-20230920160749112.png" alt="image-20230920160749112" /><p><code>grid-template-areas</code>属性的使用规则如下：</p><ul><li>需要填满网格的每个格子，或是使用<code>.</code>符号，让一个格子留空；</li><li>对于某个横跨多个格子的元素，重复写上那个元素<code>grid-area</code>属性定义的区域名字；</li><li>所有名字只能出现在一个连续的区域，不能在不同的位置出现；</li><li>一个连续的区域必须是一个矩形。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS预处理器</title>
      <link href="/2024/01/28/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
      <url>/2024/01/28/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>CSS层叠样式表是一门标记语言，并不是编程语言，因此不可以自定义变量、不可以引用，即不具备任何语法支持，主要缺陷如下：</p><ol><li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器。</li><li>没有变量及合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li></ol><p>这就导致增加了工作量。为了解决该问题，可以使用<code>CSS预处理器</code>，其提供了CSS缺失的样式复用机制，减少冗余代码，提高样式代码的可维护性及前端在样式上开发的效率。</p><p>CSS预处理器用一种专门的编程语言，用于进行Web页面样式设计，再通过编译器转换为正常的CSS文件，以供项目使用，常见的有<a href="https://www.sass.hk/">Sass</a>、<a href="https://less.bootcss.com/">Less</a>。</p><h2 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h2><p>Less（Leaner Style Sheets）是一门向后兼容的CSS扩展语言。因为Less和CSS非常像，因此很容易学习，而且Less仅对CSS语言增加了少许方便的扩展，这就是Less如此易学的原因之一。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>Less变量用于解决值的复用问题，假设我们有以下CSS代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>, <span class="selector-class">.link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#428bca</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.widget</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#428bca</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Less后：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@color-1:</span> <span class="number">#428bca</span>;</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.widget</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">@color-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h3><p>混合（mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。假设我们定义了一个类：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们希望在其它规则集中使用这些属性，我们只需像下面这样输入所需属性的类名即可：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">    <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时<code>.bordered</code>类所包含的属性就将同时出现在<code>#menu a</code>和<code>.post a</code>中，编译结果如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：也可以使用<code>#id</code>作为mixin使用。</p></blockquote><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>Less提供了使用嵌套（nesting）代替层叠或与层叠结合使用的能力。假设我们有以下CSS代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.navigation</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Less后：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="selector-class">.navigation</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.logo</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，使用Less书写的代码更加简洁，并且模仿了HTML的组织结构。</p><p>我们还可以使用此方法将伪选择器与嵌套一同使用。下面是一个经典的clearfix（清除浮动）技巧，重写为一个嵌套：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    zoom: 1;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">        <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>&amp;</code>说明：</p><ol><li><p>作为当前选择器的伪类或者伪元素</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作为内层选择器表示对父选择器的引用，这里要注意在写less嵌套时会有差异。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-tag">-title</span> &#123;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo-title</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的&amp;引用了<code>.demo</code>，<code>注意这里虽然是嵌套的写法但仅代表选择器的引用而不是css的嵌套关系</code>，和下面的代码有css层级的不同。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">    <span class="selector-class">.demo-title</span> &#123;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> <span class="selector-class">.demo-title</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明显可以看出上面&amp;的写法少一个<code>.demo</code>的层级，这样就需要注意css的优先级问题。如果要使上面的写法得到和下面一样的结果就需要增加一个&amp;的引用，即：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span> <span class="selector-tag">&amp;</span><span class="selector-tag">-title</span> &#123;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果如下所示，会增加一个.demo的层级</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> <span class="selector-class">.demo-title</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这说明在一个选择器中，&amp;可以重复出现多次，这样就可以多次引用父选择器而不必重复它的名字。例如：</p><ul><li>&amp;&amp;表示.demo.demo</li><li>&amp; &amp;表示.demo .demo</li><li>&amp;, &amp;表示.demo, .demo</li></ul></li></ol></blockquote><h3 id="规则嵌套和冒泡"><a href="#规则嵌套和冒泡" class="headerlink" title="@规则嵌套和冒泡"></a>@规则嵌套和冒泡</h3><p>@规则（例如<code>@media</code>或<code>@supports</code>）可以与选择器以相同的方式进行嵌套。@规则会被放在前面，同一规则集中其它元素的相对顺序保持不变，这就叫做冒泡（bubbling）。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">        <span class="keyword">@media</span> (<span class="attribute">min-resolution</span>: <span class="number">192dpi</span>) &#123;</span><br><span class="line">            <span class="attribute">background-image</span>: url(<span class="string">/img/retina2x.png</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.component</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.component</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">min-resolution</span>: <span class="number">192dpi</span>) &#123;</span><br><span class="line">    <span class="selector-class">.component</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/img/retina2x.png</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.component</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>算术运算符<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>可以对任何数字、颜色或变量进行运算，且在加、减或比较之前会进行单位换算，计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px到cm或rad到%的转换。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有操作数被转换成相同的单位</span></span><br><span class="line"><span class="variable">@conversion-1:</span> <span class="number">5cm</span> + <span class="number">10mm</span>; <span class="comment">// 结果是6cm</span></span><br><span class="line"><span class="variable">@conversion-2:</span> <span class="number">2</span> - <span class="number">3cm</span> - <span class="number">5mm</span>; <span class="comment">// 结果是-1.5cm</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@base:</span> <span class="number">5%</span>;</span><br><span class="line"><span class="variable">@filler:</span> <span class="variable">@base</span> * <span class="number">2</span>; <span class="comment">// 结果是10%</span></span><br><span class="line"><span class="variable">@other:</span> <span class="variable">@base</span> + <span class="variable">@filler</span>; <span class="comment">// 结果是15%</span></span><br></pre></td></tr></table></figure><p>乘法和除法不作转换。因为这两种运算在大多数情况下都没有意义，一个长度乘以一个长度就得到一个区域，而CSS是不支持指定区域的。Less将按数字的原样进行操作，并将为计算结果指定明确的单位类型。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@base:</span> <span class="number">2cm</span> * <span class="number">3mm</span>; <span class="comment">// 结果是6cm</span></span><br></pre></td></tr></table></figure><p>我们还可以对颜色进行算术运算：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@color:</span> (<span class="number">#224488</span> / <span class="number">2</span>); <span class="comment">// 结果是#112244</span></span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#112244</span> + <span class="number">#111</span>; <span class="comment">// 结果是#223355</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@color:</span> <span class="number">#222</span> / <span class="number">2</span>; <span class="comment">// 结果是#222 / 2，而不是#111</span></span><br><span class="line"><span class="attribute">background-color</span>: (<span class="number">#FFFFFF</span> / <span class="number">16</span>); <span class="comment">// 结果是#101010</span></span><br></pre></td></tr></table></figure><p><code>calc()</code>特例：为了与CSS保持兼容，calc()并不对数学表达式进行计算，但是在嵌套函数中会计算变量和数学公式的值。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">50vh</span>/<span class="number">2</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> + (<span class="variable">@var</span> - <span class="number">20px</span>));  <span class="comment">// 结果是calc(50% + (25vh - 20px))</span></span><br></pre></td></tr></table></figure><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>转义（Escaping）允许使用任意字符串作为属性或变量值，任何<code>~&quot;anything&quot;</code>或<code>~&#39;anything&#39;</code>形式的内容都将按原样输出。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@min768:</span> <span class="string">~&quot;(min-width: 768px)&quot;</span>;</span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="keyword">@media</span> <span class="variable">@min768</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.element</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，从Less 3.5开始，可以简写为：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@min768:</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>);</span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="keyword">@media</span> <span class="variable">@min768</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>Less内置了多种函数用于转换颜色、处理字符串、算术运算等，这些函数在<a href="https://less.bootcss.com/functions/">Less函数手册</a>中有详细介绍。</p><p>函数的用法非常简单，下面这个例子将介绍如何利用percentage函数将0.5转换为50%，将颜色饱和度增加5%，以及颜色亮度降低25%并且色相值增加8：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@base:</span> <span class="number">#f04615</span>;</span><br><span class="line"><span class="variable">@width:</span> <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">percentage</span>(<span class="variable">@width</span>); <span class="comment">// 结果是50%</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">saturate</span>(<span class="variable">@base</span>, <span class="number">5%</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">spin</span>(<span class="built_in">lighten</span>(<span class="variable">@base</span>, <span class="number">25%</span>), <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命名空间和访问符"><a href="#命名空间和访问符" class="headerlink" title="命名空间和访问符"></a>命名空间和访问符</h3><p>有时，出于组织结构或仅仅是为了提供一些封装的目的，我们希望对混合进行分组，可以使用Less更直观地实现这一需求。假设我们希望将一些混合和变量置于<code>#bundle</code>之下，为了以后方便重用或分发：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#bundle</span>() &#123;</span><br><span class="line">    <span class="selector-class">.button</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">        <span class="attribute">background-color</span>: grey;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: white;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，如果我们希望把<code>.button</code>类混合到<code>#header a</code>中，我们可以这样做：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="selector-id">#bundle</span><span class="selector-class">.button</span>();  <span class="comment">// 还可以书写为#bundle &gt; .button形式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果不希望样式出现在编译的CSS中，例如<code>#bundle</code>，可以将<code>()</code>附加到命名空间后面，例如<code>#bundle()</code>，这样该样式将不再编译。</p><p>注意：不要和<code>CSS @namespace</code>或<code>namespace selectors</code>混淆。</p></blockquote><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>从Less 3.5版本开始，我们可以将混合和规则集作为一组值的映射（map）使用。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#colors</span>() &#123;</span><br><span class="line">    primary: blue;</span><br><span class="line">    secondary: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: #colors[primary];</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid #colors[secondary];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>Less中的作用域与CSS中的作用域非常类似，首先在本地查找变量和混合，如果找不到，则从父级作用域继承。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">    <span class="variable">@var:</span> white;</span><br><span class="line">    <span class="selector-id">#header</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#page</span> <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与CSS自定义属性一样，混合和变量的定义不必在引用之前。因此，下面的Less代码示例和上面的代码示例是相同的：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">    <span class="selector-id">#header</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">@var:</span> white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>我们可以导入一个<code>.less</code>文件，导入后该文件中的所有变量就可以直接使用。如果导入文件的扩展名是<code>.less</code>，则可以省略扩展名：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;library&quot;</span>; <span class="comment">// library.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;typo.css&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="Less-js工具"><a href="#Less-js工具" class="headerlink" title="Less.js工具"></a>Less.js工具</h3><p>Less.js工具：利用JavaScript开发的用于将Less样式转换成CSS样式的工具。</p><p><strong>安装</strong></p><p>使用npm安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install less -g</span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">npm install less@2.7.1 -g</span><br><span class="line"><span class="comment"># 在项目中安装</span></span><br><span class="line">npm i less --save-dev</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><p>示例：将bootstrap.less编译为bootstrap.css</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lessc bootstrap.less bootstrap.css</span><br></pre></td></tr></table></figure><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><p>Sass是一款强化css的辅助工具，它在css语法的基础上增加了变量、嵌套、混合、导入等高级功能，这些拓展令css更加强大。</p><p>Sass有两种语法格式。首先是Scss，这种格式仅在css3语法的基础上进行拓展，所有css3语法在Scss中都是通用的，同时加入Sass的特色功能，这种格式以<code>.scss</code>作为拓展名。另一种也是最早的Sass语法格式，被称为缩进格式，通常简称 “Sass”，是一种简化格式。它使用 “缩进” 代替 “花括号” 表示属性属于某个选择器，用 “换行” 代替 “分号” 分隔属性。缩进格式也可以使用Sass的全部功能，只是与Scss相比个别地方采取了不同的表达方式，这种格式以<code>.sass</code>作为拓展名。</p><p>完整文档：<a href="https://www.sass.hk/docs/">https://www.sass.hk/docs/</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>安装Ruby</strong></p><p>Sass基于<code>Ruby</code>语言开发而成，因此安装Sass前需要安装<a href="http://rubyinstaller.org/downloads">Ruby</a>，安装过程中请注意勾选<code>Add Ruby executables to your PATH</code>添加到系统环境变量。</p><img src="image-20231007181814027.png" alt="image-20231007181814027" /><p>确认是否安装成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\liuliangcong&gt; ruby -v</span><br><span class="line">ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x64-mingw-ucrt]</span><br></pre></td></tr></table></figure><blockquote><p>Sass安装参考文档：<a href="https://www.sass.hk/install/">https://www.sass.hk/install/</a></p><p>因为国内网络的问题导致<code>gem</code>源间歇性中断，因此我们需要更换gem源。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 替换原gem源</span><br><span class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br><span class="line"></span><br><span class="line">// 测试是否替换成功</span><br><span class="line">PS C:\Users\liuliangcong&gt; gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure></blockquote><p><strong>安装Sass</strong></p><p>Ruby自带一个叫做<code>RubyGems</code>的系统，用来安装基于Ruby的软件。我们可以使用这个系统来轻松地安装<code>Sass</code>和<code>Compass</code>。要安装最新版本的Sass和Compass，可执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install sass</span><br><span class="line">gem install compass</span><br></pre></td></tr></table></figure><p>确认是否安装成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\liuliangcong&gt; sass -v</span><br><span class="line">Ruby Sass 3.7.4</span><br><span class="line"></span><br><span class="line">PS C:\Users\liuliangcong&gt; compass -v</span><br><span class="line">Compass 1.0.3 (Polaris)</span><br><span class="line">Copyright (c) 2008-2023 Chris Eppstein</span><br><span class="line">Released under the MIT License.</span><br><span class="line">Compass is charityware.</span><br><span class="line">Please make a tax deductable donation <span class="keyword">for</span> a worthy cause: http://umdf.org/compass</span><br></pre></td></tr></table></figure><blockquote><p>Sass命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 更新sass</span><br><span class="line">gem update sass</span><br><span class="line"></span><br><span class="line">// 查看sass版本</span><br><span class="line">sass -v</span><br><span class="line"></span><br><span class="line">// 查看sass帮助</span><br><span class="line">sass -h</span><br></pre></td></tr></table></figure></blockquote><h3 id="编译Sass"><a href="#编译Sass" class="headerlink" title="编译Sass"></a>编译Sass</h3><p>Sass编译有很多种方式，如命令行编译模式、sublime插件<code>SASS-Build</code>、编译软件<code>koala</code>、前端自动化软件<code>codekit</code>、Grunt打造前端自动化工作流<code>grunt-sass</code>、Gulp打造前端自动化工作流<code>gulp-ruby-sass</code>等。</p><p><strong>命令行编译</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 单文件转换命令</span><br><span class="line">sass input.scss output.css</span><br><span class="line"></span><br><span class="line">// 单文件监听命令，注意中间使用的是“:”</span><br><span class="line">sass --watch input.scss:output.css</span><br></pre></td></tr></table></figure><p><strong>命令行编译配置选项</strong></p><p>命令行编译Sass有配置选项，如编译过后css排版、生成调试map、开启debug信息等，可通过使用命令<code>sass -v</code>查看详细。我们一般常用两种：<code>--style</code>、<code>--sourcemap</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 编译格式</span><br><span class="line">sass --watch input.scss:output.css --style compact</span><br><span class="line"></span><br><span class="line">// 编译添加调试map</span><br><span class="line">sass --watch input.scss:output.css --sourcemap</span><br><span class="line"></span><br><span class="line">// 选择编译格式并添加调试map</span><br><span class="line">sass --watch input.scss:output.css --style expanded --sourcemap</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>--style</code>表示解析后的css是什么排版格式，Sass内置有四种编译排版格式：<code>nested</code>、<code>expanded</code>、<code>compact</code>、<code>compressed</code>。</li><li><code>--sourcemap</code>表示开启sourcemap调试，开启sourcemap调试后，会生成一个后缀名为<code>.css.map</code>的文件，<code>默认开启sourcemap调试</code>。</li></ul></blockquote><p><strong>四种编译排版格式</strong></p><ul><li><p>未编译样式</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    &amp;-title &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nested编译排版格式：<code>sass style.scss:style.css --style nested</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>; &#125;</span><br><span class="line">  <span class="selector-class">.box-title</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*# sourceMappingURL=style.css.map */</span></span><br></pre></td></tr></table></figure></li><li><p>expanded编译排版格式：<code>sass style.scss:style.css --style expanded</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-title</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*# sourceMappingURL=style.css.map */</span></span><br></pre></td></tr></table></figure></li><li><p>compact编译排版格式：<code>sass style.scss:style.css --style compact</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123; <span class="attribute">width</span>: <span class="number">300px</span>; <span class="attribute">height</span>: <span class="number">400px</span>; &#125;</span><br><span class="line"><span class="selector-class">.box-title</span> &#123; <span class="attribute">height</span>: <span class="number">30px</span>; <span class="attribute">line-height</span>: <span class="number">30px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*# sourceMappingURL=style.css.map */</span></span><br></pre></td></tr></table></figure></li><li><p>compressed编译排版格式：<code>sass style.scss:style.css --style compressed</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">300px</span>;<span class="attribute">height</span>:<span class="number">400px</span>&#125;<span class="selector-class">.box-title</span>&#123;<span class="attribute">height</span>:<span class="number">30px</span>;<span class="attribute">line-height</span>:<span class="number">30px</span>&#125;</span><br><span class="line"><span class="comment">/*# sourceMappingURL=style.css.map */</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><p>我们可以把反复使用的css属性值定义成变量，然后通过变量名来引用它们，而无需重复书写这一属性值。</p><p>Sass使用<code>$</code>符号来标识变量，比如<code>$highlight-color</code>。</p><p><strong>变量声明</strong></p><p>示例：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$highlight-color</span>: <span class="number">#F90</span>;</span><br></pre></td></tr></table></figure><p>任何可以用作css属性值的赋值都可以作为Sass的变量值，甚至是以空格分割的多个属性值，如<code>$basic-border: 1px solid black;</code>，或以逗号分割的多个属性值，如<code>$plain-font: &quot;Times New Roman&quot;,Times,serif;</code>。</p><p>与css属性不同的是，变量可以在css规则块定义之外存在。相对的，当变量定义在css规则块内，那么该变量只能在此规则块内使用，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$nav-color</span>: <span class="number">#F90</span>;</span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="variable">$width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$nav-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">nav</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">color</span>: <span class="number">#F90</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>变量引用</strong></p><p>示例：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$highlight-color</span>: <span class="number">#F90</span>;</span><br><span class="line"><span class="selector-class">.selected</span> &#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$highlight-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在声明变量时，变量值也可以引用其他变量，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$highlight-color</span>: <span class="number">#F90</span>;</span><br><span class="line"><span class="variable">$highlight-border</span>: <span class="number">1px</span> solid <span class="variable">$highlight-color</span>;</span><br><span class="line"><span class="selector-class">.selected</span> &#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="variable">$highlight-border</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-class">.selected</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#F90</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>变量命名</strong></p><p>Sass的变量名可以与css中的属性名和选择器名称相同，包括中划线和下划线，例如：<code>$highlight-color</code>、<code>$highlight_color</code>。</p><p>用中划线声明的变量可以使用下划线的方式引用，反之亦然，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$link-color</span>: blue;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$link_color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在Sass的大多数地方，中划线命名的内容和下划线命名的内容是互通的，但是在Sass中<code>纯css部分</code>不互通，比如类名、ID或属性名。</p></blockquote><h3 id="嵌套css规则"><a href="#嵌套css规则" class="headerlink" title="嵌套css规则"></a>嵌套css规则</h3><p>css中重复写选择器是非常恼人的，例如：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">article</span> <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">article</span> <span class="selector-tag">p</span> &#123; <span class="attribute">margin-bottom</span>: <span class="number">1.4em</span> &#125;</span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">aside</span> &#123; <span class="attribute">background-color</span>: <span class="number">#EEE</span> &#125;</span><br></pre></td></tr></table></figure><p>像这种情况，Sass可以让我们只写一遍，且样式可读性更高。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="selector-tag">article</span> &#123;</span><br><span class="line">        <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123; <span class="attribute">margin-bottom</span>: <span class="number">1.4em</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">aside</span> &#123; <span class="attribute">background-color</span>: <span class="number">#EEE</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个给定的规则块，既可以像普通的CSS那样包含属性，又可以嵌套其他规则块。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="selector-tag">aside</span> &#123; <span class="attribute">background-color</span>: <span class="number">#eee</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>伪类</strong></p><p>对于伪类，例如：<code>:hover</code>，可以使用<code>&amp;</code>作为父选择器进行控制，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>特殊情况：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">aside</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line"> <span class="selector-tag">body</span><span class="selector-class">.ie</span> &amp; &#123; <span class="attribute">color</span>: green &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">aside</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.ie</span> <span class="selector-id">#content</span> <span class="selector-tag">aside</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>组合选择器</strong></p><p>组合选择器：相邻兄弟选择器（+）、子选择器（&gt;）、兄弟选择器（~），示例：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;</span><br><span class="line">    &gt; <span class="selector-tag">section</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span> &#125;</span><br><span class="line">    <span class="selector-tag">dl</span> &gt; &#123;</span><br><span class="line">        <span class="selector-tag">dt</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line">        <span class="selector-tag">dd</span> &#123; <span class="attribute">color</span>: <span class="number">#555</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">nav</span> + &amp; &#123; <span class="attribute">margin-top</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">article</span> ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span>; &#125;</span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">section</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span>; &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dt</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span>; &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dd</span> &#123; <span class="attribute">color</span>: <span class="number">#555</span>; &#125;</span><br><span class="line"><span class="selector-tag">nav</span> + <span class="selector-tag">article</span> &#123; <span class="attribute">margin-top</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>属性嵌套</strong></p><p>在Sass中，除了css选择器，属性也可以进行嵌套，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: &#123;</span><br><span class="line">        style: solid;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">nav</span> &#123; <span class="attribute">border-style</span>: solid; <span class="attribute">border-width</span>: <span class="number">1px</span>; <span class="attribute">border-color</span>: <span class="number">#ccc</span>; &#125;</span><br></pre></td></tr></table></figure><p>嵌套属性的规则：把属性名从中划线<code>-</code>的地方断开，在根属性后边添加一个冒号<code>:</code>，紧跟一个<code>&#123;...&#125;</code>块，把子属性部分写在这个大括号中。</p><blockquote><p>对于属性的缩写形式，甚至可以像下边这样来嵌套，指明例外规则：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#123;</span><br><span class="line">     <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">     <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">nav</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>; <span class="attribute">border-left</span>: <span class="number">0px</span>; <span class="attribute">border-right</span>: <span class="number">0px</span>; &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="导入Sass文件"><a href="#导入Sass文件" class="headerlink" title="导入Sass文件"></a>导入Sass文件</h3><p>css有一个不常用的特性，即<code>@import规则</code>，它允许在一个css文件中导入其他css文件，后果是只有执行到@import时，浏览器才会去下载其他css文件，这导致页面加载起来特别慢。</p><p>Sass也有一个@import规则，但不同的是，Sass的@import规则在生成css文件时就把相关文件导入进来。这意味着所有相关的样式被归纳到了同一个css文件中，而无需发起额外的下载请求。另外，所有在被导入文件中定义的变量和混合器均可在导入文件中使用。</p><p>使用Sass的@import规则并不需要指明被导入文件的全名，可以省略<code>.sass</code>或<code>.scss</code>文件后缀。</p><p>当把Sass样式分散到多个文件时，我们通常只想生成少数几个css文件，那些专门为@import命令而编写的Sass文件，并不需要生成对应的独立css文件，这样的Sass文件称为<code>局部文件</code>。对此，Sass有一个特殊的约定来命名这些文件，即局部文件的文件名<code>以下划线开头</code>。这样，Sass就不会在编译时单独编译这个文件输出css，而只把这个文件用作导入。当我们@import一个局部文件时，还可以不写文件的全名，即<code>省略文件名开头的下划线</code>。举例来说，若想导入<code>themes/_night-sky.scss</code>这个局部文件里的变量，我们只需在样式表中写<code>@import &quot;themes/night-sky&quot;;</code>即可。</p><p><strong>设置默认值</strong></p><p>一般情况下，反复声明一个变量，只有最后一处声明有效且它会覆盖前边的值，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$link-color</span>: blue;</span><br><span class="line"><span class="variable">$link-color</span>: red;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$link-color</span>; <span class="comment">// color: red</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sass提供<code>!default标签</code>，该标签作用于变量，含义：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fancybox-width</span>: <span class="number">400px</span> !default;</span><br><span class="line"><span class="selector-class">.fancybox</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$fancybox-width</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上例中，如果用户在导入该Sass局部文件之前声明了一个<code>$fancybox-width</code>变量，那么局部文件中对$fancybox-width赋值400px的操作就无效。如果用户没有做这样的声明，则$fancybox-width默认为400px。</p><p><strong>嵌套导入</strong></p><p>与原生的css不同，Sass允许@import命令写在css规则内。通过这种导入方式，生成对应的css文件时，局部文件会被直接插入到css规则内导入它的地方。举例说明，有一个名为_blue-theme.scss的局部文件，内容如下：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把它导入到一个css规则内，如下所示：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.blue-theme</span> &#123;<span class="keyword">@import</span> <span class="string">&quot;blue-theme&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">// 等价于</span><br><span class="line">.blue-theme &#123;</span><br><span class="line">    <span class="selector-tag">aside</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: blue;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>导入原生css</strong></p><p>由于Sass兼容原生的css，所以它也支持原生的<code>css@import</code>。通常在Sass中使用@import时，Sass会尝试找到对应的Sass文件并导入进来，但在下列三种情况下会生成原生的css@import，尽管这会造成浏览器解析css时的额外下载：</p><ul><li>被导入文件的名字以<code>.css</code>结尾；</li><li>被导入文件的名字是一个URL地址，例如：<a href="http://www.sass.hk/css/css.css%EF%BC%9B">http://www.sass.hk/css/css.css；</a></li><li>被导入文件的名字是css的url()值。</li></ul><p>也就是说，我们不能用Sass的@import直接导入一个原始的css文件，需要借助原生的css@import。但是因为Sass语法完全兼容css，因此我们可以把原始的css文件后缀修改为<code>.scss</code>，即可直接导入。</p><h3 id="静默注释"><a href="#静默注释" class="headerlink" title="静默注释"></a>静默注释</h3><p>Fass提供了一种不同于css标准注释格式<code>/* ... */</code>的注释语法，即静默注释<code>//</code>，其内容不会出现在生成的css文件中，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>; <span class="comment">// 这种注释内容不会出现在生成的css文件中</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/* 这种注释内容会出现在生成的css文件中 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 这种注释内容会出现在生成的css文件中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h3><p>对于大段重用样式的代码，变量无法应对这种情况，此时可以通过Sass的混合器实现大段样式的重用。</p><p>混合器使用<code>@mixin</code>标识符定义，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> rounded-corners &#123;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>@include</code>来使用混合器，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</span><br><span class="line">    <span class="keyword">@include</span> rounded-corners;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-class">.notice</span> &#123; <span class="attribute">background-color</span>: green; <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>; -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>; -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>; <span class="attribute">border-radius</span>: <span class="number">5px</span>; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>判断一组属性是否应该组合成一个混合器，一条经验法则就是能否为这个混合器想出一个好的名字。如果能找到一个很好的短名字来描述这些属性修饰的样式，比如<code>rounded-corners</code>、<code>fancy-font</code>或者<code>no-bullets</code>，那么往往能够构造一个合适的混合器。如果找不到，这时候构造一个混合器可能并不合适。</p><p>混合器是展示性的描述，它描述了包含它的css规则最终的视觉样式，</p></blockquote><p>混合器中不仅可以包含属性，也可以包含css规则，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> no-bullets &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">list-style-image</span>: none;</span><br><span class="line">        <span class="attribute">list-style-type</span>: none;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.plain</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">    <span class="keyword">@include</span> no-bullets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.plain</span> &#123; <span class="attribute">color</span>: <span class="number">#444</span>; <span class="attribute">list-style</span>: none; &#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.plain</span> <span class="selector-tag">li</span> &#123; <span class="attribute">list-style-image</span>: none; <span class="attribute">list-style-type</span>: none; <span class="attribute">margin-left</span>: <span class="number">0px</span>; &#125;</span><br></pre></td></tr></table></figure><p>给混合器传参：通过@include使用混合器时，可以给混合器传递参数，参数就是可以赋值给css属性值的变量。例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> link-colors(<span class="variable">$normal</span>, <span class="variable">$hover</span>, <span class="variable">$visited</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$normal</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: <span class="variable">$hover</span>; &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: <span class="variable">$visited</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> link-colors(blue, red, green);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure><p>通过@include使用混合器时，有时候可能会很难区分每个参数是什么意思，参数之间是一个什么样的顺序。为了解决这个问题，Sass允许通过语法<code>$name: value</code>的形式指定每个参数的值。通过这种形式来传递参数，就无需考虑参数顺序，只需确保参数不遗漏即可，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> link-colors(</span><br><span class="line">        <span class="variable">$normal</span>: blue,</span><br><span class="line">        <span class="variable">$visited</span>: green,</span><br><span class="line">        <span class="variable">$hover</span>: red</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使@include调用混合器时不必传入所有的参数，我们可以给参数指定一个默认值。参数默认值使用<code>$name: default-value</code>的形式声明，默认值可以是任何有效的css属性值，甚至是其他参数的引用，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> link-colors(</span><br><span class="line">    <span class="variable">$normal</span>,</span><br><span class="line">    <span class="variable">$hover</span>: <span class="variable">$normal</span>,</span><br><span class="line">    <span class="variable">$visited</span>: <span class="variable">$normal</span></span><br><span class="line">)&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$normal</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: <span class="variable">$hover</span>; &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: <span class="variable">$visited</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> link-colors(red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure><h3 id="选择器继承"><a href="#选择器继承" class="headerlink" title="选择器继承"></a>选择器继承</h3><p>选择器继承指一个选择器可以继承另一个选择器定义的所有样式，可通过<code>@extend</code>语法实现，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .error;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid red; <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123; <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>.seriousError</code>不仅会继承<code>.error</code>自身的所有样式，任何跟<code>.error</code>有关的组合选择器样式也会被<code>.seriousError</code>以组合选择器的形式继承，例如：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line"> <span class="keyword">@extend</span> .error;</span><br><span class="line"> <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span> <span class="selector-tag">a</span>&#123;  <span class="comment">// 应用到.seriousError a</span></span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.error</span> &#123; <span class="comment">// 应用到hl.seriousError</span></span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid red; <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123; <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br><span class="line"><span class="selector-class">.error</span> <span class="selector-tag">a</span>, <span class="selector-class">.seriousError</span> <span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: red; <span class="attribute">font-weight</span>: <span class="number">100</span>; &#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.error</span>, <span class="selector-tag">h1</span><span class="selector-class">.seriousError</span> &#123; <span class="attribute">font-size</span>: <span class="number">1.2rem</span>; &#125;</span><br></pre></td></tr></table></figure><p>跟混合器相比，继承生成的css代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比使用混合器生成的css体积更小。</p><p>避免使用<code>后代选择器</code>，例如：<code>.foo .bar</code>，去继承css规则，示例：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> <span class="selector-class">.bar</span> &#123; <span class="keyword">@extend</span> .baz; &#125;</span><br><span class="line"><span class="selector-class">.bip</span> <span class="selector-class">.baz</span> &#123; <span class="selector-tag">a</span>: b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-class">.bip</span> <span class="selector-class">.baz</span>, <span class="selector-class">.bip</span> <span class="selector-class">.foo</span> <span class="selector-class">.bar</span>, <span class="selector-class">.foo</span> <span class="selector-class">.bip</span> <span class="selector-class">.bar</span> &#123; <span class="selector-tag">a</span>: b; &#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Less </tag>
            
            <tag> Sass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2024/01/28/Redis/"/>
      <url>/2024/01/28/Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。它通常被称为数据结构服务器，因为值（value）可以是字符串（String）、列表（List）、集合（Set）、哈希（Hash）和有序集合（Zset）等类型。</p><p>特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list、set、hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave（主从）模式的数据备份。</li><li>Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p>下载地址：<a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a></p><p>安装步骤：</p><ol><li><p>下载Redis-x64-xxx.zip压缩包，解压并将文件夹重新命名为redis。</p></li><li><p>打开命令行窗口，切换到redis安装目录下，执行下方命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><img src="image-20230522093938878.png" alt="image-20230522093938878" style="zoom:80%;" /><blockquote><p>命令中的<code>redis.windows.conf</code>可以省略，如果省略则表示使用默认配置。</p></blockquote></li><li><p>测试：重新打开一个命令行窗口并切换到redis安装目录下，<code>原先的命令行窗口不关闭</code>，否则无法访问服务端。执行下方命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\redis-cli.exe -h 127.0.0.1 -p 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">(base) PS F:\environment\redis&gt; .\redis-cli.exe -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> myKey abc <span class="comment"># 设置键值对</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get myKey <span class="comment"># 取出键值对</span></span><br><span class="line"><span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><p>下载地址：<a href="http://redis.io/download">http://redis.io/download</a></p><p>安装步骤：</p><ol><li><p>下载并安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-6.0.8.tar.gz</span><br><span class="line">tar xzf redis-6.0.8.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-6.0.8</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>执行完<code>make</code>命令，<code>redis-6.0.8/src</code>目录下会出现编译后的redis服务程序<code>redis-server</code>，以及用于测试的客户端程序<code>redis-cli</code>。</p><blockquote><p>安装redis时出现以下错误：</p><img src="image-20230522104328462.png" alt="image-20230522104328462"/><p>解决方法：升级gcc到最新版本，执行下方命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">gcc -v</span><br><span class="line"><span class="comment"># 高版本的redis需要更高版本的gcc，云安装的gcc版本4.8.5，需要升级gcc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级gcc</span></span><br><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-9 bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure></blockquote></li><li><p>启动redis服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.0.8/src</span><br><span class="line">./redis-server</span><br></pre></td></tr></table></figure><img src="image-20230522104811400.png" alt="image-20230522104811400"/><p>这种方式启动redis时使用的是默认配置，也可以通过启动参数指定配置文件，命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-server ../redis.conf</span><br></pre></td></tr></table></figure><blockquote><p><code>redis.conf</code>是一个默认的配置文件，可以根据需要使用自己的配置文件。</p><p>redis默认不是后台启动，可修改配置文件进行设置。</p><img src="image-20230627141310408.png" alt="image-20230627141310408"/></blockquote></li><li><p>测试：启动redis服务进程后，就可以使用测试客户端程序<code>redis-cli</code>和redis服务进行交互了。执行下方命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.0.8/src</span><br><span class="line">./redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="built_in">set</span> myKey abc <span class="comment"># 设置键值对</span></span><br><span class="line">get myKey <span class="comment"># 取出键值对</span></span><br></pre></td></tr></table></figure><blockquote><p>查看redis进程：<code> ps -ef|grep redis</code></p><img src="image-20230627141633537.png" alt="image-20230627141633537"/><p>关闭redis服务：</p><ul><li>方式一：在redis-cli下执行shutdown命令。</li><li>方式二：使用kill命令停止redis进程，即执行<code>kill -9 pid</code>命令。</li></ul></blockquote></li></ol><h2 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h2><p>Redis配置文件位于Redis安装目录下，Windows中文件名为<code>redis.windows.conf</code>，Linux中文件名为<code>redis.conf</code>，可以通过<code>config</code>命令查看或编辑配置项。</p><p>查看配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">config get config_setting_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">127.0.0.1:6379&gt; config get loglevel</span><br><span class="line">1) <span class="string">&quot;loglevel&quot;</span></span><br><span class="line">2) <span class="string">&quot;notice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用*号获取所有配置项</span></span><br><span class="line">127.0.0.1:6379&gt; config get *</span><br></pre></td></tr></table></figure><p>编辑配置：可以通过修改redis.conf文件或使用<code>config set</code>命令来修改配置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">config <span class="built_in">set</span> config_setting_name new_config_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> loglevel <span class="string">&quot;notice&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get loglevel</span><br><span class="line">1) <span class="string">&quot;loglevel&quot;</span></span><br><span class="line">2) <span class="string">&quot;notice&quot;</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Redis支持五种数据类型：</p><ul><li>字符串：String</li><li>列表：List</li><li>集合：Set</li><li>哈希：Hash</li><li>有序集合：Zset</li></ul><blockquote><p>注意：这里说的数据类型指的是value的数据类型，而key的类型都是字符串。</p></blockquote><h3 id="键（Key）"><a href="#键（Key）" class="headerlink" title="键（Key）"></a>键（Key）</h3><p>常用命令：</p><ul><li>keys *：查看当前库所有的key</li><li>exists key：判断key是否存在</li><li>keys pattern：查找所有符合给定模式pattern的key</li><li>del key [key …]：删除一个或多个key</li><li>type key：返回key所储存的值对应的类型</li><li>del key：删除指定的key，阻塞删除</li><li>unlink key：删除指定的key，非阻塞删除，只是将键与键空间断开连接，实际的删除将稍后异步进行</li><li>expire key seconds：为key设置过期时间，以秒计</li><li>pexpire key millisecnds：为key设置过期时间，以毫秒计</li><li>persist key：移除key的过期时间，key将持久保持</li><li>ttl key：以秒为单位返回key的剩余过期时间，-1：表示永不过期，-2：表示已过期</li><li>pttl key：以毫秒为单位返回key的剩余过期时间</li><li>rename key newkey：修改key的名称，若newkey已存在，则覆盖</li><li>renamenx key newkey：仅当newkey不存在时，将key改名为newkey</li><li>select dbindex：切换数据库[0-15]，默认为0</li><li>dbsize：查看当前数据库key的数量</li><li>flushdb：清空当前库</li><li>flushall：通杀全部库</li><li>move key db：将当前数据库的key移动到指定的数据库db中</li><li>randomkey：从当前数据库中随机返回一个key</li></ul><h3 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h3><p><strong>简介</strong></p><p>String类型是Redis最基本的数据类型，String类型的值最大能存储512MB。</p><p>String类型是二进制安全的，意思是Redis的String可以包含任何数据，比如图片或者序列化的对象。</p><p>添加键值对：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value [expiration EX seconds|PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure><ul><li>EX seconds：将键的过期时间设置为seconds秒。执行SET key value EX seconds的效果等同于执行SETEX key seconds value。</li><li>PX milliseconds：将键的过期时间设置为milliseconds毫秒。执行SET key value PX milliseconds的效果等同于执行PSETEX key milliseconds value。</li><li>NX：只在键不存在时，才对键进行设置操作。执行SET key value NX的效果等同于执行SETNX key value。</li><li>XX：只在键已经存在时，才对键进行设置操作。</li></ul><blockquote><p>在Redis 2.6.12版本以前，SET命令总是返回OK。从Redis 2.6.12版本开始，SET命令只在设置操作成功完成时才返回OK；如果命令使用了NX或者XX选项，但是因为条件没达到而造成设置操作未执行，那么命令将返回nil。</p><p>注意：value中若包含空格、特殊字符，需用双引号包裹。</p></blockquote><p><strong>常用命令</strong></p><ul><li><p>get key：获取key对应的value。</p></li><li><p>setnx key value：只有在key不存在时设置key的值。</p></li><li><p>append key value：如果key已存在且是一个字符串，则将value追加到原值的末尾；若key不存在，则设置该键值对。</p></li><li><p>strlen key：返回key所存储的字符串值的长度。</p></li><li><p>incr key：将key中存储的数字值增一，值需要为整形，否则会报错。若key不存在，则自动创建，且值为1。</p><p>decr key：将key中存储的数字值减一，值需要为整形，否则会报错。若key不存在，则自动创建，且值为-1。</p></li><li><p>incrby key increment：将key存储的值加上给定值increment（整形），key存储的值需要为整形。若key不存在，则相当于在0的基础上进行增加。</p><p>decrby key decrement：将key存储的值减去给定值increment（整形），key存储的值需要为整形。若key不存在，则相当于在0的基础上进行减少。</p><p>incrbyfloat key increment：将key存储的值加上给定的浮点型增量值increment，key存储的值可以是整形或浮点型。</p></li><li><p>mset key value [key value …]：设置一个或多个键值对。</p><p>mget key [key …]：获取一个或多个key对应的值。</p></li><li><p>msetnx key value [key value …]：设置一个或多个键值对，当且仅当所有给定的key都不存在。</p><blockquote><p>原子性操作，要么都成功，要么都失败。</p></blockquote></li><li><p>getrange key start end：返回key从start到end位置的值（包括结束位置）。</p></li><li><p>setrange key offset value：从偏移量offset位置开始，用value替换key相应位置的值。</p></li><li><p>setex key seconds value：将value关联到key，并将key的过期时间设置为seconds，以秒为单位。</p><p>psetex key milliseconds value：与setex命令相似，但它以毫秒为单位。</p></li><li><p>getset key value：将key的值设置为value，并返回key的旧值。若key不存在，则将key的值设置为value，并返回nil。</p></li></ul><p><strong>数据结构</strong></p><p>String的数据结构为简单动态字符串（Simple Dynamic String，缩写SDS），是可以修改的字符串，内部结构上类似于Java的ArrayList，采用分配冗余空间的方式来减少内存的频繁分配。</p><img src="image-20230815204806466.png" alt="image-20230815204806466" style="zoom:80%;" /><p>如上图所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次会多扩容1M的空间。</p><h3 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h3><p><strong>简介</strong></p><p>列表：单键多值。</p><p>Redis列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部或尾部，其底层为<code>双向链表</code>，对两端的操作性能很高，通过索引下标操作中间节点性能较差。</p><p>一个列表最多可以存储2^32^ - 1个元素。</p><p><strong>常用命令</strong></p><ul><li><p>lpush key value [value …]：将一个或多个值插入到列表头部。</p><p>rpush key value [value …]：将一个或多个值插入到列表尾部。</p><p>lpushx key value：将一个值插入到已存在的列表头部。</p><p>rpushx key value：将一个值插入到已存在的列表尾部。</p></li><li><p>llen key：获取列表长度。如果key不存在，则key被解释为一个空列表，返回0。</p></li><li><p>lrange key start stop：返回列表指定区间内的元素，可以使用负数下标，以-1表示列表的最后一个元素，-2表示列表的倒数第二个元素。</p></li><li><p>lindex key index：获取指定位置的元素，可以使用负数下标。如果下标越界，则返回nil。</p></li><li><p>lpop key：移出并获取列表的第一个元素。</p><p>rpop key：移出并获取列表的最后一个元素。</p></li><li><p>rpoplpush source destination：移除并获取列表的最后一个元素，并将该元素添加到另一个列表的头部。</p></li><li><p>lset key index value：替换指定位置的值。当index参数超出范围，或对一个空列表（key不存在）进行lset操作时，返回一个错误。</p></li><li><p>linsert key BEFORE|AFTER pivot value：将值value插入到列表key当中，位于值pivot之前或之后。</p><blockquote><p>当pivot不存在于列表key时，不执行任何操作，返回-1。</p><p>当key不存在时，key被视为空列表，不执行任何操作。</p><p>如果key不存在或为空列表，返回0。</p></blockquote></li><li><p>lrem key count value：根据参数count的值，移除列表中与参数value相等的元素。</p><blockquote><p>count的值可以是以下几种：</p><ul><li>count &gt; 0：从表头开始向表尾搜索，移除与value相等的元素，数量为count。</li><li>count &lt; 0：从表尾开始向表头搜索，移除与value相等的元素，数量为count的绝对值。</li><li>count &#x3D; 0：移除表中所有与value相等的值。</li></ul><p>返回值为被移除元素的数量。</p><p>因为不存在的key被视作空列表，所以当key不存在时，返回0。</p></blockquote></li><li><p>ltrim key start stop：对列表进行修剪，即只保留指定区间内的元素，不在区间内的元素都将被删除。</p></li></ul><p><strong>数据结构</strong></p><p>List的数据结构为快速链表quickList。</p><p>在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也就是压缩列表，它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当列表元素比较多的时候才会改成quickList。因为普通的链表需要的附加指针空间太大，会比较浪费空间，比如这个列表里存储的只是int类型的数，结构上还需要2个额外的指针prev和next。</p><img src="image-20230817134839085.png" alt="image-20230817134839085"/><p>redis将链表和ziplist结合起来组成了quicklist，也就是将多个ziplist使用双向指针串起来使用，这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h3 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h3><p><strong>简介</strong></p><p>redis的set是string类型的无序集合，底层实际上是一个value为null的hash表，因此添加、删除、查找的复杂度都是O(1)。</p><p>集合成员唯一，且集合中最大成员数为2^32^ - 1。</p><p><strong>常用命令</strong></p><ul><li><p>sadd key member [member …]：向集合添加一个或多个成员。</p></li><li><p>smembers key：返回集合中的所有成员。</p></li><li><p>scard key：获取集合的成员数，当key不存在时返回0。</p></li><li><p>sismember key member：判断member元素是否是集合key的成员，返回值为0或1。</p></li><li><p>srem key member [member …]：移除集合中一个或多个成员，不存在的成员会被忽略。</p></li><li><p>spop key [count]：移除集合中一个或多个随机元素，移除后会返回被移除的元素。当key不存在或key是空集时，返回nil。</p></li><li><p>srandmember key [count]：返回集合中一个或多个随机元素。</p><blockquote><p>只提供key参数时返回一个元素；如果集合为空，返回nil。</p><p>如果提供了count参数，那么返回一个数组；如果集合为空，返回空数组。</p></blockquote></li><li><p>smove source destination member：将member元素从source集合移动到destination集合。</p><blockquote><p>smove是原子性操作。</p><p>如果source集合不存在或不包含指定的member元素，则smove命令不执行任何操作，仅返回0。否则member元素从source集合中被移除，并添加到destination集合中去。</p><p>当destination集合已经包含member元素时，smove命令只是简单地将source集合中的member元素删除。</p></blockquote></li><li><p>sinter key [key …]：返回给定集合的交集。</p><p>sinterstore destination key [key …]：将给定集合之间的交集存储在指定的集合中。如果指定的集合已存在，则将其覆盖。</p></li><li><p>sunion key [key …]：返回给定集合的并集，并自动去重。</p><p>sunionstore destination key [key …]：将给定集合之间的并集存储在指定的集合中。如果指定的集合已存在，则将其覆盖。</p></li><li><p>sdiff key [key …]：返回第一个集合与其他集合之间的差异，即第一个集合中独有的元素。不存在的集合key将视为空集。</p><p>sdiffstore destination key [key …]：将给定集合之间的差集存储在指定的集合中。如果指定的集合已存在，则将其覆盖。</p></li></ul><p><strong>数据结构</strong></p><p>set的数据结构是字典，字典是用hash表实现的。</p><p>Java中的HashSet的内部实现使用HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样的，它的内部也使用hash结构，所有的value都指向同一个内部值。</p><h3 id="哈希（Hash）"><a href="#哈希（Hash）" class="headerlink" title="哈希（Hash）"></a>哈希（Hash）</h3><p><strong>简介</strong></p><p>Redis hash是一个键值对集合。</p><p>Redis hash是一个String类型的字段field和值value的映射表，适用于存储对象，每个hash可以存储2^32^ - 1个键值对（40多亿）。</p><p><strong>常用命令</strong></p><ul><li><p>hset key field value：将哈希表key中的字段field的值设为value。</p><blockquote><p>可设置多个field，例如：hset user name ready age 30</p></blockquote><p>hmset key field value [field value …]：将多个field-value对设置到哈希表key中。</p></li><li><p>hdel key field [field …]：删除一个或多个哈希表字段。</p></li><li><p>hlen key：获取哈希表中字段的数量。</p></li><li><p>hget key field：获取哈希表中指定字段的值。</p><p>hgetall key：获取哈希表中所有字段和值。</p><p>hmget key field [field …]：获取所有给定字段的值。</p></li><li><p>hkeys key：获取哈希表中所有字段。</p><p>hvals key：获取哈希表所有字段对应的值。</p></li><li><p>hexists key field：检测哈希表key中指定字段是否存在，存在则返回1，否则返回0。如果key不存在，则返回0。</p></li><li><p>hincrby key field increment：为哈希表指定字段的整数值加上增量increment。</p><blockquote><p>如果字段field不存在，那么在执行命令前字段field的值被初始化为0。</p><p>如果哈希表key不存在，则先创建哈希表key并执行hincrby命令。</p></blockquote><p>hincrbyfloat key field increment：为哈希表指定字段的值加上给定的浮点型增量值increment。</p></li><li><p>hsetnx key field value：只有在字段field不存在时，设置哈希表字段的值。如果哈希表key不存在，则先创建哈希表key并执行hsetnx命令。</p></li></ul><p><strong>数据结构</strong></p><p>Hash类型对应的数据结构有两种：ziplist（压缩列表）、hashtable（哈希表）。</p><p>当field-value长度较短个数较少时使用ziplist，否则使用hashtable。</p><blockquote><p>Redis中hash可以像数据库update一样，只修改某一项属性值，而Memcached中需要取出整个字符串反序列化成对象，修改完再序列化存回去。</p></blockquote><h3 id="有序集合（Zset）"><a href="#有序集合（Zset）" class="headerlink" title="有序集合（Zset）"></a>有序集合（Zset）</h3><p><strong>简介</strong></p><p>Redis zset和set一样也是String类型元素的集合，且不允许重复的成员。不同的是每个元素都会关联一个分数（score），Redis正是通过分数来为集合中的成员进行<code>从小到大</code>的排序。</p><p>zset的成员是唯一的，但分数却可以重复。</p><p><strong>常用命令</strong></p><ul><li><p>zadd key score member [score member …]：向有序集合添加一个或多个成员。</p><blockquote><p>如果某个member已经是有序集合的成员，那么更新这个member的score值，并通过重新插入这个member元素来保证该member在正确的位置上。</p><p>score值可以是整数值或双精度浮点数。</p></blockquote></li><li><p>zrange key start stop [WITHSCORES]：返回有序集中指定区间内的成员，其中成员的位置按分数值递增来排序，具有相同分数值的成员按字典序来排列。</p><blockquote><p>可以使用负数下标，以-1表示最后一个成员，-2表示倒数第二个成员，以此类推。</p><p>withscores：让成员和它的score值一并返回，返回列表以value1, score1, … valueN, scoreN的格式表示。</p></blockquote><p>zrevrange key start stop [WITHSCORES]：返回有序集中指定区间内的成员，其中成员的位置按分数值递减来排列，具有相同分数值的成员按字典序的逆序排列。</p></li><li><p>zrangebyscore key min max [WITHSCORES] [LIMIT offset count]：返回有序集合中指定分数区间（闭区间）的成员列表，按分数值递增排列，具有相同分数值的成员按字典序来排列。</p><blockquote><p>可选的LIMIT参数指定返回结果的数量及区间（类似于SQL中的SELECT LIMIT offset, count)。</p></blockquote><p>zrevrangebyscore key max min [WITHSCORES] [LIMIT offset count]：返回有序集中指定分数区间内的所有的成员，按分数值递减次序排列，具有相同分数值的成员按字典序的逆序排列。</p></li><li><p>zcard key：获取有序集合的成员数。</p></li><li><p>zcount key min max：计算有序集合中指定分数区间（闭区间）的成员数量。</p></li><li><p>zrank key member：返回有序集合中指定成员的索引（即排名，从0开始）。</p><p>zrevrank key member：返回有序集合中指定成员的索引，有序集成员按分数值递减排序。</p></li><li><p>zscore key member：返回有序集中成员的分数值。如果member元素不是有序集key的成员，或key不存在，返回nil。</p></li><li><p>zincrby key increment member：对有序集合中指定成员的分数加上增量increment。</p><blockquote><p>当key不存在，或member不是key的成员时，zincrby key increment member等同于zadd key increment member。</p></blockquote></li><li><p>zrem key member [member …]：移除有序集合中的一个或多个成员，不存在的成员将被忽略。</p><p>zremrangebyrank key start stop：移除有序集合中给定排名区间内（闭区间）的所有成员。</p><p>zremrangebyscore key min max：移除有序集合中给定分数区间内（闭区间）的所有成员。</p></li><li><p>zlexcount key min max：计算有序集合中指定字典区间内成员数量。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd key1 0 a 0 b 0 c 0 d 0 e 0 f</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; zlexcount key1 - +</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; zlexcount key1 [b [f</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure></li><li><p>zrangebylex key min max [LIMIT offset count]：通过字典区间返回有序集合的成员。</p></li><li><p>zrangebyscore key min max [WITHSCORES] [LIMIT offset count]</p><p>默认情况下，区间的取值使用闭区间（小于等于或大于等于），也可以通过给参数前增加<code>(</code>符号来使用可选的开区间（小于或大于）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrangebyscore key (1 5</span><br><span class="line"><span class="comment"># 返回所有符合条件 1 &lt; score &lt;= 5 的成员</span></span><br><span class="line">zrangebyscore key (5 (10</span><br><span class="line"><span class="comment"># 返回所有符合条件 5 &lt; score &lt; 10 的成员</span></span><br></pre></td></tr></table></figure></li><li><p>zremrangebylex key min max：移除有序集合中给定字典区间内的所有成员。</p></li><li><p>zinterstore destination numkeys key [key …]：计算给定的一个或多个有序集的交集，其中给定key的数量必须以numkeys参数指定，并将该交集（结果集）储存到destination中。</p><blockquote><p>默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和。</p></blockquote><p>zunionstore destination numkeys key [key …]：计算给定的一个或多个有序集的并集，其中给定key的数量必须以numkeys参数指定，并将该并集（结果集）储存到destination中。</p><blockquote><p>默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和 。</p></blockquote></li></ul><p><strong>数据结构</strong></p><p>zset是redis提供的一个非常特别的数据类型，其内部使用了2种数据结构：</p><ul><li><p>hash表</p><p>类似于java中的Map&lt;String, score&gt;，key为集合中的元素，value为元素对应的score，可以用来快速定位元素定义的score，时间复杂度为O(1)。</p></li><li><p>跳表</p><p>跳表（skiplist）是一个非常优秀的数据结构，实现简单，插入、删除、查找的复杂度均为O(logN)。</p><p>类似java中的ConcurrentSkipListSet，根据score的值排序后生成的一个跳表，可以快速按照位置的顺序或者score的顺序查询元素。</p></li></ul><p>跳表的原理：</p><p>首先从考虑一个有序表开始：</p><img src="image-20230818170155678.png" alt="image-20230818170155678" style="zoom:80%;" /><p>从该有序表中搜索元素&lt;23, 43, 59&gt;，需要比较的次数分别为&lt;2, 4, 6&gt;，总共比较的次数为2 + 4 + 6 &#x3D; 12次。有没有优化的算法吗？链表是有序的，但不能使用二分查找。类似二叉搜索树，我们把一些节点提取出来，作为索引，得到如下结构：</p><img src="image-20230818170526594.png" alt="image-20230818170526594" style="zoom:80%;" /><p>这里我们把&lt;14, 34, 50, 72&gt;提取出来作为一级索引，这样搜索的时候就可以减少比较次数了。我们还可以再从一级索引提取一些元素出来，作为二级索引，变成如下结构：</p><img src="image-20230818170757637.png" alt="image-20230818170757637" style="zoom:80%;" /><p>这里元素不多，体现不出优势，如果元素足够多，这种索引结构就能体现出优势来了。</p><h2 id="Redis新的3种数据类型"><a href="#Redis新的3种数据类型" class="headerlink" title="Redis新的3种数据类型"></a>Redis新的3种数据类型</h2><h3 id="Bitmaps：位操作字符串"><a href="#Bitmaps：位操作字符串" class="headerlink" title="Bitmaps：位操作字符串"></a>Bitmaps：位操作字符串</h3><p><strong>简介</strong></p><p>现代计算机使用二进制（位）作为信息的基本单位，1个字节等于8位，例如“abc”字符串是由3个字节组成，但实际在计算机内存储时将其使用二进制表示，“abc”分别对应的ASCII码是：97、98、99，对应的二进制分别是01100001、01100010、01100011，如下图：</p><img src="image-20240115101749689.png" alt="image-20240115101749689" style="zoom:80%;" /><p>合理地使用位操作能够有效地提高内存使用率和开发效率。</p><p>Redis提供了Bitmaps这种“数据类型”来实现对位的操作：</p><ul><li>Bitmaps本身不是一种数据类型，实际上它就是字符串，但是它可以对字符串的位进行操作，字符串中每个字符对应1个字节，也就是8位，一个字符可以存储8个bit位信息。</li><li>Bitmaps单独提供了一套命令，所以在Redis中使用Bitmaps和使用字符串的方法不太相同。可以把Bitmaps想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在Bitmaps中叫做偏移量。</li></ul><img src="image-20240115102333644.png" alt="image-20240115102333644" style="zoom:80%;" /><p><strong>常用命令</strong></p><ul><li><p>setbit：设置某个偏移位的值（0或1）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure><blockquote><p>设置offset偏移位的值为value，offset的值从0开始，n代表第n+1个bit位。</p><p>offset参数必须大于或等于0，小于2^32（bit映射被限制在512MB之内）。</p><p>value的值只能为0或1。</p><p>返回值：指定偏移量原来储存的位。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit bit 100 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit bit 100</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit bit 101 <span class="comment"># bit默认被初始化为0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>示例：</p><p>每个独立用户是否访问过网站存放在bitmaps中，将访问的用户记做1，没有访问的用户记做0，用户id作为offset。</p><p>假设现在有20个用户，userid&#x3D;1, 6, 11, 15, 19的用户对网站进行了访问，那么当前bitmaps初始化结果如图：</p><img src="image-20240115103638120.png" alt="image-20240115103638120" style="zoom:80%;" /><p>users:20220409这个bitmaps中表示2022-04-09这天独立访问的用户，如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">users</span>:20220409 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">users</span>:20220409 6 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">users</span>:20220409 11 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">users</span>:20220409 15 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit <span class="built_in">users</span>:20220409 19 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure></li><li><p>getbit：获取key所对应的bitmaps中offset偏移位的值，返回值为0或1。</p></li><li><p>bitcount：统计bit位都为1的数量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitcount key [start end]</span><br></pre></td></tr></table></figure><blockquote><p>统计字符串被设置为1的bit数。一般情况下，给定的整个字符串都会进行统计，通过指定额外的start或者end参数，可以让计数只在特定的位上进行。</p><p>start和end参数，都可以使用负数值：比如-1表示最后一个位，而-2表示倒数第二个位，以此类推。</p><p>注意：start、end是指bit组字节的下标数，一个字节对应8个bit，所以[a, b]对应的offset范围是[8a, 8b+7]。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; setbit user 7 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit user 15 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit user 23 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; bitcount user <span class="comment"># 获取user这个bitmaps中1的数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; bitcount user 0 1 <span class="comment"># 获取[0,1]这个字节内bit位上1的数量，也就是offset是[0,15]的位置上1的数量，所以结果为2</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; bitcount user 0 0 <span class="comment"># 获取[0,0]这个字节内bit位上1的数量，也就是offset是[0,7]的位置上1的数量，只有7这个位置，所以结果为1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure></li><li><p>bitop：对一个或多个bitmaps执行位操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitop operation destkey key [key ...]</span><br></pre></td></tr></table></figure><blockquote><p>对一个或多个保存二进制位的字符串key进行位元操作，并将结果保存到destkey上。</p><p>operation可以是AND、OR、NOT、XOR这四种操作中的任意一种：</p><ul><li>AND：对一个或多个key求逻辑并，并将结果保存到destkey。</li><li>OR：对一个或多个key求逻辑或，并将结果保存到destkey。</li><li>XOR：对一个或多个key求逻辑异或，并将结果保存到destkey。</li><li>NOT：对给定key求逻辑非，并将结果保存到destkey。</li></ul><p>除了NOT操作之外，其他操作都可以接受一个或多个key作为输入。</p><p>返回值：保存到destkey的字符串长度和输入key中最长的字符串长度相等。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; setbit bit-1 0 1 <span class="comment"># bit-1 = 1001</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bit-1 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bit-2 0 1 <span class="comment"># bit-2 = 1011</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bit-2 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bit-2 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; bitop and and-result bit-1 bit-2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit and-result 0 <span class="comment"># and-result = 1001</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit and-result 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit and-result 2</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit and-result 3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure></li></ul><p><strong>bitmaps与set比较</strong></p><p>假设网站有1亿用户，每天独立访问的用户有5千万，如果每天用集合类型和Bitmaps分别存储活跃用户，对比如下：</p><p>set和Bitmaps存储一天活跃用户对比：</p><table><thead><tr><th>数据类型</th><th>每个用户id占用空间</th><th>需要存储的用户量</th><th>全部内存量</th></tr></thead><tbody><tr><td>set集合</td><td>64位</td><td>50000000</td><td>64位 * 50000000 &#x3D; 400MB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位 * 100000000 &#x3D; 12.5MB</td></tr></tbody></table><p>很明显，这种情况下使用Bitmaps能节省很多的内存空间，尤其是随着时间推移节省的内存还是非常可观的。</p><p>set和Bitmaps存储独立用户空间对比：</p><table><thead><tr><th>数据类型</th><th>一天</th><th>一月</th><th>一年</th></tr></thead><tbody><tr><td>set集合</td><td>400MB</td><td>12GB</td><td>144GB</td></tr><tr><td>Bitmaps</td><td>12.5MB</td><td>375MB</td><td>4.5GB</td></tr></tbody></table><p>但Bitmaps并不是万金油，假如该网站每天的独立访问用户很少，例如只有10万（大量的僵尸用户），那么两者的对比如下表所示，很显然，这时候使用Bitmaps就不太合适了，因为大部分位都是0。</p><table><thead><tr><th>数据类型</th><th>每个用户id占用空间</th><th>需要存储的用户量</th><th>全部内存量</th></tr></thead><tbody><tr><td>set集合</td><td>64位</td><td>100000</td><td>64位 * 100000 &#x3D; 800KB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位 * 100000000 &#x3D; 12.5MB</td></tr></tbody></table><h3 id="HyperLoglog"><a href="#HyperLoglog" class="headerlink" title="HyperLoglog"></a>HyperLoglog</h3><p><strong>简介</strong></p><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量），可以使用Redis的incr、incrby轻松实现。但像UV（UniqueVisitor独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>解决基数问题有很多种方案：</p><ul><li>数据存储在MySQL表中，使用distinct count计算不重复个数。</li><li>使用Redis提供的hash、set、bitmaps等数据结构来处理。</li></ul><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。能否降低一定的精度来平衡存储空间？Redis推出了HyperLogLog。</p><p>Redis HyperLogLog是用来做基数统计的算法，HyperLogLog的优点是：在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>在Redis里面，每个HyperLogLog键只需要花费12KB内存，就可以计算接近2^64个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。但是，因为HyperLogLog只会根据输入元素来计算基数，而不会储存输入元素本身，所以HyperLogLog不能像集合那样，返回输入的各个元素。</p><blockquote><p>什么是基数？</p><p>比如数据集{1, 3, 5, 7, 5, 7, 8}，这个数据集的基数集为{1, 3, 5 ,7, 8}，基数（不重复元素）个数为 5。基数估计就是在误差可接受的范围内，快速计算基数。</p></blockquote><p><strong>常用命令</strong></p><ul><li><p>pfadd：添加多个元素</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfadd key element [element ...]</span><br></pre></td></tr></table></figure><blockquote><p>向HyperLoglog类型的key中添加一个或者多个元素。<br>返回值：1表示添加成功，0表示添加失败。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfadd program java c c++ python <span class="comment"># 向program中添加4个元素java、c、c++、python，添加成功，返回1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfadd program java <span class="comment"># 再次添加java，由于已经存在，所以添加失败，返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; pfadd program java js <span class="comment"># 再次添加2个元素，其中java已经存在，但js不存在，添加成功，返回1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure></li><li><p>pfcount：获取多个HLL合并后元素的个数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfcount key [key ...]</span><br></pre></td></tr></table></figure><blockquote><p>统计一个或者多个key去重后元素的数量。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfadd uv1 a b c d e</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount uv1</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; pfadd uv2 b c d e f</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount uv1</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; pfcount uv1 uv2 <span class="comment"># uv1和uv2合并去重后为[a, b, c ,d, e, f]</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure></li><li><p>pfmerge：将多个HLL合并后元素放入另外一个HLL中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfmerge destkey sourcekey [sourcekey ...]</span><br></pre></td></tr></table></figure><blockquote><p>将多个sourcekey合并后放入destkey中。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfmerge uv_dest uv1 uv2 <span class="comment"># 将uv1和uv2合并后放入uv_dest</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount uv_dest</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure></li></ul><h3 id="Geographic"><a href="#Geographic" class="headerlink" title="Geographic"></a>Geographic</h3><p><strong>简介</strong></p><p>Reids3.2中增加了对GEO类型的支持，GEO（Geographic），地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度，redis基于该类型，提供了经纬度设置、查询、范围查询、距离查询，经纬度Hash等常见操作。</p><p><strong>常用命令</strong></p><ul><li><p>geoadd：添加多个位置的经纬度</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geoadd key longitude latitude member [longitude latitude member ...]</span><br></pre></td></tr></table></figure><blockquote><p>longitude latitude member：经度 纬度 名称</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai <span class="comment"># 添加上海的经纬度</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing <span class="comment"># 添加重庆、深圳、北京3个城市的经纬度</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> china:city <span class="comment"># 发现geo实际上是使用zset类型存储的</span></span><br><span class="line">zset</span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line">3) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">4) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;4026042091628984&quot;</span></span><br><span class="line">3) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line">4) <span class="string">&quot;4046432193584628&quot;</span></span><br><span class="line">5) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">6) <span class="string">&quot;4054803462927619&quot;</span></span><br><span class="line">7) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">8) <span class="string">&quot;4069885332386336&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>两级无法直接添加，一般会下载城市数据，直接通过java程序一次性导入。</p><p>有效的经度从-180度到180度，有效的纬度从-85.05112878度到85.05112878度。</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>已经添加的数据，是无法再次往里面添加的。</p></blockquote></li><li><p>geopos：获取多个位置的坐标值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geopos key member [member ...]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city wuhan beijing chongqing <span class="comment"># 获取武汉、北京、重庆3个城市的坐标，由于没有添加武汉的数据，所以没有获取到</span></span><br><span class="line">1) (nil)</span><br><span class="line">2) 1) <span class="string">&quot;116.38000041246414185&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.90000009167092543&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">   2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>geodist：获取两个位置的直线距离</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 [unit]</span><br></pre></td></tr></table></figure><blockquote><p>unit指单位，包括m、km、ft、mi，对应于米、千米、英里、英尺，默认为米。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist china:city beijing chongqing km <span class="comment"># 获取北京到重庆的直线距离</span></span><br><span class="line"><span class="string">&quot;1462.9505&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>georadius：以给定的经纬度为中心，找出某一半径内的元素</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">georadius key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</span><br></pre></td></tr></table></figure><blockquote><p>单位：m、km、ft、mi，对应于米、千米、英里、英尺，默认为米。</p><p>WITHDIST：在返回元素的同时，将元素与中心之间的距离也一并返回。距离的单位和用户给定的范围单位保持一致。</p><p>WITHCOORD：将元素的经纬度一并返回。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km <span class="comment"># 对china:city进行检索，获取以经纬度(110, 30)为中心，半径为1000km内的位置列表</span></span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;shenzhen&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p><strong>简介</strong></p><p>Redis发布订阅（pub&#x2F;sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息。</p><p>Redis客户端可以订阅任意数量的频道。</p><p>下图展示了频道channel1，以及订阅这个频道的三个客户端client1、client2和client3之间的关系：</p><img src="image-20230822173148634.png" alt="image-20230822173148634" style="zoom: 80%;" /><p>当有新消息通过publish命令发送给频道channel1时，这个消息就会被发送给订阅它的三个客户端：</p><img src="image-20230603115322598.png" alt="image-20230603115322598" style="zoom:80%;" /><p><strong>示例</strong></p><p>开启本地Redis服务，开启两个redis-cli客户端。</p><p>在第一个redis-cli客户端输入<code>subscribe chat1</code>，表示订阅chat1频道。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe chat1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span> <span class="comment"># 返回值的类型：显示订阅成功</span></span><br><span class="line">2) <span class="string">&quot;chat1&quot;</span>     <span class="comment"># 订阅的频道名称</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1 <span class="comment"># 目前已订阅的频道数量</span></span><br></pre></td></tr></table></figure><p>在第二个redis-cli客户端输入<code>publish chat1 &quot;Hello&quot;</code>，表示向chat1频道发送消息，这个时候在第一个redis-cli客户端就能看到由第二个redis-cli客户端发送的测试消息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish chat1 <span class="string">&quot;Hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; publish chat1 <span class="string">&quot;How are you?&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 订阅者的客户端会显示如下消息</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span> <span class="comment"># 返回值的类型：信息</span></span><br><span class="line">2) <span class="string">&quot;chat1&quot;</span>   <span class="comment"># 来源：从哪个频道发送过来</span></span><br><span class="line">3) <span class="string">&quot;Hello&quot;</span>   <span class="comment"># 信息内容</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;chat1&quot;</span></span><br><span class="line">3) <span class="string">&quot;How are you?&quot;</span></span><br></pre></td></tr></table></figure><p><strong>常用命令</strong></p><ul><li><p>subscribe channel [channel …]：订阅一个或多个频道。</p></li><li><p>unsubscribe [channel [channel …]]：退订一个或多个频道。</p></li><li><p>publish channel message：将信息发送到指定的频道，返回接收到信息message的订阅者数量。</p></li><li><p>psubscribe pattern [pattern …]：订阅一个或多个符合给定模式的频道。</p><blockquote><p>每个模式以<code>*</code>作为匹配符，比如<code>it*</code>匹配所有以it开头的频道。</p></blockquote></li><li><p>punsubscribe [pattern [pattern …]]：退订所有给定模式的频道。</p></li></ul><h2 id="Jedis操作Redis"><a href="#Jedis操作Redis" class="headerlink" title="Jedis操作Redis"></a>Jedis操作Redis</h2><p>Jedis是java开发的操作redis的工具包，使用步骤如下：</p><ol><li><p>新建maven项目，导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisDemo</span> &#123;</span><br><span class="line">    Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.jedis = <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;47.115.202.83&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试redis是否连通</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ping</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">        System.out.println(ping);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  运行test1方法测试redis是否连通。</p><blockquote><p>注意：linux下安全组需要开放<code>6379</code>端口，并且防火墙也要允许该端口通过。</p><p>下方为运行过程中出现的错误：</p><ol><li><p>报错信息：<code>redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients.</code></p><p>Redis .clients.jedis.exceptions. jedisdataexception: DENIED Redis运行在保护模式下，因为启用了保护模式，没有指定绑定地址，也没有向客户端请求认证密码。在这种模式下，只接受来自loopback接口的连接。如果你想从外部计算机连接到Redis，你可以采用以下解决方案之一：</p><ul><li>通过从服务器运行的同一主机连接到Redis，从loopback接口发送命令’CONFIG SET protected-mode no’来禁用保护模式，但是确保Redis不能从互联网公开访问，如果你这样做的话。使用CONFIG REWRITE使此更改永久生效。</li><li>或者你可以通过编辑Redis配置文件禁用保护模式，并将保护模式选项设置为“no”，然后重新启动服务器。</li><li>如果你手动启动服务器只是为了测试，用“——protected-mode no”选项重新启动它。</li><li>设置绑定地址或认证密码。注意:为了让服务器开始接受来自外部的连接，您只需要执行上述一项操作。</li></ul><p>注意：您只需执行上述操作之一，服务器就可以开始接受来自外部的连接。</p><p>解决方法：修改redis配置文件redis.conf，将<code>protected-mode yes</code>改为<code>protected-mode no</code>，并重启redis，注意启动时需要<code>指定配置文件</code>。</p><img src="image-20230818183649564.png" alt="image-20230818183649564"/></li><li><p>报错信息：<code>redis.clients.jedis.exceptions.JedisConnectionException: Failed to connect to any host resolved for DNS name.</code></p><p>原因：redis的bing配置项存在问题。</p><p>解决方法：在配置文件redis.conf中找到bind配置项，将<code>bind 127.0.0.1</code>改为<code>bind 0.0.0.0</code>，前者表示只允许本机访问，后者表示所有电脑均可访问。修改后需要重启redis。</p><img src="image-20230818183757888.png" alt="image-20230818183757888"/></li></ol></blockquote></li><li><p>编写其他测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String类型测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stringTest</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.println(jedis.ttl(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list类型测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listTest</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.rpush(<span class="string">&quot;courses&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;python&quot;</span>);</span><br><span class="line">    List&lt;String&gt; courses = jedis.lrange(<span class="string">&quot;courses&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String course : courses) &#123;</span><br><span class="line">        System.out.println(course);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set类型测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTest</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.sadd(<span class="string">&quot;users&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; users = jedis.smembers(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hash类型测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashTest</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;001&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">    Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Zset类型测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zsetTest</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.zadd(<span class="string">&quot;languages&quot;</span>, <span class="number">100</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;languages&quot;</span>, <span class="number">80</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;languages&quot;</span>, <span class="number">70</span>, <span class="string">&quot;python&quot;</span>);</span><br><span class="line">    List&lt;String&gt; languages = jedis.zrange(<span class="string">&quot;languages&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(languages);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅消息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribeTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// subscribe(消息监听器, 频道列表)</span></span><br><span class="line">    jedis.subscribe(<span class="keyword">new</span> <span class="title class_">JedisPubSub</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String channel, String message)</span> &#123;</span><br><span class="line">            System.out.println(channel + <span class="string">&quot;：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;chat1&quot;</span>);</span><br><span class="line">    TimeUnit.HOURS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishTest</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.publish(<span class="string">&quot;chat1&quot;</span>, <span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Spring-Boot整合Redis"><a href="#Spring-Boot整合Redis" class="headerlink" title="Spring Boot整合Redis"></a>Spring Boot整合Redis</h2><p>新建Spring Boot项目，导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建配置文件application.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># redis服务器ip地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.115</span><span class="number">.202</span><span class="number">.83</span></span><br><span class="line">    <span class="comment"># redis服务器端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># redis密码</span></span><br><span class="line">    <span class="comment"># password: root</span></span><br><span class="line">    <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">60000</span></span><br><span class="line">    <span class="comment"># redis默认情况下有16个分片，这里配置具体使用的分片，默认为0</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>编写启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建控制器RedisController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring Boot中使用RedisTemplate来操作redis</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用下面5个对象来操作对应的类型</span></span><br><span class="line">redisTemplate.opsForValue(); <span class="comment">// 提供了操作string类型的所有方法</span></span><br><span class="line">redisTemplate.opsForList();  <span class="comment">// 提供了操作list类型的所有方法</span></span><br><span class="line">redisTemplate.opsForSet();   <span class="comment">// 提供了操作set的所有方法</span></span><br><span class="line">redisTemplate.opsForHash();  <span class="comment">// 提供了操作hash表的所有方法</span></span><br><span class="line">redisTemplate.opsForZSet();  <span class="comment">// 提供了操作zset的所有方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/stringTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">StringTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">listTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;courses&quot;</span>);</span><br><span class="line">        redisTemplate.opsForList().rightPushAll(<span class="string">&quot;courses&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;python&quot;</span>);</span><br><span class="line">        List&lt;String&gt; courses = redisTemplate.opsForList().range(<span class="string">&quot;courses&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/setTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">setTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">        redisTemplate.opsForSet().add(<span class="string">&quot;users&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; users = redisTemplate.opsForSet().members(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hashTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hashTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        Map&lt;String , String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;001&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        redisTemplate.opsForHash().putAll(<span class="string">&quot;user&quot;</span>, map);</span><br><span class="line">        Map&lt;Object, Object&gt; user = redisTemplate.opsForHash().entries(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/zsetTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">zsetTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;languages&quot;</span>);</span><br><span class="line">        redisTemplate.opsForZSet().add(<span class="string">&quot;languages&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        redisTemplate.opsForZSet().add(<span class="string">&quot;languages&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="number">90</span>);</span><br><span class="line">        redisTemplate.opsForZSet().add(<span class="string">&quot;languages&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="number">80</span>);</span><br><span class="line">        Set&lt;String&gt; languages = redisTemplate.opsForZSet().range(<span class="string">&quot;languages&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> languages;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解方式使用Redis缓存"><a href="#注解方式使用Redis缓存" class="headerlink" title="注解方式使用Redis缓存"></a>注解方式使用Redis缓存</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>创建Spring Boot空项目，依赖如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?userUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>创建实体类Student</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> String sno;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Mapper接口StudentMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写StudentService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Student&gt; &#123;</span><br><span class="line">    Student <span class="title function_">selectBySno</span><span class="params">(String sno)</span>;</span><br><span class="line"></span><br><span class="line">    Student <span class="title function_">updateStudent</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">(String sno)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写StudentService实现了StudentServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;StudentMapper, Student&gt; <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">selectBySno</span><span class="params">(String sno)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectById(sno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">updateStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        studentMapper.updateById(student);</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectById(student.getSno());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">(String sno)</span> &#123;</span><br><span class="line">        studentMapper.deleteById(sno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写配置类MyConfig</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.redis.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetStudentBySno</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentService.selectBySno(<span class="string">&quot;19100101&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setSno(<span class="string">&quot;19100101&quot;</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;张三_new&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">updateStudent</span> <span class="operator">=</span> studentService.updateStudent(student);</span><br><span class="line">        System.out.println(updateStudent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDeleteStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        studentService.deleteStudent(<span class="string">&quot;19100101&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h3><p>常用的注解有以下几个：<code>@Cacheable</code>、<code>@CachePut</code>、<code>@CacheEvict</code>，主要参数如下：</p><ul><li><p>value：缓存的名称，必须指定至少一个。</p><p>示例：<code>@Cacheable(value = ”mycache”)</code>或<code>@Cacheable(value = &#123;”cache1”, ”cache2”&#125;</code></p><blockquote><p>注意：<code>value</code>与<code>cacheNames</code>互为别名，因此使用<code>value</code>或是<code>cacheNames</code>均可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Cacheable &#123;</span><br><span class="line"> <span class="meta">@AliasFor(&quot;cacheNames&quot;)</span></span><br><span class="line"> String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line"> String[] cacheNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"> String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>key：缓存的<code>key</code>，可以为空，如果指定要按照<code>SpEL</code>表达式编写，如果不指定，则缺省按照方法的所有参数进行组合。</p><p>示例：<code>@Cacheable(value = ”testcache”, key = ”#id”)</code></p></li><li><p>condition：缓存的条件，可以为空，使用<code>SpEL</code>编写，返回<code>true</code>或<code>false</code>，只有为<code>true</code>才进行缓存&#x2F;清除缓存。</p><p>示例：<code>@Cacheable(value = ”testcache”, condition = ”#userName.length() &gt; 2”)</code></p></li><li><p>unless：否定缓存。当条件结果为<code>true</code>时，就不会缓存。</p><p>示例：<code>@Cacheable(value = ”testcache”, unless = ”#userName.length() &gt; 2”)</code></p></li><li><p>allEntries（<code>@CacheEvict</code> ）：是否清空所有缓存内容，缺省为<code>false</code>，如果指定为<code>true</code>，则方法调用后将立即清空所有缓存。</p><p>示例：<code>@CachEvict(value = ”testcache”, allEntries = true)</code></p></li><li><p>beforeInvocation（<code>@CacheEvict</code>）：是否在方法执行前就清空，缺省为false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存。</p><p>示例：<code>@CachEvict(value = ”testcache”, beforeInvocation = true)</code></p></li></ul><p><code>SpEL</code>上下文数据</p><table><thead><tr><th>名称</th><th>位置</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>methodName</td><td>root对象</td><td>当前被调用的方法名</td><td>#root.methodname</td></tr><tr><td>method</td><td>root对象</td><td>当前被调用的方法</td><td>#root.method.name</td></tr><tr><td>target</td><td>root对象</td><td>当前被调用的目标对象实例</td><td>#root.target</td></tr><tr><td>targetClass</td><td>root对象</td><td>当前被调用的目标对象的类</td><td>#root.targetClass</td></tr><tr><td>args</td><td>root对象</td><td>当前被调用的方法的参数列表</td><td>#root.args[0]</td></tr><tr><td>caches</td><td>root对象</td><td>当前方法调用使用的缓存列表</td><td>#root.caches[0].name</td></tr><tr><td>Argument Name</td><td>执行上下文</td><td>当前被调用的方法的参数，如<code>findArtisan(Artisan artisan)</code>可以通过<code>#artsian.id</code>获得参数</td><td>#artsian.id</td></tr><tr><td>result</td><td>执行上下文</td><td>方法执行后的返回值（仅当方法执行后的判断有效，如<code>unless</code>、<code>@cacheEvict</code>的<code>beforeInvocation=false</code>）</td><td>#result</td></tr></tbody></table><blockquote><p>注意：</p><ol><li><p>当我们要使用<code>root</code>对象的属性作为<code>key</code>时，我们也可以将“<code>#root</code>”省略，因为<code>Spring</code>默认使用的就是<code>root</code>对象的属性。</p><p>例如：<code>@Cacheable(key = &quot;targetClass + methodName + #p0&quot;)</code></p></li><li><p>使用方法参数时我们可以直接使用“<code>#参数名</code>”或者“<code>#p参数index</code>”。</p><p>例如：</p><ul><li><code>@Cacheable(value=&quot;users&quot;, key=&quot;#id&quot;)</code></li><li><code>@Cacheable(value=&quot;users&quot;, key=&quot;#p0&quot;)</code></li></ul></li></ol></blockquote><p><code>SpEL</code>提供了多种运算符：</p><table><thead><tr><th>类型</th><th>运算符</th></tr></thead><tbody><tr><td>关系</td><td><code>&lt;，&gt;，&lt;=，&gt;=，==，!=，lt，gt，le，ge，eq，ne</code></td></tr><tr><td>算术</td><td><code>+，- ，* ，/，%，^</code></td></tr><tr><td>逻辑</td><td>&#96;&amp;&amp;，</td></tr><tr><td>条件</td><td><code>?: (ternary)，?: (elvis)</code></td></tr><tr><td>正则表达式</td><td><code>matches</code></td></tr><tr><td>其他类型</td><td><code>?.，?[…]，![…]，^[…]，$[…]</code></td></tr></tbody></table><h3 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加Redis配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># redis服务器ip地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.43</span><span class="number">.178</span><span class="number">.226</span></span><br><span class="line">    <span class="comment"># redis服务器端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># redis密码</span></span><br><span class="line">    <span class="comment"># password: root</span></span><br><span class="line">    <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">60000</span></span><br><span class="line">    <span class="comment"># redis默认情况下有16个分片，这里配置具体使用的分片，默认为0</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>在启动类上添加<code>@EnableCaching</code>注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">// 开启基于注解的缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RedisApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改实体类Student，实现<code>Serializable</code>接口，进行序列化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> String sno;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置类MyConfig</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.redis.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; stringRedisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">genericJackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解决cache(@Cacheable)把数据缓存到redis中的value是乱码问题</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        <span class="comment">// 分别创建String和JSON格式序列化对象，对缓存数据的key和value进行转换</span></span><br><span class="line">        RedisSerializer&lt;String&gt; serializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">genericJackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定制缓存数据序列化方式和时效</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofHours(<span class="number">2</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(serializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(genericJackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line"></span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory).cacheDefaults(config).build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加缓存"><a href="#添加缓存" class="headerlink" title="添加缓存"></a>添加缓存</h4><p>修改StudentServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;StudentMapper, Student&gt; <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;student&quot; ,key = &quot;&#x27;Student_&#x27; + #sno&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">selectBySno</span><span class="params">(String sno)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectById(sno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：缓存的值为方法返回值。若方法无返回值，则缓存值为<code>org.springframework.cache.support.NullValue</code>。</p></blockquote><p>执行testGetStudentBySno方法，进入<code>Linux Redis</code>服务查看缓存结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZbp13q6vsoi3olxdbo7syZ src]<span class="comment"># ./redis-cli --raw</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">student::Student_19100101</span><br><span class="line">127.0.0.1:6379&gt; get student::Student_19100101</span><br><span class="line">&#123;<span class="string">&quot;@class&quot;</span>:<span class="string">&quot;com.example.redis.entity.Student&quot;</span>,<span class="string">&quot;sno&quot;</span>:<span class="string">&quot;19100101&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：若执行的是<code>./redis-cli</code>命令，结果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZbp13q6vsoi3olxdbo7syZ src]<span class="comment"># ./redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; get student::Student_19100101</span><br><span class="line"><span class="string">&quot;&#123;\&quot;@class\&quot;:\&quot;com.example.redis.entity.Student\&quot;,\&quot;sno\&quot;:\&quot;19100101\&quot;,\&quot;name\&quot;:\&quot;\xe5\xbc\xa0\xe4\xb8\x89\&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>再次执行testGetStudentBySno方法，控制台直接输出对应学生信息，而未执行<code>SQL</code>语句，证明缓存生效。</p><h4 id="更新缓存"><a href="#更新缓存" class="headerlink" title="更新缓存"></a>更新缓存</h4><p>修改StudentServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;StudentMapper, Student&gt; <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CachePut(value = &quot;student&quot; ,key = &quot;&#x27;Student_&#x27; + #student.sno&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">updateStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        studentMapper.updateById(student);</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectById(student.getSno());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li><code>@CachePut</code>的<code>value</code>和<code>key</code>要跟<code>@Cacheable</code>中的一致，这样才能正确更新。</li><li><code>@CachePut</code>和<code>@Cacheable</code>注解的方法返回值要一致。</li></ul></blockquote><p>执行testUpdateStudent方法，进入<code>Linux Redis</code>服务查看缓存结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZbp13q6vsoi3olxdbo7syZ src]<span class="comment"># ./redis-cli --raw</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">student::Student_19100101</span><br><span class="line">127.0.0.1:6379&gt; get student::Student_19100101</span><br><span class="line">&#123;<span class="string">&quot;@class&quot;</span>:<span class="string">&quot;com.example.redis.entity.Student&quot;</span>,<span class="string">&quot;sno&quot;</span>:<span class="string">&quot;19100101&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三_new&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="删除缓存"><a href="#删除缓存" class="headerlink" title="删除缓存"></a>删除缓存</h4><p>修改StudentServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;StudentMapper, Student&gt; <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CacheEvict(value = &quot;student&quot; ,key = &quot;&#x27;Student_&#x27; + #sno&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">(String sno)</span> &#123;</span><br><span class="line">        studentMapper.deleteById(sno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行testDeleteStudent方法，进入<code>Linux Redis</code>服务查看缓存结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZbp13q6vsoi3olxdbo7syZ src]<span class="comment"># ./redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p><code>cacheNames</code>可以统一写在类上面，这样方法上就不用再次声明。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;StudentMapper, Student&gt; <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;&#x27;Student_&#x27; + #sno&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">selectBySno</span><span class="params">(String sno)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectById(sno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CachePut(key = &quot;&#x27;Student_&#x27; + #student.sno&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">updateStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        studentMapper.updateById(student);</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectById(student.getSno());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;Student_&#x27; + #sno&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">(String sno)</span> &#123;</span><br><span class="line">        studentMapper.deleteById(sno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务介绍"><a href="#事务介绍" class="headerlink" title="事务介绍"></a>事务介绍</h3><p>Redis事务可以一次执行多个命令，并且带有以下三个重要保证：</p><ul><li>批量操作在发送exec命令前被放入队列缓存。</li><li>收到exec命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ul><p>一个事务从开始到执行会经历三个阶段：开始事务、命令入队、执行事务。</p><p>以下是一个事务的例子，它先以<code>multi</code>开始一个事务，然后将多个命令入队到事务中，最后由<code>exec</code>命令触发事务，一并执行事务中的所有命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> book-name <span class="string">&quot;Mastering C++ in 21 days&quot;</span></span><br><span class="line">QUEUED <span class="comment"># 返回值为QUEUED，表示这个命令加入队列，但还没有被执行。</span></span><br><span class="line">127.0.0.1:6379&gt; get book-name</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; sadd tag <span class="string">&quot;java&quot;</span> <span class="string">&quot;python&quot;</span> <span class="string">&quot;c++&quot;</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; smembers tag</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) <span class="string">&quot;Mastering C++ in 21 days&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 3</span><br><span class="line">4) 1) <span class="string">&quot;java&quot;</span></span><br><span class="line">   2) <span class="string">&quot;c++&quot;</span></span><br><span class="line">   3) <span class="string">&quot;python&quot;</span></span><br></pre></td></tr></table></figure><p>单个Redis命令的执行是原子性的，但Redis没有在事务上增加任何维持原子性的机制，所以<code>Redis事务的执行并不是原子性的</code>。</p><p>事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</p><blockquote><p>官网说明：<a href="https://redis.io/docs/manual/transactions/">https://redis.io/docs/manual/transactions/</a></p><p>It’s important to note that even when a command fails, all the other commands in the queue are processed – Redis will not stop the processing of commands.</p><p>译文：需要注意的是，即使一个命令失败，队列中的其他命令都会被处理——Redis不会停止对命令的处理。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 a</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby key1 2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">4) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><ul><li><p>multi：标记一个事务块的开始。</p></li><li><p>exec：执行所有事务块内的命令。</p><blockquote><p>假如某个（或某些）key正处于watch命令的监视之下，且事务块中有和这个（或这些）key相关的命令，那么exec命令只在这个（或这些）key没有被其他命令所改动的情况下执行并生效，否则该事务被打断（abort）。当操作被打断时，返回空值nil。</p></blockquote></li><li><p>discard：取消事务，放弃执行事务块内的所有命令。</p></li><li><p>watch key [key …]：监视一个（或多个）key，如果在事务执行之前这个（或这些）key被其他命令所改动，那么事务将被打断。</p><p>开启2个窗口，按照下表的时间点在不同的窗口执行对应的命令，观察结果。</p><table><thead><tr><th>时刻</th><th>窗口1</th><th>窗口2</th></tr></thead><tbody><tr><td>T1</td><td>flushdb</td><td></td></tr><tr><td>T2</td><td>set balance 100</td><td></td></tr><tr><td>T3</td><td>watch balance</td><td></td></tr><tr><td>T4</td><td>multi</td><td></td></tr><tr><td>T5</td><td>set name zs</td><td>incrby balance 50</td></tr><tr><td>T6</td><td>incrby balance 10</td><td>get balance</td></tr><tr><td>T7</td><td>exec</td><td></td></tr><tr><td>T8</td><td>get balance</td><td></td></tr><tr><td>T9</td><td>get name</td><td></td></tr></tbody></table><p>窗口1中对balance进行了监视，也就是说在执行watch balance命令之后，在exec命令之前，如果有其他请求对balance进行了修改，那么窗口1事务中所有的命令都会将会被取消执行。</p><p>窗口1watch balance后，由于T5时刻窗口2对balance进行了修改，导致窗口1中事务所有命令被取消执行。</p><p>窗口1执行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> balance 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch balance</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name zs</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby balance 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行事务，由于balance被窗口2修改了，所以本事务执行失败，返回nil</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get balance <span class="comment"># 获取balance，原始值为100，被窗口2加了50，结果为150</span></span><br><span class="line"><span class="string">&quot;150&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get name <span class="comment"># 获取name的值，事务中set name未成功，所以不存在name</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>窗口2执行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; incrby balance 50</span><br><span class="line">(<span class="built_in">integer</span>) 150</span><br><span class="line">127.0.0.1:6379&gt; get balance</span><br><span class="line"><span class="string">&quot;150&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>unwatch：取消watch命令对所有key的监视。</p><blockquote><p>如果在执行WATCH命令之后， EXEC命令或DISCARD命令先被执行了的话，那么就不需要再执行UNWATCH了。</p><p>因为EXEC命令会执行事务，因此WATCH命令的效果已经产生了；而DISCARD命令在取消事务的同时也会取消所有对key的监视，因此这两个命令执行之后，就没有必要执行UNWATCH了。</p></blockquote></li></ul><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p><strong>入队阶段命令有误，导致所有命令取消执行</strong></p><p>入队阶段某个命令出现了错误报告，执行时整个队列中所有的命令都会被取消。</p><p>示例代码如下，事务中执行了3个set命令，而第3个命令set address本身存在问题，加入队列失败，最后执行exec的时候，所有的命令都被取消执行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name zs</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> address <span class="comment"># 命令存在问题，导致加入队列失败</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;set&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行exec的时候，事务中所有命令都被取消</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure><p><strong>入队中没有问题，执行中部分成功部分失败</strong></p><p>命令入队的过程没有问题，执行中出现了错误会导致部分成功部分失败。</p><p>示例代码如下，事务中有3个命令，3个命令都入队成功，执行exec命令时1和3命令成功，2命令失败。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1 <span class="comment"># k1的值递增1，但由于k1的值不是数字，执行失败</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">3) OK</span><br></pre></td></tr></table></figure><h3 id="事务冲突"><a href="#事务冲突" class="headerlink" title="事务冲突"></a>事务冲突</h3><p>想象一个场景：你的账户中只有10000，有多个人使用你的账户，同时去参加双十一抢购</p><ul><li>一个请求想给金额减8000</li><li>一个请求想给金额减5000</li><li>一个请求想给金额减1000</li></ul><img src="image-20240115104634691.png" alt="image-20240115104634691" style="zoom:80%;" /><p>3个请求同时到来，看到的余额都是10000，大于操作金额，都去执行修改余额的操作，最后导致金额变成了-4000，这显然是有问题的。</p><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><img src="image-20240115112016020.png" alt="image-20240115112016020" style="zoom:80%;" /><p>悲观锁（Pessimistic Lock），顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人拿到这个数据就会block，直到它拿到锁。传统的关系型数据库里面就用到了很多这种锁机制，比如行锁、表锁、读锁、写锁等，都是在做操作之前先上锁。</p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><img src="image-20240115111833667.png" alt="image-20240115111833667" style="zoom:80%;" /><p>乐观锁（Optimistic Lock），顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在修改的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。redis就是使用这种check-and-set机制实现事务的。</p><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><p>Redis是一个基于内存的数据库，它的数据存放在内存中，内存有个问题就是关闭服务或者断电会丢失。</p><p>Redis的数据也支持写到硬盘中，这个过程就叫做持久化。Redis提供了2种不同形式的持久化方式：</p><ul><li>RDB（Redis DataBase）</li><li>AOF（Append Of File）</li></ul><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p><strong>RDB是什么？</strong></p><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。</p><p><strong>备份如何执行？</strong></p><p>Redis会单独创建（fork）一个子进程进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束后，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就是确保了极高的性能，如果需要进行大规模的恢复，且对数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p><p><strong>Fork</strong></p><p>Fork的作用是复制一个与当前进程一样的进程，新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，它是一个全新的进程，并作为原进程的子进程。</p><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用。出于效率考虑，linux中引入了“写时复制技术”。</p><p>一般情况父进程和子进程会共用一段物理内存，只有进程空间的各段内容要发生变化时，才会将父进程的内容复制一份给子进程。</p><p><strong>RDB持久化流程</strong></p><img src="image-20230819080858365.png" alt="image-20230819080858365" style="zoom: 67%;" /><p><strong>指定备份文件的名称</strong></p><p>在redis.conf中，可以修改RDB备份文件的名称，默认为dump.rdb，如下：</p><img src="image-20230819081747422.png" alt="image-20230819081747422"/><p><strong>指定备份文件存放的目录</strong></p><p>在redis.conf中，RDB文件的保存目录是可以修改的，默认为Redis启动命令所在的目录，如下：</p><img src="image-20230819081621272.png" alt="image-20230819081621272"/><p><strong>触发RDB备份</strong></p><ol><li><p>自动备份，需配置备份规则</p><p>可在redis.conf中配置自动备份的规则，默认规则如下：</p><img src="image-20230819101137303.png" alt="image-20230819101137303"/><p>save用来配置备份的规则，格式：<code>save 秒钟 写操作次数</code>。默认为1分钟内修改了1万次，或5分钟内修改了10次，或15分钟内修改了1次。</p><p>示例：设置20秒内最少有3次key发生变化，则进行备份。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save 20 3</span><br></pre></td></tr></table></figure></li><li><p>手动执行命令备份</p><p>有2个命令可以触发备份：</p><ul><li>save：只管保存，其他不管，全部阻塞，手动保存，不建议使用。</li><li>bgsave：redis会在后台异步进行快照操作，快照同时还可以响应客户端情况。</li></ul><blockquote><p>可以通过<code>lastsave</code>命令获取最后一次成功生成快照的时间。</p></blockquote></li><li><p>flushall命令</p><p>执行flushall命令也会产生dump.rdb文件，但里面是空的，无意义。</p></li></ol><p><strong>redis.conf其他一些配置</strong></p><ul><li><p>stop-writes-on-bgsave-error：当磁盘满时是否关闭redis的写操作</p><blockquote><p>stop-writes-on-bgsave-error用来指定当redis无法写入磁盘的话，是否直接关掉redis的写操作，推荐yes。</p></blockquote><img src="image-20230819101809204.png" alt="image-20230819101809204"/></li><li><p>rdbcompression：rdb备份是否开启压缩</p><blockquote><p>对于存储到磁盘中的rdb快照文件，可以设置是否进行压缩，如果是的话，redis会采用LZF算法进行压缩。</p><p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能，推荐yes。</p></blockquote><img src="image-20230819101949180.png" alt="image-20230819101949180"/></li><li><p>rdbchecksum：是否检查rdb备份文件的完整性</p><blockquote><p>存储快照后还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取最大的性能提升，可以关闭此功能。推荐yes。</p></blockquote><img src="image-20230819102116498.png" alt="image-20230819102116498"/></li></ul><p><strong>RDB的备份和恢复</strong></p><p>先通过config get dir查询rdb文件的目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get <span class="built_in">dir</span></span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/home/llc/redis-6.0.8/src&quot;</span></span><br></pre></td></tr></table></figure><p>然后将rdb的备份文件*.rdb文件拷贝到别的地方</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> dump.rdb dump2.rdb</span><br></pre></td></tr></table></figure><p>rdb的恢复</p><ul><li>关闭redis</li><li>先把备份的文件拷贝到工作目录cp dump2.rdb dump.rdb</li><li>启动redis，备份数据直接加载，数据被恢复</li></ul><p><strong>优势</strong></p><ul><li>适合大规模数据恢复</li><li>对数据完整性和一致性要求不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul><img src="image-20230819103122856.png" alt="image-20230819103122856" style="zoom:80%;" /><p><strong>劣势</strong></p><ul><li>Fork的时候内存中的数据会被克隆一份，大致2倍的膨胀，需要考虑</li><li>虽然Redis在fork的时候使用了写时拷贝技术，但是如果数据庞大时还是比较消耗性能</li><li>在备份周期内一定间隔时间做一次备份，否则如果Redis意外宕机，就会丢失最后一次快照后所有修改</li></ul><p><strong>如何停止RDB？</strong></p><p>动态停止RDB：<code>redis-cli config set save &quot;&quot;</code>。save后给空值表示禁用保存策略。</p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p><strong>AOF是什么？</strong></p><p>以日志的形式来记录每个写操作（增量保存），将redis执行过的所有写指令记录下来（读操作不记录），只允追加文件但不可改写文件，redis启动之初会读取该文件重新构造数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p><strong>AOF持久化流程</strong></p><ul><li>客户端的请求写命令会被追加（append）到AOF缓冲区内</li><li>AOF缓冲区会根据AOF持久化策略[always, everysec, no]将操作同步（sync）到磁盘的AOF文件中</li><li>AOF文件大小超过重写策略或手动重写时，会对AOF文件进行重写（rewrite），压缩AOF文件容量</li><li>redis服务器重启时，会重新加载（load）AOF文件中的写操作达到数据恢复的目的</li></ul><img src="image-20230819104459504.png" alt="image-20230819104459504" style="zoom:80%;" /><p><strong>AOF默认不开启</strong></p><p>可以在redis.conf文件中对AOF进行配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendonly no # 是否开启AOF，yes：开启，no：不开启，默认为no</span><br><span class="line">appendfilename &quot;appendonly.aof&quot; # aof文件名称，默认为appendonly.aof</span><br><span class="line">dir ./ # aof文件所在目录，默认./，表示执行启动命令时所在的目录</span><br><span class="line"># 比如我们在/opt目录中，去执行redis-server /etc/redis.conf来启动redis，那么dir此时就是/opt目录</span><br></pre></td></tr></table></figure><p><strong>AOF和RDB同时开启，redis听谁的？</strong></p><p>AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</p><p><strong>AOF启动&#x2F;修复&#x2F;恢复</strong></p><p>AOF的备份机制和性能虽然和RDB不同，但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。</p><p>正常恢复</p><ul><li>修改默认的appendonly no，改为yes</li><li>将有数据的aof文件复制一份保存到对应的目录（查看目录：<code>config get dir</code>）</li><li>恢复：重启redis然后重新加载</li></ul><p>异常恢复</p><ul><li>修改默认的appendonly no，改为yes</li><li>如遇到aof文件损坏，通过<code>/usr/local/bin/redis-check-aof --fix appendonly.aof</code>进行恢复</li></ul><p><strong>AOF同步频率设置</strong></p><p>可以在redis.config中配置AOF同步的频率</p><img src="image-20230819105357855.png" alt="image-20230819105357855"/><ul><li><p>appendfsync always：每次写入立即同步</p><p>始终同步，每次redis的写入都会立刻记入日志；性能较差但数据完整性比较好。</p></li><li><p>appendfsync everysec：每秒同步</p><p>每秒同步，每秒记录日志一次，如果宕机，本秒数据可能丢失；更新的命令会放在内存中AOF缓冲区，每秒将缓冲区的命令追加到AOF文件</p></li><li><p>appendfsync no：不主动同步</p><p>redis不主动进行同步，把同步交给操作系统。</p></li></ul><p><strong>rewrite压缩（AOF文件压缩）</strong></p><ul><li><p>rewrite压缩是什么？</p><p>AOF采用文件追加方式，文件会越来越大，为了避免出现此情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用命令bgrewriteaof触发重写。</p></li><li><p>重写原理，如何实现重写？</p><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件，最后在rename替换旧文件），redis4.0版本后的重写，是指就把rdb的快照，以二进制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</p></li><li><p>触发机制，何时重写？</p><ul><li><p>bgrewriteaof：手动触发重写</p><p>从Redis 2.4开始， AOF重写由Redis自行触发，bgrewriteaof仅仅用于手动触发重写操作。</p><p>redis会记录上次重写的aof大小，默认配置是当aof文件大小是上次rewrite后大小的2倍且文件大于64M时触发。</p><p>重写虽然可以节约大量磁盘空间，减少恢复时间，但是每次重写还是有一定负担的，因此设置redis满足一定条件才会进行重写。</p></li><li><p>auto-aof-rewrite-percentage：设置重写基准值</p><p>设置重写的基准值，默认100，当文件达到100%时开始重写（文件是原来重写后文件的2倍时重写）。</p></li><li><p>auto-aof-rewrite-min-size：设置重写基准值</p><p>设置重写的基准值，默认64MB，AOF文件大小超过这个值开始重写。</p></li></ul><p>举个例子：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？ &#x3D;&gt; 100MB</p><p>系统载入时或者上次重写完毕时，redis会记录此时AOF大小，设置base_size。</p><p>如果Redis的AOF当前大小 &gt;&#x3D; base_size + base_size * 100%（auto-aof-rewrite-percentage默认值）且当前大小 &gt;&#x3D; 64mb（auto-aof-rewrite-min-size默认值）的情况下，redis会对AOF进行重写。</p></li><li><p>重写流程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bgrewriteaof</span><br><span class="line">Background append only file rewriting started</span><br></pre></td></tr></table></figure><ul><li>手动执行bgrewriteaof命令触发重写，判断是否当前有bgfsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</li><li>主进程fork出子进程执行重写操作，保证主进程不会阻塞。</li><li>子进程遍历redis内存中的数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整性以及新AOF文件生成期间的新的数据修改动作不会丢失。</li><li>子进程写完新的AOF文件后，向主进程发送信号，父进程更新统计信息。</li><li>主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</li><li>使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</li></ul><img src="image-20230819110314008.png" alt="image-20230819110314008"/></li><li><p>no-appendfsync-on-rewrite：重写时，不会执行appendfsync操作</p><p>该参数表示在正在进行AOF重写时不会将AOF缓冲区中的数据同步到旧的AOF文件磁盘，也就是说在进行AOF重写的时候，如果此时有写操作进来，此时写操作的命令会放在aof_buf缓存中（内存中），而不会将其追加到旧的AOF文件中，这么做是为了避免同时写旧的AOF文件和新的AOF文件对磁盘产生的压力。</p><p>默认是ON，表示关闭，即在AOF重写时，会对AOF缓冲区中的数据做同步磁盘操作，这在很大程度上保证了数据的安全性。</p><p>但在数据量很大的场景，因为两者都会消耗磁盘IO，对磁盘的影响较大，可以将其设置为“yes”减轻磁盘压力，但在极端情况下可能丢失整个AOF重写期间的数据。</p><p>如果no-appendfsync-on-rewrite为yes，不写入aof文件，只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</p><p>如果no-appendfsync-on-rewrite为no，还是会把数据库往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p></li></ul><p><strong>优势</strong></p><ul><li>备份机制更稳健，丢失数据概率更低</li><li>可读的日志文本，通过操作AOF文件，可以处理误操作</li></ul><p><strong>劣势</strong></p><ul><li>比RDB占用更多的磁盘空间</li><li>恢复备份速度要慢</li><li>每次读写都同步的话，有一定的性能压力</li><li>存在个别bug，造成不能恢复</li></ul><p><strong>总结</strong></p><ul><li>AOF文件是一个只进行追加的日志文件</li><li>Redis可以在AOF文件体积变得过大时，自动地在后台对AOF文件进行重写</li><li>AOF文件有序地保存了对数据库执行的所有写入操作，这些写入操作以redis协议的格式保存，因此AOF文件的内容非常容易被人读懂，对文件进行分析也很轻松。</li><li>对于相同的数据集来说，AOF文件的体积通常要大于RDB文件的体积</li><li>根据所使用的fsync策略，AOF的速度可能会慢于RDB</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>使用建议</strong></p><p>官方推荐2个都启用。如果对数据不敏感，可以单独用RDB。不建议单独使用AOF，因为可能会出现BUG。如果只是做纯内存缓存，可以都不用。</p><p><strong>官网建议</strong></p><ul><li><p>RDB持久化方式能够在指定的时间间隔对数据进行快照存储</p></li><li><p>AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始数据，AOF命令以redis协议追加保存每次写的操作到AOF文件末尾</p></li><li><p>Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大</p></li><li><p>只做缓存：如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式</p></li><li><p>同时开启两种持久化方式</p><p>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整</p></li><li><p>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要只是用AOF呢？</p><p>建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段</p></li><li><p>性能建议</p><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留<code>save 900 1</code>这一条</li><li>如果使用AOF，好处是在最恶劣的情况下也只会丢失不超过两秒数据，启动脚本较简单，只load自己的AOF文件就可以了</li><li>AOF的代价，一是带来持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据（aof_rewrite_buf）写到文件造成的阻塞几乎是不可避免的</li><li>只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基数大小默认值64M（autoaof-rewrite-min-size）太小了，可以设置到5G以上</li><li>默认超过原大小100%（auto-aof-rewrite-percentage）大小时重写可以改到适当的数值。</li></ul></li></ul><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>主机更新后根据配置和策略，自动同步到备机的master&#x2F;slave机制，Master以写为主，Slave以读为主。</p><p>作用：</p><ul><li>读写分离，性能扩展，降低主服务器的压力；</li><li>容灾，快速恢复，主机挂掉时从机变为主机。</li></ul><img src="image-20230819123958901.png" alt="image-20230819123958901" style="zoom: 67%;" /><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>下面我们来配置1主2从的效果，现实中是需要3台机器的，为了方便，我们就在一台机器上进行演示，通过不同的端口来区分机器，3台机器的配置如下：</p><table><thead><tr><th>角色</th><th>端口</th></tr></thead><tbody><tr><td>master（主）</td><td>6379</td></tr><tr><td>slave1（从）</td><td>6380</td></tr><tr><td>slave2（从）</td><td>6381</td></tr></tbody></table><img src="image-20230819124142747.png" alt="image-20230819124142747" style="zoom: 67%;" /><p><strong>配置主从</strong></p><ol><li><p>创建案例工作目录：master-slave</p><p>执行下面命令创建&#x2F;llc&#x2F;master-slave目录，本次所有操作均在master-slave目录进行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/llc/master-slave</span><br><span class="line"><span class="built_in">cd</span> /home/llc/master-slave/</span><br></pre></td></tr></table></figure></li><li><p>将redis.conf复制到master-slave目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /home/llc/redis-6.0.8/redis.conf /home/llc/master-slave/</span><br></pre></td></tr></table></figure></li><li><p>创建master的配置文件：redis-6379.conf</p><p>在&#x2F;home&#x2F;llc&#x2F;master-slave目录下创建redis-6379.conf文件，内容如下：</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># redis.conf是redis原配置文件，内部包含了很多默认的配置，这里使用include将其引用，相当于把redis.conf内容直接贴进来了</span><br><span class="line">include /home/llc/master-slave/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 配置密码</span><br><span class="line">requirepass 123456</span><br><span class="line">dir /home/llc/master-slave/</span><br><span class="line">logfile /home/llc/master-slave/6379.log</span><br><span class="line"></span><br><span class="line"># 端口</span><br><span class="line">port 6379</span><br><span class="line"># rdb文件</span><br><span class="line">dbfilename dump_6379.rdb</span><br><span class="line"># pid文件</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br></pre></td></tr></table></figure></li><li><p>创建slave1的配置文件：redis-6380.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># redis.conf是redis原配置文件，内部包含了很多默认的配置，这里使用include将其引用，相当于把redis.conf内容直接贴进来了</span><br><span class="line">include /home/llc/master-slave/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 配置密码</span><br><span class="line">requirepass 123456</span><br><span class="line">dir /home/llc/master-slave/</span><br><span class="line">logfile /home/llc/master-slave/6380.log</span><br><span class="line"></span><br><span class="line"># 端口</span><br><span class="line">port 6380</span><br><span class="line"># rdb文件</span><br><span class="line">dbfilename dump_6380.rdb</span><br><span class="line"># pid文件</span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line"></span><br><span class="line"># 用来指定主机：slaveof 主机ip 端口</span><br><span class="line">slaveof 127.0.0.1 6379</span><br><span class="line"># 主机的密码</span><br><span class="line">masterauth 123456</span><br></pre></td></tr></table></figure></li><li><p>创建slave2的配置文件：redis-6381.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># redis.conf是redis原配置文件，内部包含了很多默认的配置，这里使用include将其引用，相当于把redis.conf内容直接贴进来了</span><br><span class="line">include /home/llc/master-slave/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 配置密码</span><br><span class="line">requirepass 123456</span><br><span class="line">dir /home/llc/master-slave/</span><br><span class="line">logfile /home/llc/master-slave/6381.log</span><br><span class="line"></span><br><span class="line"># 端口</span><br><span class="line">port 6381</span><br><span class="line"># rdb文件</span><br><span class="line">dbfilename dump_6381.rdb</span><br><span class="line"># pid文件</span><br><span class="line">pidfile /var/run/redis_6381.pid</span><br><span class="line"></span><br><span class="line"># 用来指定主机：slaveof 主机ip 端口</span><br><span class="line">slaveof 127.0.0.1 6379</span><br><span class="line"># 主机的密码</span><br><span class="line">masterauth 123456</span><br></pre></td></tr></table></figure></li><li><p>启动master、slave1、slave2，并检查是否启动成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/llc/redis-6.0.8/src/</span><br><span class="line">./redis-server /home/llc/master-slave/redis-6379.conf</span><br><span class="line">./redis-server /home/llc/master-slave/redis-6380.conf</span><br><span class="line">./redis-server /home/llc/master-slave/redis-6381.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程，检查是否启动成功</span></span><br><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><img src="image-20230819135308002.png" alt="image-20230819135308002"/></li><li><p>查看主机信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过redis-cli命令连接主机</span></span><br><span class="line">./redis-cli -p 6379 -a 123456</span><br><span class="line"><span class="comment"># 查看主从信息</span></span><br><span class="line">info Replication</span><br><span class="line"></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z src]<span class="comment"># ./redis-cli -p 6379 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">&#x27;-a&#x27;</span> or <span class="string">&#x27;-u&#x27;</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; info Replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master <span class="comment"># 当前角色，master表示主机</span></span><br><span class="line">connected_slaves:2 <span class="comment"># 2表示有2台从机，下面2行为从机信息（包括ip、端口等信息）</span></span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=154,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=154,lag=1</span><br><span class="line">master_replid:d98c4e0e14813e1e9e7d43eddb98cccf8915a907</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:154</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:154</span><br></pre></td></tr></table></figure></li><li><p>查看slave1信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z src]<span class="comment"># ./redis-cli -p 6380 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">&#x27;-a&#x27;</span> or <span class="string">&#x27;-u&#x27;</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">127.0.0.1:6380&gt; info Replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave <span class="comment"># 当前角色，slave表示从机</span></span><br><span class="line">master_host:127.0.0.1 <span class="comment"># 主机ip</span></span><br><span class="line">master_port:6379 <span class="comment"># 主机端口</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:7</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:448</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:d98c4e0e14813e1e9e7d43eddb98cccf8915a907</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:448</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:448</span><br></pre></td></tr></table></figure></li><li><p>查看slave2信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z src]<span class="comment"># ./redis-cli -p 6381 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">&#x27;-a&#x27;</span> or <span class="string">&#x27;-u&#x27;</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">127.0.0.1:6381&gt; info Replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:8</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:602</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:d98c4e0e14813e1e9e7d43eddb98cccf8915a907</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:602</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:602</span><br></pre></td></tr></table></figure></li><li><p>验证主从同步效果</p><p>在master上面执行下方命令：</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name zs</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>在slave1上执行下方命令，可以看出数据已经同步过来了。</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; mget name age</span><br><span class="line">1) <span class="string">&quot;zs&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br></pre></td></tr></table></figure><p>同样到slave2上也执行一下，效果如下：</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; mget name age</span><br><span class="line">1) <span class="string">&quot;zs&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><p>slave启动成功连接到master后，会给master发送数据同步消息（发送sync命令）。master接收到slave发来的数据同步消息后，把主服务器的数据进行持久化到rdb文件，同时会收集接收到的用于修改数据的命令，master将rdb文件发送给slave，完成一次完全同步。</p><p>全量复制：slave服务在接收到master发来的rdb文件后，将其存盘并加载到内存。</p><p>增量复制：master继续将收集到的修改命令依次传给slave，完成同步。</p><blockquote><p>只要重新连接master，一次完全同步（全量复制）将会被自动执行。</p></blockquote><img src="image-20230819145656248.png" alt="image-20230819145656248" style="zoom:80%;" /><blockquote><ul><li><p>主redis挂掉以后情况会如何？从机是上位还是原地待命？</p><p>主机挂掉后，从机会待命，小弟还是小弟，会等着大哥恢复，不会篡位。</p></li><li><p>从挂掉后又恢复了，会继续从主同步数据么？</p><p>会的，当从重启之后，会继续将中间缺失的数据同步过来。</p></li></ul></blockquote><h3 id="常用的主从结构"><a href="#常用的主从结构" class="headerlink" title="常用的主从结构"></a>常用的主从结构</h3><h4 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h4><p>上方案例演示的就是一主二从，不过采用的都是配置文件的方式，实际上从机可以采用命令的方式配置。</p><ol><li><p>创建案例工作目录：master-slave</p></li><li><p>将redis.conf复制到master-slave目录</p></li><li><p>创建master的配置文件：redis-6379.conf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis.conf是redis原配置文件，内部包含了很多默认的配置，这里使用include将其引用，相当于把redis.conf内容直接贴进来了</span></span><br><span class="line">include /home/llc/master-slave/redis.conf</span><br><span class="line">daemonize <span class="built_in">yes</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置密码</span></span><br><span class="line">requirepass 123456</span><br><span class="line"><span class="built_in">dir</span> /home/llc/master-slave/</span><br><span class="line">logfile /home/llc/master-slave/6379.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment"># rdb文件</span></span><br><span class="line">dbfilename dump_6379.rdb</span><br><span class="line"><span class="comment"># pid文件</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br></pre></td></tr></table></figure></li><li><p>创建slave1的配置文件：redis-6380.conf（配置同redis-6379，修改对应端口号为6380）</p></li><li><p>创建slave2的配置文件：redis-6381.conf（配置同redis-6379，修改对应端口号为6381）</p></li><li><p>启动master、slave1、slave2</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/llc/redis-6.0.8/src/</span><br><span class="line">./redis-server /home/llc/master-slave/redis-6379.conf</span><br><span class="line">./redis-server /home/llc/master-slave/redis-6380.conf</span><br><span class="line">./redis-server /home/llc/master-slave/redis-6381.conf</span><br></pre></td></tr></table></figure></li><li><p>分别连接3台机器，查看各自主从信息</p><p>本次我们并没有在slave1和slave2的配置文件通过slaveof命令配置主从信息，所以目前3台机器的角色都是master。</p><p>分别连接3个redis，然后用info replication命令看下3个的主从信息，如下：</p><img src="image-20230819173804127.png" alt="image-20230819173804127"/><img src="image-20230819173845403.png" alt="image-20230819173845403"/><img src="image-20230819173946905.png" alt="image-20230819173946905"/><p>可以发现三者的角色均为master。</p><p>下面我们将通过控制台命令来指定slave1和slave2的为master的从库。</p></li><li><p>配置slave1为master的从库</p><p>执行下面命令，连接slave1</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -p 6380 -a 123456</span><br></pre></td></tr></table></figure><p>执行下面命令，设置master的密码（由于master需要密码，所以在slave1中需要指定master的密码，否则无法同步数据。）</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config <span class="built_in">set</span> masterauth 123456</span><br></pre></td></tr></table></figure><p>执行下面命令，指定slave1作为master的从机</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure><p>使用info replication命令查看下slave1的主从信息</p><img src="image-20230819174404788.png" alt="image-20230819174404788"/></li><li><p>配置slave2为master的从库</p><p>执行下面命令，连接slave2</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -p 6381 -a 123456</span><br></pre></td></tr></table></figure><p>剩余操作同上，结果如下：</p><img src="image-20230819174706539.png" alt="image-20230819174706539"/></li><li><p>查看master的主从信息</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -p 6379 -a 123456</span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><img src="image-20230819174901641.png" alt="image-20230819174901641"/><blockquote><p>注意：</p><ul><li>通过slaveof命令指定主从的方式，slave重启之后主从配置会失效，所以重启后需要在slave上重新通过slaveof命令进行设置。</li><li>中途通过slaveof变更转向，本地的数据会被清除，会从新的master重新同步数据。</li></ul></blockquote></li></ol><h4 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h4><p>若master下面挂很多slave，master会有压力，实际上slave下面也可以挂slave，如下图，配置这里就不演示了，和上面的类似。</p><img src="image-20230819175407087.png" alt="image-20230819175407087" style="zoom:80%;" /><h4 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h4><p>当master挂掉之后，我们可以从slave中选择一个作为主机。比如我们想让slave1作为主机，那么可以在slave1上执行下方命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slaveof no one</span><br></pre></td></tr></table></figure><p>此时slave1就变成主机了，然后再去其他slave上面执行slaveof命令将其挂在slave1上。</p><p>这种主备切换有个缺点：需要以手动执行命令的方式进行操作，不太方便。</p><p>下面来介绍另外一种方式：哨兵模式，master挂掉之后，自动从slave中选择一个作为主机，自动实现故障转移。</p><h3 id="哨兵（Sentinel）模式"><a href="#哨兵（Sentinel）模式" class="headerlink" title="哨兵（Sentinel）模式"></a>哨兵（Sentinel）模式</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><strong>什么是哨兵模式？</strong></p><p>反客为主的自动版，能够自动监控master是否发生故障，如果故障了会根据投票数从slave中挑选一个作为master，其他的slave会自动转向同步新的master，实现故障自动转义。</p><p><strong>原理</strong></p><p>sentinel会按照指定的频率给master发送ping请求，看看master是否还活着，若master在指定时间内未正常响应sentinel发送的ping请求，sentinel则认为master挂掉了，但是这种情况存在误判的可能，比如：可能master并没有挂，只是sentinel和master之间的网络不通导致，导致ping失败。</p><p>为了避免误判，通常会启动多个sentinel，一般是奇数个，比如3个，那么可以指定当有多个sentinel都觉得master挂掉了，此时才断定master真的挂掉了，通常这个值设置为sentinel的一半，比如sentinel的数量是3个，那么这个量就可以设置为2个。</p><p>当多个sentinel经过判定，断定master确实挂掉了，接下来sentinel会进行故障转移：会从slave中投票选出一个服务器，将其升级为新的主服务器，并让失效主服务器的其他从服务器slaveof指向新的主服务器；当客户端试图连接失效的主服务器时，集群也会向客户端返回新主服务器的地址，使得集群可以使用新主服务器代替失效服务器。</p><p><strong>更多sentinel介绍</strong></p><p>关于sentinel的更多信息，详见：<a href="http://itsoku.com/article/247">http://itsoku.com/article/247</a></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>案例：配置1主2从3个哨兵</strong></p><p>下面我们来实现1主2从3个sentinel的配置，当从的挂掉之后，要求最少有2个sentinel认为主的挂掉了，才进行故障转移。</p><p>为了方便，我们在一台机器上进行模拟，通过端口来区分6个不同的节点（1个master、2个slave、3个sentinel），节点配置信息如下：</p><img src="image-20230819194551057.png" alt="image-20230819194551057" style="zoom:80%;" /><ol><li><p>创建案例工作目录：sentinel</p><p>执行下面命令创建&#x2F;home&#x2F;llc&#x2F;sentinel目录，本次所有操作，均在sentinel目录下进行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/llc/sentinel</span><br><span class="line"><span class="built_in">cd</span> /home/llc/sentinel</span><br></pre></td></tr></table></figure></li><li><p>将redis.conf复制到sentinel目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /home/llc/redis-6.0.8/redis.conf /home/llc/sentinel/</span><br></pre></td></tr></table></figure></li><li><p>创建master的配置文件：redis-6379.conf</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># redis.conf是redis原配置文件，内部包含了很多默认的配置，这里使用include将其引用，相当于把redis.conf内容直接贴进来了</span><br><span class="line">include /home/llc/sentinel/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line">dir /home/llc/sentinel/</span><br><span class="line">logfile /home/llc/sentinel/6379.log</span><br><span class="line"></span><br><span class="line"># 端口</span><br><span class="line">port 6379</span><br><span class="line"># rdb文件</span><br><span class="line">dbfilename dump_6379.rdb</span><br><span class="line"># pid文件</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br></pre></td></tr></table></figure></li><li><p>创建slave1的配置文件：redis-6380.conf（配置同redis-6379，修改对应端口号为6380）</p></li><li><p>创建slave2的配置文件：redis-6381.conf（配置同redis-6379，修改对应端口号为6381）</p></li><li><p>启动master、slave1、slave2</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/llc/redis-6.0.8/src/</span><br><span class="line">./redis-server /home/llc/sentinel/redis-6379.conf</span><br><span class="line">./redis-server /home/llc/sentinel/redis-6380.conf</span><br><span class="line">./redis-server /home/llc/sentinel/redis-6381.conf</span><br></pre></td></tr></table></figure></li><li><p>配置slave1为master的从库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -p 6380</span><br><span class="line">slaveof 127.0.0.1 6379</span><br><span class="line">info replication</span><br></pre></td></tr></table></figure></li><li><p>配置slave2为master的从库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -p 6381</span><br><span class="line">slaveof 127.0.0.1 6379</span><br><span class="line">info replication</span><br></pre></td></tr></table></figure></li><li><p>验证主从复制是否正常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -p 6379</span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><img src="image-20230819200746421.png" alt="image-20230819200746421"/><p>在master中执行下面命令，写入数据</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flushdb</span><br><span class="line"><span class="built_in">set</span> name jack</span><br></pre></td></tr></table></figure><p>查看slave1和slave2中name的值，若数据一致，则说明同步正常。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get name</span><br></pre></td></tr></table></figure></li><li><p>创建sentinel1的配置文件：sentinel-26379.conf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件目录</span></span><br><span class="line"><span class="built_in">dir</span> /home/llc/sentinel/</span><br><span class="line"><span class="comment"># 日志文件位置</span></span><br><span class="line">logfile <span class="string">&quot;./sentinel-26379.log&quot;</span></span><br><span class="line"><span class="comment"># pid文件</span></span><br><span class="line">pidfile /var/run/sentinel_26379.pid</span><br><span class="line"><span class="comment"># 是否后台运行</span></span><br><span class="line">daemonize <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line">port 26379</span><br><span class="line"><span class="comment"># 监控主服务器master的名字：mymaster，IP：127.0.0.1，port：6379，最后的数字2表示当Sentinel集群中有2个Sentinel认为master存在故障不可用，则进行自动故障转移</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"><span class="comment"># master响应超时时间（毫秒），Sentinel会向master发送ping来确认master，如果在60秒内，ping不通master，则主观认为master不可用</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 60000</span><br><span class="line"><span class="comment"># 故障转移超时时间（毫秒），如果3分钟内没有完成故障转移操作，则视为转移失败</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"><span class="comment"># 故障转移之后，进行新的主从复制，配置项指定了最多有多少个slave对新的master进行同步，那可以理解为1是串行复制，大于1是并行复制</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"><span class="comment"># 指定mymaster主的密码（没有就不指定）</span></span><br><span class="line"><span class="comment"># sentinel auth-pass mymaster 123456</span></span><br></pre></td></tr></table></figure></li><li><p>创建sentinel2的配置文件：sentinel-26380.conf（配置同sentinel-26379，修改对应端口号为26380）</p></li><li><p>创建sentinel3的配置文件：sentinel-26381.conf（配置同sentinel-26379，修改对应端口号为26381）</p></li><li><p>启动3个sentinel</p><p>启动sentinel有2种方式：</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">redis-server sentinel.conf --sentinel</span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure><p>使用方式二启动3个sentinel</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/llc/redis-6.0.8/src</span><br><span class="line">./redis-sentinel /home/llc/sentinel/sentinel-26379.conf</span><br><span class="line">./redis-sentinel /home/llc/sentinel/sentinel-26380.conf</span><br><span class="line">./redis-sentinel /home/llc/sentinel/sentinel-26381.conf</span><br></pre></td></tr></table></figure></li><li><p>分别查看3个sentinel的信息</p><p>分别对3个sentinel执行下方命令，查看每个sentinel的信息</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -p sentinel端口</span><br><span class="line">info sentinel</span><br></pre></td></tr></table></figure><p>sentinel1信息如下：</p><img src="image-20230820074137891.png" alt="image-20230820074137891"/></li><li><p>验证故障自动转移是否成功</p><p>在master中执行下面命令，停止master</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -p 6379</span><br><span class="line">shutdown</span><br></pre></td></tr></table></figure><p>等待2分钟，等待完成故障转移</p><p>sentinel中我们配置down-after-milliseconds的值是60秒，表示判断主机下线时间是60秒，所以我们等2分钟，让系统先自动完成故障转移。</p><p>查看slave1的主从信息，如下：</p><img src="image-20230820075238438.png" alt="image-20230820075238438"/><p>查看slave2的主从信息，如下：</p><p>slave2变成了master，且slave1变成了slave2的从库，完成了故障转移。</p><img src="image-20230820075719038.png" alt="image-20230820075719038"/><p>验证下slave1和slave2是否同步</p><p>在slave2中执行下面命令</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; <span class="built_in">set</span> address china</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>在slave1中执行下面命令，查询address的值，效果如下，说明slave2和slave1同步正常</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; get address</span><br><span class="line"><span class="string">&quot;china&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>恢复旧的master自动俯首称臣</p><p>当旧的master恢复之后，会自动挂在新的master下面。</p><p>执行下面命令，启动旧的master</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-server /home/llc/sentinel/redis-6379.conf</span><br></pre></td></tr></table></figure><p>执行下面命令，连接旧的master</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -p 6379</span><br></pre></td></tr></table></figure><p>执行下面命令，查看其主从信息</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="image-20230820080559580.png" alt="image-20230820080559580"/></li></ol><h4 id="Spring-Boot整合Sentinel模式"><a href="#Spring-Boot整合Sentinel模式" class="headerlink" title="Spring Boot整合Sentinel模式"></a>Spring Boot整合Sentinel模式</h4><ol><li><p>新建Spring Boot项目，导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建配置文件application.yaml并配置redis sentinel相关信息</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="comment"># redis sentinel主服务名称，来源于：sentinel配置文件中sentinel monitor后面跟的那个名称</span></span><br><span class="line">      <span class="attr">master:</span> <span class="string">mymaster</span></span><br><span class="line">      <span class="comment"># sentinel节点列表（host:port），多个节点之间用逗号隔开</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">47.115</span><span class="number">.202</span><span class="number">.83</span><span class="string">:26379,</span> <span class="number">47.115</span><span class="number">.202</span><span class="number">.83</span><span class="string">:26380,</span> <span class="number">47.115</span><span class="number">.202</span><span class="number">.83</span><span class="string">:26381</span></span><br><span class="line">      <span class="comment"># sentinel密码</span></span><br><span class="line">      <span class="comment"># password: 123456</span></span><br><span class="line">    <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">60000</span></span><br><span class="line">    <span class="comment"># Redis默认情况下有16个分片，这里配置具体使用的分片，默认为0</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>编写启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写RedisController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/stringTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">StringTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">listTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;courses&quot;</span>);</span><br><span class="line">        redisTemplate.opsForList().rightPushAll(<span class="string">&quot;courses&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;python&quot;</span>);</span><br><span class="line">        List&lt;String&gt; courses = redisTemplate.opsForList().range(<span class="string">&quot;courses&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/setTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">setTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">        redisTemplate.opsForSet().add(<span class="string">&quot;users&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; users = redisTemplate.opsForSet().members(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hashTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hashTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        Map&lt;String , String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;001&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        redisTemplate.opsForHash().putAll(<span class="string">&quot;user&quot;</span>, map);</span><br><span class="line">        Map&lt;Object, Object&gt; user = redisTemplate.opsForHash().entries(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/zsetTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">zsetTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;languages&quot;</span>);</span><br><span class="line">        redisTemplate.opsForZSet().add(<span class="string">&quot;languages&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        redisTemplate.opsForZSet().add(<span class="string">&quot;languages&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="number">90</span>);</span><br><span class="line">        redisTemplate.opsForZSet().add(<span class="string">&quot;languages&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="number">80</span>);</span><br><span class="line">        Set&lt;String&gt; languages = redisTemplate.opsForZSet().range(<span class="string">&quot;languages&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> languages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看redis机器信息</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">RedisCallback</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">doInRedis</span><span class="params">(RedisConnection connection)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                <span class="keyword">return</span> connection.execute(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：安全组开放26379、26380、26381端口，且防火墙需要允许这些端口通过。</p><p>修改redis-xxx.conf的配置<code>bind 127.0.0.1</code>为<code>bind 0.0.0.0</code>。</p><p>修改sentinel-xxx.conf的配置<code>sentinel monitor mymaster 127.0.0.1 6379 2</code>为<code>sentinel monitor mymaster 47.115.202.83 6379 2</code>，即master节点的真实地址。</p></blockquote></li></ol><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p><strong>存在问题</strong></p><ul><li>单台redis容量限制，如何进行扩容？继续加内存、加硬件么？</li><li>单台redis并发写量太大有性能瓶颈，如何解决？</li></ul><p>redis3.0中提供了集群可以解决这些问题。</p><p><strong>什么是集群？</strong></p><p>redis集群是对redis的水平扩容，即启动N个redis节点，将整个数据分布存储在这个N个节点中，每个节点存储总数据的1&#x2F;N。</p><p>如下图，由3台master和3台slave组成的redis集群，每台master承接客户端三分之一请求和写入的数据，当master挂掉后，slave会自动替代master，做到高可用。</p><img src="image-20230820103148537.png" alt="image-20230820103148537" style="zoom:80%;" /><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>下面我们来配置一个3主3从的集群，每个master下面挂一个slave，master挂掉后，slave会被提升为master。</p><p>为了方便，我们在一台机器上进行模拟，通过端口来区分6个不同的节点，配置信息如下：</p><img src="image-20230820103313938.png" alt="image-20230820103313938" style="zoom:80%;" /><ol><li><p>创建案例工作目录：cluster</p><p>执行下面命令创建&#x2F;home&#x2F;llc&#x2F;cluster目录，本次所有操作，均在cluster目录下进行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/llc/cluster</span><br><span class="line"><span class="built_in">cd</span> /home/llc/cluster</span><br></pre></td></tr></table></figure></li><li><p>将redis.conf复制到cluster目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /home/llc/redis-6.0.8/redis.conf /home/llc/cluster/</span><br></pre></td></tr></table></figure></li><li><p>创建master1的配置文件：redis-6379.conf</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># redis.conf是redis原配置文件，内部包含了很多默认的配置，这里使用include将其引用，相当于把redis.conf内容直接贴进来了</span><br><span class="line">include /home/llc/cluster/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line">dir /home/llc/cluster/</span><br><span class="line">logfile /home/llc/cluster/6379.log</span><br><span class="line"></span><br><span class="line"># 端口</span><br><span class="line">port 6379</span><br><span class="line"># rdb文件</span><br><span class="line">dbfilename dump_6379.rdb</span><br><span class="line"># pid文件</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"># 开启集群设置</span><br><span class="line">cluster-enabled yes</span><br><span class="line"># 设置节点配置文件</span><br><span class="line">cluster-config-file node-6379.conf</span><br><span class="line"># 设置节点失联时间，超过该时间（毫秒），集群自动进行主从切换</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure></li><li><p>创建master2的配置文件：redis-6380.conf（配置同redis-6379，修改对应端口号为6380）</p></li><li><p>创建master3的配置文件：redis-6381.conf（配置同redis-6379，修改对应端口号为6381）</p></li><li><p>创建slave1的配置文件：redis-6389.conf（配置同redis-6379，修改对应端口号为6389）</p></li><li><p>创建slave2的配置文件：redis-6390.conf（配置同redis-6379，修改对应端口号为6390）</p></li><li><p>创建slave3的配置文件：redis-6391.conf（配置同redis-6379，修改对应端口号为6391）</p></li><li><p>启动master、slave</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/llc/redis-6.0.8/src/</span><br><span class="line">./redis-server /home/llc/cluster/redis-6379.conf</span><br><span class="line">./redis-server /home/llc/cluster/redis-6380.conf</span><br><span class="line">./redis-server /home/llc/cluster/redis-6381.conf</span><br><span class="line">./redis-server /home/llc/cluster/redis-6389.conf</span><br><span class="line">./redis-server /home/llc/cluster/redis-6390.conf</span><br><span class="line">./redis-server /home/llc/cluster/redis-6391.conf</span><br></pre></td></tr></table></figure></li><li><p>查看6个redis的启动情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><img src="image-20230820224506695.png" alt="image-20230820224506695"/></li><li><p>确保node-xxx.conf文件已正常生成</p><p>稍后我们会将6个实例合并到一个集群，在组合之前，我们要确保6个redis实例启动后node-xxx.conf文件都正常生成，如下：</p><img src="image-20230820224601747.png" alt="image-20230820224601747"/></li><li><p>将6个节点合成一个集群</p><p>执行下方命令，将6个redis合体</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/llc/redis-6.0.8/src</span><br><span class="line">./redis-cli --cluster create --cluster-replicas 1 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6389 127.0.0.1:6390 127.0.0.1:6391</span><br></pre></td></tr></table></figure><blockquote><p>合体的命令后面跟上所有节点的ip:port列表，多个节点之间用空格隔开。</p><p>–cluster-replicas 1：表示采用最简单的方式配置集群，即每个master配1个slave，6个节点就形成了3主3从。</p><p>我们虽然指定了每个主节点都有一个从节点，但哪个是6379的从节点，却是随机分配的，直到集群创建完毕，才能确定是6389、6390还是6391。</p></blockquote><p>执行过程如下，期间会让我们确定是否同样这样的分配方式，输入：yes，然后等几秒，集群合体成功</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z src]<span class="comment"># ./redis-cli --cluster create --cluster-replicas 1 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6389 127.0.0.1:6390 127.0.0.1:6391</span></span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 127.0.0.1:6390 to 127.0.0.1:6379</span><br><span class="line">Adding replica 127.0.0.1:6391 to 127.0.0.1:6380</span><br><span class="line">Adding replica 127.0.0.1:6389 to 127.0.0.1:6381</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti-affinity</span><br><span class="line">[WARNING] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line">M: d70baeb81a52751234169cc130ea5d11644ac6d7 127.0.0.1:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 5ac6a0c8ef72177c0849e60b78389fad91ca8e39 127.0.0.1:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 88775aff8e631f72289ce5739010feb41bb756b9 127.0.0.1:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: b43507e89a56613e45d821f804730fddb588588f 127.0.0.1:6389</span><br><span class="line">   replicates d70baeb81a52751234169cc130ea5d11644ac6d7</span><br><span class="line">S: 1f6136fa929cfcf97812d897688054f7fd5cb94b 127.0.0.1:6390</span><br><span class="line">   replicates 5ac6a0c8ef72177c0849e60b78389fad91ca8e39</span><br><span class="line">S: 2bc0c7908016b61e97083bd4782c32e845a8449b 127.0.0.1:6391</span><br><span class="line">   replicates 88775aff8e631f72289ce5739010feb41bb756b9</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): <span class="built_in">yes</span></span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to <span class="built_in">join</span></span><br><span class="line">.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6379)</span><br><span class="line">M: d70baeb81a52751234169cc130ea5d11644ac6d7 127.0.0.1:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 5ac6a0c8ef72177c0849e60b78389fad91ca8e39 127.0.0.1:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: b43507e89a56613e45d821f804730fddb588588f 127.0.0.1:6389</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates d70baeb81a52751234169cc130ea5d11644ac6d7</span><br><span class="line">S: 1f6136fa929cfcf97812d897688054f7fd5cb94b 127.0.0.1:6390</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 5ac6a0c8ef72177c0849e60b78389fad91ca8e39</span><br><span class="line">S: 2bc0c7908016b61e97083bd4782c32e845a8449b 127.0.0.1:6391</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 88775aff8e631f72289ce5739010feb41bb756b9</span><br><span class="line">M: 88775aff8e631f72289ce5739010feb41bb756b9 127.0.0.1:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure></li><li><p>连接集群节点，查看集群信息</p><p>使用redis-cli -c命令连接集群中6个节点中任何一个节点都可以，注意和之前的连接参数有点不同redis-cli命令后面多了一个<code>-c</code>参数，表示采用集群的方式连接。</p><p>连上以后，执行<code>cluster nodes</code>命令查看集群节点信息。</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z src]<span class="comment"># ./redis-cli -c -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">5ac6a0c8ef72177c0849e60b78389fad91ca8e39 127.0.0.1:6380@16380 master - 0 1692543023000 2 connected 5461-10922</span><br><span class="line">b43507e89a56613e45d821f804730fddb588588f 127.0.0.1:6389@16389 slave d70baeb81a52751234169cc130ea5d11644ac6d7 0 1692543024643 1 connected</span><br><span class="line">1f6136fa929cfcf97812d897688054f7fd5cb94b 127.0.0.1:6390@16390 slave 5ac6a0c8ef72177c0849e60b78389fad91ca8e39 0 1692543022000 2 connected</span><br><span class="line">d70baeb81a52751234169cc130ea5d11644ac6d7 127.0.0.1:6379@16379 myself,master - 0 1692543020000 1 connected 0-5460</span><br><span class="line">2bc0c7908016b61e97083bd4782c32e845a8449b 127.0.0.1:6391@16391 slave 88775aff8e631f72289ce5739010feb41bb756b9 0 1692543022615 3 connected</span><br><span class="line">88775aff8e631f72289ce5739010feb41bb756b9 127.0.0.1:6381@16381 master - 0 1692543023640 3 connected 10923-16383</span><br></pre></td></tr></table></figure><p>如下图，对cluster nodes命令的结果进行解释，集群中的每个节点都会生成一个ID，这个ID信息会被写入到node-xxx.conf文件中，为什么要生成id呢？因为节点的ip和端口可能会发生变化，但是节点的ID是不会变的，其他节点可以通过节点的ID来认识该节点。</p><img src="image-20230820225730306.png" alt="image-20230820225730306"/></li><li><p>验证集群数据的读写操作</p><p>连接6379这个节点，执行一个set操作，效果如下，写入成功</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z src]<span class="comment"># ./redis-cli -c -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name zs</span><br><span class="line">-&gt; Redirected to slot [5798] located at 127.0.0.1:6380</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt;</span><br></pre></td></tr></table></figure><p>此时我们在6379上进行操作，但是请求被转发到6380这个节点进行处理，这里就是我们后面要说的slot的知识。</p><blockquote><ul><li><p>redis集群如何分配这6个节点？</p><p>一个集群至少有3个主节点，因为新master的选举需要大于半数的集群master节点同意才能选举成功，如果只有两个master节点，当其中一个挂了，是达不到选举新master的条件的。</p></li><li><p>分配原则尽量保证每个主库运行在不同的ip，每个主库和从库不在一个ip上，这样才能做到高可用。</p></li></ul></blockquote></li></ol><h4 id="slot（槽）"><a href="#slot（槽）" class="headerlink" title="slot（槽）"></a>slot（槽）</h4><p><strong>什么是slot？</strong></p><p>如下图，咱们再来看看集群合并过程中输出的一些信息</p><img src="image-20230820224942167.png" alt="image-20230820224942167"/><p>Redis集群内部划分了16384个slots（插槽），合并的时候会将每个slots映射到一个master上面，比如上面3个master和slots的关系如下：</p><table><thead><tr><th>redis主节点</th><th>槽位范围</th></tr></thead><tbody><tr><td>master1（端口：6379）</td><td>[0-5460]，插槽的位置从0开始，0表示第1个插槽</td></tr><tr><td>master2（端口：6380）</td><td>[5461-10922]</td></tr><tr><td>master3（端口：6381）</td><td>[10923-16383]</td></tr><tr><td>slave1、slave2、slave3</td><td>从节点没有槽位，slave是用来对master做替补的</td></tr></tbody></table><p>数据库中的每个key都属于16384个slots中的其中1个，当通过key读写数据的时候，redis需要先根据key计算出key对应的slots，然后根据slots和master的映射关系找到对应的redis节点，key对应的数据就在这个节点上面。</p><p>集群中使用公式<code>CRC16(key) % 16384</code>计算key属于哪个槽。</p><p><strong>在集群中录入值</strong></p><p>redis-cli每次录入、查询键值，redis都会计算key对应的插槽，如果不是当前redis节点的插槽，redis会报错，并告知应前往的redis实例地址和端口，效果如下，我们连接了6379这个实例来操作k1，这个节点发现k1的槽位在6381上面，返回了错误信息，怎么办呢？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z src]<span class="comment"># ./redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">(error) MOVED 12706 127.0.0.1:6381</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>使用redis-cli客户端提供的<code>-c</code>参数可以解决这个问题，表示以集群方式执行，执行命令的时候当前节点处理不了的时候，会自动将请求重定向到目标节点，效果如下，被重定向到了6381。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z src]<span class="comment"># ./redis-cli -c -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">-&gt; Redirected to slot [12706] located at 127.0.0.1:6381</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt;</span><br></pre></td></tr></table></figure><p>同样，执行get会被重定向，效果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z src]<span class="comment"># ./redis-cli -c -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">-&gt; Redirected to slot [12706] located at 127.0.0.1:6381</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6381&gt;</span><br></pre></td></tr></table></figure><p>不在一个slot下面，不能使用mget、mset等多键操作，效果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; mset k1 v1 k2 v2</span><br><span class="line">(error) CROSSSLOT Keys <span class="keyword">in</span> request don<span class="string">&#x27;t hash to the same slot</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; mget k1 k2</span></span><br><span class="line"><span class="string">(error) CROSSSLOT Keys in request don&#x27;</span>t <span class="built_in">hash</span> to the same slot</span><br></pre></td></tr></table></figure><p>可以通过{}来定义组的概念，从而使key中{}内相同的键值放到一个slot中去，效果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; mset k1&#123;g1&#125; v1 k2&#123;g1&#125; v2 k3&#123;g1&#125; v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; mget k1&#123;g1&#125; k2&#123;g1&#125; k3&#123;g1&#125;</span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>k1{g1}：相对于将键k1放入g1对应的slot中</p></blockquote><p><strong>slot相关的一些命令</strong></p><ul><li>cluster keyslot key：计算key对应的slot</li><li>cluster countkeysinslot slot：获取slot槽位中key的个数</li><li>cluster getkeysinslot slot count：从slot槽位中取出count个key</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; cluster keyslot k1&#123;g1&#125;</span><br><span class="line">(<span class="built_in">integer</span>) 13519</span><br><span class="line">127.0.0.1:6381&gt; cluster countkeysinslot 13519</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6381&gt; cluster getkeysinslot 13519 3</span><br><span class="line">1) <span class="string">&quot;k1&#123;g1&#125;&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&#123;g1&#125;&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&#123;g1&#125;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><p>如果主节点下线，从节点是否能够提升为主节点？注意：<code>需要等15秒</code></p><p>下面我们来试试，如下，连接master1，然后将master1停掉：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -c -p 6379</span><br><span class="line">shutdown</span><br></pre></td></tr></table></figure><p>执行下面命令，连接master2，查看集群节点信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -c -p 6380</span><br><span class="line">cluster nodes</span><br></pre></td></tr></table></figure><p>输出如下，可以看到slave1（6389）确实变成master了，而它原来的master：master1（6379）下线了。</p><img src="image-20230820230303604.png" alt="image-20230820230303604"/><p>重新启动6379，然后再看看集群变成什么样了，命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-server /home/llc/cluster/redis-6379.conf</span><br><span class="line">./redis-cli -c -p 6379</span><br><span class="line">cluster nodes</span><br></pre></td></tr></table></figure><p>执行结果如下，6379变成了slave，挂在了6389的下面。</p><img src="image-20230820230912019.png" alt="image-20230820230912019"/><blockquote><p>如果某一段插槽的主从都宕机了，redis服务是否还能继续？</p><p>这个时候就要看<code>cluster-require-full-coverage</code>参数的值了，参数值如下：</p><ul><li>yes（默认值）：整个集群都无法提供服务；</li><li>no：宕机的这部分槽位数据全部不能使用，其他槽位正常。</li></ul></blockquote><h4 id="Spring-Boot整合redis集群"><a href="#Spring-Boot整合redis集群" class="headerlink" title="Spring Boot整合redis集群"></a>Spring Boot整合redis集群</h4><ol><li><p>新建Spring Boot项目，导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建配置文件aplication.yaml并配置redis cluster的信息</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="comment"># 集群节点（host:port），多个节点之间用逗号隔开</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">47.115</span><span class="number">.202</span><span class="number">.83</span><span class="string">:6379,</span> <span class="number">47.115</span><span class="number">.202</span><span class="number">.83</span><span class="string">:6380,</span> <span class="number">47.115</span><span class="number">.202</span><span class="number">.83</span><span class="string">:6381,</span> <span class="number">47.115</span><span class="number">.202</span><span class="number">.83</span><span class="string">:6389,</span> <span class="number">47.115</span><span class="number">.202</span><span class="number">.83</span><span class="string">:6390,</span> <span class="number">47.115</span><span class="number">.202</span><span class="number">.83</span><span class="string">:6391</span></span><br><span class="line">    <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">60000</span></span><br></pre></td></tr></table></figure></li><li><p>编写启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写RedisController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/stringTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">StringTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">listTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;courses&quot;</span>);</span><br><span class="line">        redisTemplate.opsForList().rightPushAll(<span class="string">&quot;courses&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;python&quot;</span>);</span><br><span class="line">        List&lt;String&gt; courses = redisTemplate.opsForList().range(<span class="string">&quot;courses&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/setTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">setTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">        redisTemplate.opsForSet().add(<span class="string">&quot;users&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; users = redisTemplate.opsForSet().members(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hashTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hashTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        Map&lt;String , String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;001&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        redisTemplate.opsForHash().putAll(<span class="string">&quot;user&quot;</span>, map);</span><br><span class="line">        Map&lt;Object, Object&gt; user = redisTemplate.opsForHash().entries(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/zsetTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">zsetTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;languages&quot;</span>);</span><br><span class="line">        redisTemplate.opsForZSet().add(<span class="string">&quot;languages&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        redisTemplate.opsForZSet().add(<span class="string">&quot;languages&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="number">90</span>);</span><br><span class="line">        redisTemplate.opsForZSet().add(<span class="string">&quot;languages&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="number">80</span>);</span><br><span class="line">        Set&lt;String&gt; languages = redisTemplate.opsForZSet().range(<span class="string">&quot;languages&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> languages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看redis机器信息</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">RedisCallback</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">doInRedis</span><span class="params">(RedisConnection connection)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                <span class="keyword">return</span> connection.execute(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：安全组开放6379、6380、6381、6389、6390、6391端口，且防火墙需要允许这些端口通过。</p><p>修改redis-xxx.conf的配置<code>bind 127.0.0.1</code>为<code>bind 0.0.0.0</code></p><p>在将6个节点合成一个集群时，对应节点ip需要为真实ip，即</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli --cluster create --cluster-replicas 1 47.115.202.83:6379 47.115.202.83:6380 47.115.202.83:6381 47.115.202.83:6389 47.115.202.83:6390 47.115.202.83:6391</span><br></pre></td></tr></table></figure><p>可能会遇到的问题：<code>Waiting for the cluster to join</code>一直等待。</p><p>原因：redis集群不仅需要开通redis客户端连接的端口，而且需要开通集群总线端口。集群总线端口为redis客户端连接的端口 + 10000，如redis端口为6379，则集群总线端口为16379。</p><p>解决方法：安全组开放16379、16380、16381、16389、16390、16391端口，且防火墙需要允许这些端口通过。</p></blockquote></li></ol><h2 id="Redis应用问题解决"><a href="#Redis应用问题解决" class="headerlink" title="Redis应用问题解决"></a>Redis应用问题解决</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p><strong>问题描述</strong></p><p>当系统中引入redis缓存后，一个请求进来后，会先在redis缓存中查询，缓存有就直接返回，缓存中没有就去db中查询，db中如果有就会将其丢到缓存中。但是有些key对应数据在db中并不存在，每次针对这个key的请求从缓存中取不到，请求都会压到db，从而可能压垮db。</p><p>比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用大量此类攻击可能压垮数据库。</p><p><strong>解决方案</strong></p><ol><li><p>对空值缓存</p><p>如果一个查询返回的数据为空（不管数据库是否存在），我们仍然把这个结果（null）进行缓存，给其设置一个很短的过期时间，最长不超过五分钟。</p><blockquote><p>例如：当某个用户id在缓存中查不到，在数据库中也查不到时，也需要将该用户id缓存起来，只不过值是空的。这样后面的请求，再拿相同的用户id发起请求时，就能从缓存中获取空数据，直接返回了，而无需再去查一次数据库。</p></blockquote></li><li><p>设置可访问的名单（白名单）</p><p>使用redis中的bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次范文和bitmap里面的id进行比较，如果访问的id不在bitmaps里面，则进行拦截，不允许访问。</p></li><li><p>采用布隆过滤器</p><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的，它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。</p><p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p></li><li><p>进行实时监控</p><p>当发现redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制对其提供服务（比如：IP黑名单）</p></li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p><strong>问题描述</strong></p><p>redis中某个热点key（访问量很高的key）过期，此时大量请求同时过来，发现缓存中没有命中，这些请求都打到db上了，导致db压力瞬时大增，可能会打垮db，这种情况称为缓存击穿。</p><p>缓存击穿出现的现象：</p><ul><li>数据库访问压力瞬时增大</li><li>redis里面没有出现大量的key过期</li><li>redis正常运行</li></ul><p><strong>解决方案</strong></p><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据，这个时候，要考虑一个问题：缓存被“击穿”的问题，常见的解决方案如下：</p><ol><li><p>预先设置热门数据，适时调整过期时间</p><p>在redis高峰之前，把一些热门数据提前存入到redis里面，对缓存中的这些热门数据进行监控，实时调整过期时间。</p></li><li><p>使用锁</p><p>缓存中拿不到数据的时候，此时不是立即去db中查询，而是去获取分布式锁（比如redis中的setnx），拿到锁再去db中load数据；没有拿到锁的线程休眠一段时间再重试整个获取数据的方法。</p></li></ol><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p><strong>问题描述</strong></p><p>key对应的数据存在，但是极短时间内有大量的key集中过期，此时若有大量的并发请求过来，发现缓存没有数据，大量的请求就会落到db上去加载数据，会将db击垮，导致服务奔溃。</p><p>缓存雪崩与缓存击穿的区别在于：前者是大量的key集中过期，而后者是某个热点key过期。</p><p><strong>解决方案</strong></p><p>缓存失效时的雪崩效益对底层系统的冲击非常可怕，常见的解决方案如下：</p><ol><li><p>构建多级缓存</p><p>nginx缓存 + redis缓存 + 其他缓存（ehcache等）</p></li><li><p>使用锁或队列</p><p>用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，不适用高并发情况。</p></li><li><p>监控缓存过期，提前更新</p><p>监控缓存，发下缓存快过期了，提前对缓存进行更新。</p></li><li><p>将缓存失效时间分散开</p><p>比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样缓存的过期时间重复率就会降低，就很难引发集体失效的事件。</p></li></ol><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><strong>问题描述</strong></p><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力，为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题。</p><p><strong>分布式锁主流的实现方案</strong></p><ol><li>基于数据库实现分布式锁</li><li>基于缓存（redis等）</li><li>基于zookeeper</li></ol><p>每一种分布式锁解决方案都有各自的优缺点</p><ul><li>性能：redis最高</li><li>可靠性：zookeeper最高</li></ul><p>这里我们基于redis实现分布式锁。</p><p><strong>使用redis实现分布式锁</strong></p><p>需要使用下面这个命令来实现分布式锁</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value NX PX 有效期（毫秒）</span><br></pre></td></tr></table></figure><p>这条命令表示：当key不存在的时候，设置其值为value，且同时设置其有效期。</p><p>示例：表示当sku:1:info不存在的时候，设置值为ok，且有效期为1万毫秒。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> sku:1:info <span class="string">&quot;ok&quot;</span> NX PX 10000</span><br></pre></td></tr></table></figure><p>上锁过程如下图，执行<code>set key value NX PX 有效期（毫秒）</code>命令，返回ok表示执行成功，则获取锁成功。多个客户端并发执行此命令的时候，redis可以确保只有一个执行成功。</p><img src="image-20230821111912368.png" alt="image-20230821111912368" style="zoom:80%;" /><blockquote><ul><li><p>为什么要设置过期时间？</p><p>客户端获取锁后，由于系统问题，如系统宕机了，会导致锁无法释放，其他客户端就无法获取锁了，所以需要给锁指定一个使用期限。</p></li><li><p>如果设置的有效期太短怎么办？</p><p>比如有效期设置了10秒，但是10秒不够业务方使用，这种情况客户端需要实现续命的功能，可以解决这个问题。</p></li><li><p>解决锁误删的问题</p><p>锁存在误删的情况：所谓误删就是自己把别人持有的锁给删掉了。</p><p>比如线程A获取锁的时候，设置的有效期是10秒，但是执行业务的时候A程序突然卡住了，超过了10秒，此时这个锁就可能被其他线程拿到，比如被线程B拿到了，然后A从卡顿中恢复了，继续执行业务，业务执行完毕之后，去执行了释放锁的操作，此时A会执行del命令，此时就出现了锁的误删，导致的结果就是把B持有的锁给释放了，然后其他线程又会获取这个锁。</p><p>如何解决呢？</p><p>获取锁之前，生成一个全局唯一id，将这个id也丢到key对应的value中，释放锁之前，从redis中将这个id拿出来和本地的比较一下，看看是不是自己的id，如果是再执行del释放锁的操作。</p></li><li><p>还是存在误删的可能（原子操作问题）</p><p>上面说到del之前，会先从redis中读取id，然后和本地id对比一下，如果一致，则执行删除，伪代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">step1: 判断 redis.get(&quot;key&quot;).id == 本地id 是否相等,如果是则执行step2</span><br><span class="line">step2: del key;</span><br></pre></td></tr></table></figure><p>此时如果执行step2的时候系统卡住了，比如卡住了10秒，然后redis才收到，这个期间锁可能又被其他线程获取了，此时又发生了误删的操作。</p><p>这个问题的根本原因是：判断和删除这2个步骤对redis来说不是原子操作。</p><p>怎么解决呢？需要使用Lua脚本来解决。</p></li><li><p>终极方案：使用Lua脚本来释放锁</p><p>将复杂或者多步的redis操作写为一个脚本，一次提交给redis执行，减少反复连接redis的次数，提升性能。</p><p>Lua脚本类似于redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务的操作。</p><p>注意：redis的Lua脚本功能，只能在redis2.6以上版本才能使用。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/lock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">lock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockkey</span> <span class="operator">=</span> <span class="string">&quot;k1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 1. 获取锁，有效期10秒</span></span><br><span class="line">        <span class="keyword">if</span>(redisTemplate.opsForValue().setIfAbsent(lockkey, uuid, <span class="number">10</span>, TimeUnit.SECONDS))&#123;</span><br><span class="line">            <span class="comment">// 2. 执行业务</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 使用Lua脚本释放锁（可防止误删）</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">            DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">            redisScript.setScriptText(script);</span><br><span class="line">            redisScript.setResultType(Long.class);</span><br><span class="line">            <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> redisTemplate.execute(redisScript, Arrays.asList(lockkey), uuid);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;获取锁成功！&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;加锁失败！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分布式锁总结</p><p>为了确保分布式锁可用，我们至少需要确保分布式锁的实现同时满足以下四个条件：</p><ul><li>互斥性：在任意时刻只能有一个客户端能够持有锁。</li><li>不会发生死锁：即使有一个客户端在持有锁期间崩溃而没有释放锁，也能够保证后续其他客户端能够加锁。</li><li>解锁还需寄铃人：加锁和解锁必须是同一个客户端，客户端不能把别人的锁给解了。</li><li>加锁和解锁必须有原子性。</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2023/09/18/Git/"/>
      <url>/2023/09/18/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p><strong>什么是版本控制？</strong></p><p>版本控制（Revision control）是一种在开发过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。简单来说就是用于管理多人协同开发项目的技术。</p><p><strong>为什么要有版本控制？</strong></p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p>版本控制带来的便利：</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p><strong>常见的版本控制工具</strong></p><p>主流的版本控制器有Git、SVN、CVS、VSS、TFS等，现在影响力最大且使用最广泛的是Git与SVN。</p><p><strong>版本控制分类</strong></p><ol><li><p>本地版本控制</p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人使用，如RCS。</p><img src="image-20230426205237280.png" alt="image-20230426205237280" style="zoom: 80%;" /></li><li><p>集中版本控制</p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。</p><img src="image-20230426205326169.png" alt="image-20230426205326169" style="zoom:80%;" /><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS。</p></li><li><p>分布式版本控制</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><img src="image-20230426204738941.png" alt="image-20230426204738941" style="zoom:80%;" /><blockquote><p>每个人都拥有全部的代码，存在安全隐患，但不会因为服务器损坏或者网络问题造成不能工作的情况。</p></blockquote></li></ol><p><strong>Git与SVN的主要区别</strong></p><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作。完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件。</p><h2 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h2><ol><li><p>下载</p><p>进入<a href="https://git-scm.com/">git</a>官网，下载对应操作系统的版本，安装时无脑下一步即可。</p><blockquote><p>注意：官网下载速度慢，可以使用<a href="http://npm.taobao.org/mirrors/git-for-windows/">淘宝镜像</a>下载。</p></blockquote></li><li><p>启动Git</p><p>安装成功后在开始菜单中会有Git选项，该选项下有几个程序，此外右击任意文件夹也可以看到对应的程序。</p><img src="image-20230426211237260.png" alt="image-20230426211237260" style="zoom:80%;" /><p>程序介绍：</p><ul><li>Git Bash：Unix与Linux风格的命令行，使用最多</li><li>Git CMD：Windows风格的命令行</li><li>Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</li></ul></li><li><p>常用的Linux命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变目录</span></span><br><span class="line"><span class="built_in">cd</span> xxx</span><br><span class="line"><span class="comment"># 回退到上一个目录，直接cd则进入默认目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 显示当前所在的目录路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># ls或ll，列出当前目录中的所有文件，只不过ll列出的内容更为详细</span></span><br><span class="line"><span class="built_in">ls</span>(ll)</span><br><span class="line"><span class="comment"># 新建一个文件，例如touch index.js =&gt; 在当前目录下新建一个index.js文件</span></span><br><span class="line"><span class="built_in">touch</span> xxx</span><br><span class="line"><span class="comment"># 删除一个文件，例如rm index.js =&gt; 删除index.js</span></span><br><span class="line"><span class="built_in">rm</span> xxx</span><br><span class="line"><span class="comment"># 新建一个目录，即新建一个文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> xxx</span><br><span class="line"><span class="comment"># 删除一个文件夹，例如rm -r src =&gt; 删除src文件夹</span></span><br><span class="line"><span class="built_in">rm</span> -r xxx</span><br><span class="line"><span class="comment"># 移动文件，mv index.html src =&gt; index.html是需要移动的文件，src是目标文件夹，这种写法必须保证文件和目标文件夹在同一目录下</span></span><br><span class="line"><span class="built_in">mv</span> xxx xxx</span><br><span class="line"><span class="comment"># 重新初始化终端</span></span><br><span class="line">reset</span><br><span class="line"><span class="comment"># 清屏</span></span><br><span class="line">clear</span><br><span class="line"><span class="comment"># 查看命令历史</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line"><span class="comment"># 帮助</span></span><br><span class="line"><span class="built_in">help</span></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>rm -rf /</code>命令切勿在Linux中尝试，会删除电脑中全部文件！</p></blockquote></li><li><p>Git配置</p><ul><li><p>查看配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -l</span><br><span class="line"><span class="comment"># 或是git config --list</span></span><br></pre></td></tr></table></figure><img src="image-20230426221142674.png" alt="image-20230426221142674" style="zoom:80%;" /></li><li><p>Git相关的配置文件</p><ul><li>系统配置：Git\etc\gitconfig（Git安装目录下的gitconfig）</li><li>用户配置：C:\Users\Administrator\.gitconfig</li></ul></li><li><p>查看不同级别的配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统配置</span></span><br><span class="line">git config --system --list</span><br><span class="line"><span class="comment"># 查看用户（global全局）配置</span></span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><img src="image-20230426221403043.png" alt="image-20230426221403043" style="zoom:80%;" /><img src="image-20230426221423487.png" alt="image-20230426221423487" style="zoom:80%;" /></li><li><p>设置用户名与邮箱（用户标识，必要）</p><p>安装Git后首先要做的就是设置用户名和邮箱，这是非常重要的，因为每次Git提交都会使用该信息，它被永远的嵌入到你的提交中。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;liuliangcong&quot;</span></span><br><span class="line"><span class="comment"># 邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;1875234438@qq.com&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Git大全：<a href="https://gitee.com/all-about-git">https://gitee.com/all-about-git</a></p></li></ol><h2 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a>Git基本理论</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区（Stage&#x2F;Index）、资源库（Repository或Git Directory）。如果再加上远程的git仓库（Remote Directory），就可以分为四个工作区域。文件在这四个区域之间的转换关系如下</p><img src="image-20230427083233306.png" alt="image-20230427083233306" /><ul><li>Workspace：工作区，即平时存放项目代码的地方；</li><li>Stage&#x2F;Index：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表的信息；</li><li>Repository：仓库区（或本地仓库），安全存放数据的位置，这里面有你提交的所有版本的数据。其中HEAD指向最新放入仓库的版本；</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换。</li></ul><p>Git的工作流程一般是这样的：</p><ol><li>在工作目录中添加、修改文件。</li><li>将需要进行版本管理的文件放入暂存区域。</li><li>将暂存区域的文件提交到Git仓库。</li></ol><h2 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h2><p>工作目录（WorkSpace）一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令即可：</p><img src="image-20230427091010175.png" alt="image-20230427091010175" style="zoom: 50%;" /><h3 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h3><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><ol><li><p>创建全新的仓库：在Git所管理项目的根目录下执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录下新建一个Git代码库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>执行后可以看到在项目目录下多出了一个.git目录，关于版本等所有信息都在这个目录中。</p></li><li><p>克隆远程目录：将远程服务器上的仓库完全镜像一份至本地，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史（版本信息）</span></span><br><span class="line">git <span class="built_in">clone</span> url</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>要对文件进行修改、提交等操作，首先要知道文件当前处于什么状态，不然可能会提交现在还不想提交的文件，或者要提交的文件没提交上。</p><ol><li><p>文件的四种状态</p><ul><li>Untracked：未跟踪，此文件在文件夹中，但并没有加入到git库，不参与版本控制，通过<code>git add</code>命令可使其状态变为<code>Staged</code>。</li><li>Unmodify：文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，则变为<code>Modified</code>；如果使用<code>git rm</code>命令移出版本库，则变为<code>Untracked</code>。</li><li>Modified：文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过<code>git add</code>命令则进入<code>staged</code>状态，通过<code>git checkout</code>命令则丢弃修改，返回<code>unmodify</code>状态。这个<code>git checkout</code>命令表示从库中取出文件，覆盖当前修改！</li><li>Staged：暂存状态，执行<code>git commit</code>命令则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件变为<code>Unmodify</code>状态。执行<code>git reset HEAD filename</code>命令取消暂存，文件状态变为<code>Modified</code>。</li></ul></li><li><p>查看文件状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区中的内容到本地仓库，-m后可添加显示的信息</span></span><br><span class="line">git commit -m <span class="string">&quot;消息内容&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>忽略文件</p><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件、临时文件、设计文件等。</p><p>在主目录下建立<code>.gitignore</code>文件，此文件有如下规则：</p><ul><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（?）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1, string2, …}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># #为注释</span><br><span class="line">*.txt# 忽略所有.txt结尾的文件</span><br><span class="line">!lib.txt# lib.txt不忽略</span><br><span class="line">/temp# 仅忽略根目录下的temp文件</span><br><span class="line">build/# 忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt# 忽略doc/*.txt，但不忽略doc/*/*.txt</span><br></pre></td></tr></table></figure></li></ol><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><img src="image-20230918112718532.png" alt="image-20230918112718532" style="zoom:80%;" /><p>git分支中常用指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><p>如果同一个文件在合并分支时都被修改了则会引起冲突，解决的办法是修改冲突文件后重新提交，选择要保留他的修改还是你的修改。</p><p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作。正常情况下在新建的dev分支上进行工作，工作完后，比如要发布，或者说dev分支代码稳定后可以合并到主分支master上。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h3><ol><li><p>注册并填写个人信息。</p></li><li><p>设置SSH公钥，实现免密码登录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入C:\Users\Administrator\.ssh目录</span></span><br><span class="line"><span class="comment"># 生成公钥</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment"># rsa加密：ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure></li><li><p>将公钥信息public key添加到码云账户中即可。</p></li></ol><h3 id="IDEA集成Git"><a href="#IDEA集成Git" class="headerlink" title="IDEA集成Git"></a>IDEA集成Git</h3><ol><li><p>在码云中创建一个自己的仓库并克隆到本地。</p><img src="image-20230427101404639.png" alt="image-20230427101404639" style="zoom:80%;" /></li><li><p>新建项目，绑定Git（将远程的Git文件目录拷贝至项目中即可），此时IDEA会发生变化。</p><img src="image-20230427101243419.png" alt="image-20230427101243419" /></li><li><p>修改文件，使用IDEA操作Git</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit提交</span></span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># push到远程仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>提交测试</p><img src="image-20230427101551280.png" alt="image-20230427101551280" style="zoom:80%;" /><blockquote><p>可以修改<code>.gitignore</code>文件来忽略非必要文件的提交。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2023/06/23/Linux/"/>
      <url>/2023/06/23/Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="入门概述"><a href="#入门概述" class="headerlink" title="入门概述"></a>入门概述</h2><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX（可移植操作系统接口）和UNIX的<code>多用户、多任务、支持多线程和多CPU</code>的操作系统。</p><p>Linux能运行主要的UNIX工具软件、应用程序和网络协议，它支持32位和64位硬件。Linux继承了Unix<code>以网络为核心</code>的设计思想，是一个性能稳定的多用户网络操作系统。</p><p>Linux的发行版：简单点说就是将Linux内核与应用软件做一个打包。</p><img src="image-20230519074458198.png" alt="image-20230519074458198"/><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS等。</p><p>Linux应用领域：今天各种场合都有使用各种Linux发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用<code>LAMP（Linux + Apache + MySQL + PHP）</code>或<code>LNMP（Linux + Nginx+ MySQL + PHP）</code>组合。</p><p>Linux vs Windows</p><table><thead><tr><th align="left">比较</th><th align="left">Windows</th><th align="left">Linux</th></tr></thead><tbody><tr><td align="left">界面</td><td align="left">界面统一，外壳程序固定所有Windows程序菜单几乎一致，快捷键也几乎相同</td><td align="left">图形界面风格依发布版不同而不同，可能互不兼容。GNU&#x2F;Linux的终端机是从UNIX传承下来，基本命令和操作方法也几乎一致。</td></tr><tr><td align="left">驱动程序</td><td align="left">驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的Windows下的驱动，也会比较头痛。</td><td align="left">由志愿者开发，由Linux核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。HP、Intel、AMD等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。</td></tr><tr><td align="left">使用</td><td align="left">使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。</td><td align="left">图形界面使用简单，容易入门。文字界面，需要学习才能掌握。</td></tr><tr><td align="left">学习</td><td align="left">系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。</td><td align="left">系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。</td></tr><tr><td align="left">软件</td><td align="left">每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。</td><td align="left">大部分软件都可以自由获取，同样功能的软件选择较少。</td></tr></tbody></table><h2 id="走进Linux系统"><a href="#走进Linux系统" class="headerlink" title="走进Linux系统"></a>走进Linux系统</h2><p>采用CentOS系统，可通过安装虚拟机或是使用云服务器进行操作。</p><blockquote><p><em>安装宝塔面板，教程：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html">https://www.bt.cn/bbs/thread-19376-1-1.html</a></em></p></blockquote><p><strong>开机</strong></p><p>开机会启动许多程序，它们在Windows中叫做<code>服务</code>（service），在Linux中就叫做<code>守护进程</code>（daemon）。</p><p><strong>关机</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将数据由内存同步到硬盘中</span></span><br><span class="line"><span class="built_in">sync</span></span><br><span class="line"><span class="comment"># 关机指令，可以通过man shutdown来查看帮助文档</span></span><br><span class="line">shutdown</span><br><span class="line"><span class="comment"># 计算机将在10分钟后关机</span></span><br><span class="line">shutdown –h 10</span><br><span class="line"><span class="comment"># 立马关机</span></span><br><span class="line">shutdown –h now</span><br><span class="line"><span class="comment"># 系统会在今天20:25关机</span></span><br><span class="line">shutdown –h 20:25</span><br><span class="line"><span class="comment"># 十分钟后关机</span></span><br><span class="line">shutdown –h +10</span><br><span class="line"><span class="comment"># 系统立马重启</span></span><br><span class="line">shutdown –r now</span><br><span class="line"><span class="comment"># 系统十分钟后重启</span></span><br><span class="line">shutdown –r +10</span><br><span class="line"><span class="comment"># 重启，等同于shutdown –r now</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># 关闭系统，等同于shutdown –h now和poweroff</span></span><br><span class="line">halt</span><br></pre></td></tr></table></figure><blockquote><p><em>不管是重启系统还是关闭系统，首先要运行<code>sync</code>命令，把内存中的数据写到磁盘中。</em></p></blockquote><p><strong>系统目录结构</strong></p><img src="image-20230506101550506.png" alt="image-20230506101550506"/><p>Linux的一切资源都挂载在这个<code>/</code>根节点下，目录解释：</p><ul><li>&#x2F;bin：bin是Binaries（二进制文件）的缩写, 这个目录存放着最经常使用的命令。</li><li>&#x2F;boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些链接文件以及镜像文件。</li><li>&#x2F;dev ： dev是Device（设备）的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li><li>&#x2F;etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li><li>&#x2F;home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li>&#x2F;lib：这个目录里存放着系统最基本的动态链接共享库，其作用类似于Windows里的DLL文件。</li><li>&#x2F;lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li>&#x2F;media：Linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux会把识别的设备挂载到这个目录下。</li><li>&#x2F;mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。</li><li>&#x2F;opt：这是给主机额外安装软件所摆放的目录，比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li>&#x2F;proc：proc是Processes（进程）的缩写，&#x2F;proc是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li><li>&#x2F;root：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>&#x2F;sbin：s就是Super User的意思，是Superuser Binaries（超级用户的二进制文件）的缩写，这里存放的是系统管理员使用的系统管理程序。</li><li>&#x2F;srv：该目录存放一些服务启动之后需要提取的数据。</li><li>&#x2F;sys：这是Linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</li><li>&#x2F;tmp：tmp是temporary（临时）的缩写，这个目录是用来存放一些临时文件的。</li><li>&#x2F;usr： usr是unix shared resources（共享资源）的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</li><li>&#x2F;usr&#x2F;bin： 系统用户使用的应用程序。</li><li>&#x2F;usr&#x2F;sbin： 超级用户使用的比较高级的管理程序和系统守护程序。</li><li>&#x2F;usr&#x2F;src： 内核源代码默认的放置目录。</li><li>&#x2F;var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下，包括各种日志文件。</li><li>&#x2F;run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li></ul><p><strong>远程登录</strong></p><p>Linux系统中通过<code>ssh</code>服务实现远程登录功能，默认ssh服务端口号为<code>22</code>。</p><p>Windows系统上远程登录客户端有SecureCRT、Putty、SSH Secure Shell、XShell等，本文使用Putty来登录远程服务器。</p><blockquote><p><em>Putty下载地址：<a href="https://www.putty.org/">https://www.putty.org/</a></em></p></blockquote><p>打开putty，在Host Name（or IP address）下面的框中输入你要登录的远程服务器IP，然后回车。</p><img src="image-20230519082836469.png" alt="image-20230519082836469"/><p>此时提示我们输入要登录的用户名。</p><img src="image-20230519093312457.png" alt="image-20230519093312457"/><p>输入root然后回车，再输入密码就能登录到远程的Linux系统了。</p><img src="image-20230519093343413.png" alt="image-20230519093343413"/><h2 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h2><p>以下是常见的处理目录的命令，可以使用<code>man [命令]</code>来查看各个命令的使用文档，如：man ls</p><ol><li><p>ls：列出目录，语法：<code>ls [参数] 目录名称</code>，参数：</p><ul><li>-a：列出所有文件，包括隐藏文件（开头为<code>.</code>的文件）；</li><li>-l：长数据串列出，包含文件的属性和权限，不包含隐藏文件。</li></ul><img src="image-20230506122437323.png" alt="image-20230506122437323"/><img src="image-20230506122527481.png" alt="image-20230506122527481"/><img src="image-20230506122556098.png" alt="image-20230506122556098"/></li><li><p>cd：cd是Change Directory的缩写，用于切换工作目录。语法：<code>cd [相对路径或绝对路径]</code></p><p><code>cd</code>、<code>cd ~</code>和<code>cd $HOME</code>：跳转到当前用户的家目录</p><ul><li>root用户，cd ~ 相当于 cd &#x2F;root</li><li>普通用户，cd ~ 相当于cd &#x2F;home&#x2F;当前用户名</li></ul><p><code>cd -</code>：返回进入此目录之前所在目录</p></li><li><p>pwd：pwd是Print Working Directory的缩写，用于显示当前所在目录。</p><p>可选参数：-P，显示出确实的路径，而非使用链接（link）路径。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /var/mail是一个链接档</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z ~]<span class="comment"># cd /var/mail</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前所在目录</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z mail]<span class="comment"># pwd</span></span><br><span class="line">/var/mail</span><br><span class="line"></span><br><span class="line"><span class="comment"># 附加参数</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z mail]<span class="comment"># pwd -P</span></span><br><span class="line">/var/spool/mail</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原因：因为/var/mail是链接档，链接到/var/spool/mail </span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z mail]<span class="comment"># ls -l /var/mail</span></span><br><span class="line">lrwxrwxrwx. 1 root root 10 Jul 11  2019 /var/mail -&gt; spool/mail</span><br></pre></td></tr></table></figure></li><li><p>mkdir：创建目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建test目录</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多级目录，附加-p参数</span></span><br><span class="line"><span class="built_in">mkdir</span> -p test1/test2/test3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件权限，附加-m参数，例如：创建权限为rwx--x--x的目录，创建后可使用ls -l进行查看</span></span><br><span class="line"><span class="built_in">mkdir</span> -m 711 test4</span><br></pre></td></tr></table></figure></li><li><p>rmdir：删除空目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归删除多级目录</span></span><br><span class="line"><span class="built_in">rmdir</span> -p test1/test2/test3</span><br></pre></td></tr></table></figure><blockquote><p><em>rmdir仅能删除空目录，可使用rm命令来删除非空目录。</em></p></blockquote></li><li><p>cp：复制文件或目录，语法：<code>cp [-adfilprsu] 来源档(source) 目标档(destination)</code>，参数：</p><ul><li>-a：相当于-pdr的意思；</li><li>-d：若来源档为链接档的属性（link file），则复制链接档属性而非文件本身；</li><li>-f：为强制的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li>-i：若目标档已经存在，在覆盖时会进行询问；</li><li>-l：进行硬式链接的链接档创建，而非复制文件本身；</li><li>-p：连同文件的属性一起复制过去，而非使用默认属性（备份常用）；</li><li>-r：递归持续复制，用于目录的复制行为；</li><li>-s：复制成为符号链接档，即快捷文件；</li><li>-u：若destination比source旧，则升级destination。</li></ul><img src="image-20230506135045481.png" alt="image-20230506135045481"/></li><li><p>rm：移除文件或目录，语法：<code>rm [-fir] 文件或目录</code>，参数：</p><ul><li>-f：就是force的意思，忽略不存在的文件，不会出现警告信息，强制删除；</li><li>-i：互动模式，删除前进行询问；</li><li>-r：递归删除，最常用在目录的删除。</li></ul><blockquote><p><em><strong>请勿使用<code>rm -rf /</code>！！！</strong></em></p></blockquote></li><li><p>mv：移动文件与目录，或修改文件与目录的名称，语法：<code>mv [-fiu] source destination</code>，参数：</p><ul><li>-f：强制，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i：若目标文件已存在，则会询问是否覆盖；</li><li>-u：若目标文件已存在，且source比较新，才会更新。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录test</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># mkdir test</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># ls</span></span><br><span class="line">llc  <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># mv test newTest</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># ls</span></span><br><span class="line">llc  newTest</span><br></pre></td></tr></table></figure></li></ol><h2 id="文件基本属性"><a href="#文件基本属性" class="headerlink" title="文件基本属性"></a>文件基本属性</h2><h3 id="查看文件属性"><a href="#查看文件属性" class="headerlink" title="查看文件属性"></a>查看文件属性</h3><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组。</p><img src="image-20230507071756409.png" alt="image-20230507071756409"/><p>实例中，boot文件的第一个属性用<code>d</code>表示，代表该文件是一个目录文件。在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为<code>d</code>则是目录</li><li>当为<code>-</code>则是文件</li><li>若为<code>l</code>则表示为链接文档（link file）</li><li>若为<code>b</code>则表示为装置文件里面的可供储存的接口设备（可随机存取装置）</li><li>若为<code>c</code>则表示为装置文件里面的串行端口设备，例如键盘、鼠标（一次性读取装置）</li></ul><p>接下来的字符中，以三个为一组，且均为<code>rwx</code>的三个参数的组合。其中，<code>r</code>代表可读（read）、<code>w</code>代表可写（write）、<code>x</code>代表可执行（execute）。要注意的是，这三个权限的<code>位置不会改变</code>，如果没有权限，就会出现减号<code>-</code>。</p><p>每个文件的属性由左边第一部分的10个字符来确定，如下图：</p><img src="image-20230507074647622.png" alt="image-20230507074647622"/><p>从左至右用0-9这些数字来表示。第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。其中：</p><p>第1、4、7位表示读权限，如果用<code>r</code>字符表示，则有读权限，如果用<code>-</code>字符表示，则没有读权限。</p><p>第2、5、8位表示写权限，如果用<code>w</code>字符表示，则有写权限，如果用<code>-</code>字符表示，则没有写权限。</p><p>第3、6、9位表示可执行权限，如果用<code>x</code>字符表示，则有执行权限，如果用<code>-</code>字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><h3 id="修改文件属性"><a href="#修改文件属性" class="headerlink" title="修改文件属性"></a>修改文件属性</h3><ol><li><p>chgrp：更改文件<code>属组</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p></li><li><p>chown：更改文件<code>属主</code>，也可以同时更改文件属组</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> [–R] 属主名 文件名</span><br><span class="line"><span class="built_in">chown</span> [-R] 属主名:属组名 文件名</span><br></pre></td></tr></table></figure></li><li><p>chmod：更改文件9个属性</p><p>Linux文件属性有两种设置方法，一种是数字（常用），一种是符号。</p><p>Linux文件的基本权限有九个，分别是owner&#x2F;group&#x2F;others（拥有者&#x2F;组&#x2F;其他）三种身份各有自己的read&#x2F;write&#x2F;execute权限，可以使用数字来代表各个权限：</p><ul><li>r：4</li><li>w：2</li><li>x：1</li></ul><p>每种身份（owner&#x2F;group&#x2F;others）各自的三个权限（r&#x2F;w&#x2F;x）对应数值是需要累加的，例如当权限为：<code>-rwxrwx---</code>，数值则是：</p><ul><li>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li><li>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li><li>others &#x3D; — &#x3D; 0+0+0 &#x3D; 0</li></ul><p>变更权限的指令chmod的语法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-R] xyz 文件或目录</span><br><span class="line"><span class="comment"># 其中xyz为rwx属性数值相加的结果，例如770。</span></span><br><span class="line"><span class="built_in">chmod</span> 770 filename</span><br></pre></td></tr></table></figure></li></ol><h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><p>Linux系统中使用以下命令来查看文件的内容：</p><ol><li><p>cat：从第一行开始显示文件内容，参数：</p><ul><li><p>-A：相当于<code>-vET</code>的整合选项，可列出一些特殊字符而不是空白而已；</p></li><li><p>-b：列出行号，仅针对非空白行做行号显示，空白行不标行号；</p></li><li><p>-E：将结尾的换行以<code>$</code>显示出来；</p></li><li><p>-n：列出行号，连同空白行也会有行号；</p></li><li><p>-T：将<code>Tab</code>键以<code>^I</code>显示出来；</p></li><li><p>-v：列出一些看不出来的特殊字符。</p></li></ul><img src="image-20230507091611801.png" alt="image-20230507091611801"/></li><li><p>tac：tac与cat命令刚好相反，从最后一行开始显示。</p></li><li><p>nl：显示行号，语法：<code>nl [-bnw] 文件</code>，参数：</p><ul><li><p>-b：指定行号显示的方式，主要有两种：</p><p>-b a：无论是否为空行，都列出行号（类似cat -n）。</p><p>-b t：空白行不标行号（默认值）。</p></li><li><p>-n：列出行号表示的方法，主要有三种：</p><p>-n ln：行号在荧幕的最左方显示。</p><p>-n rn：行号在自己栏位的最右方显示，且不加0。</p><p>-n rz：行号在自己栏位的最右方显示，且加0。</p></li><li><p>-w：行号占用的位数。</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z network-scripts]<span class="comment"># nl ifcfg-eth0</span></span><br><span class="line">     1  DEVICE=eth0</span><br><span class="line">     2  BOOTPROTO=dhcp</span><br><span class="line">     3  ONBOOT=<span class="built_in">yes</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z network-scripts]<span class="comment"># nl -n ln ifcfg-eth0</span></span><br><span class="line">1       DEVICE=eth0</span><br><span class="line">2       BOOTPROTO=dhcp</span><br><span class="line">3       ONBOOT=<span class="built_in">yes</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z network-scripts]<span class="comment"># nl -n rn ifcfg-eth0</span></span><br><span class="line">     1  DEVICE=eth0</span><br><span class="line">     2  BOOTPROTO=dhcp</span><br><span class="line">     3  ONBOOT=<span class="built_in">yes</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z network-scripts]<span class="comment"># nl -n rz ifcfg-eth0</span></span><br><span class="line">000001  DEVICE=eth0</span><br><span class="line">000002  BOOTPROTO=dhcp</span><br><span class="line">000003  ONBOOT=<span class="built_in">yes</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z network-scripts]<span class="comment"># nl -n rz -w 2 ifcfg-eth0</span></span><br><span class="line">01      DEVICE=eth0</span><br><span class="line">02      BOOTPROTO=dhcp</span><br><span class="line">03      ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure></li><li><p>more：一页一页的显示文件内容</p><img src="image-20230519170600728.png" alt="image-20230519170600728"/><p>在more这个程序的运行过程中，可以使用以下按键：</p><ul><li>空格：代表向下翻一页</li><li>回车：代表向下翻一行</li><li><code>:f</code>：输出文件名及当前所在行</li><li><code>q</code>：离开more</li><li>b或ctrl+b：代表往回翻页（只对文件有用，对管线无用）</li></ul></li><li><p>less：与more类似。</p><ul><li>空格：代表向下翻一页</li><li>回车：代表向下翻一行</li><li>上下键：表示向上翻一行或向下翻一行</li><li><code>:f</code>：输出文件名及当前所在行</li><li><code>q</code>：离开less</li><li>b或ctrl+b：代表往回翻页</li><li>&#x2F;字符串：向下搜寻字符串</li><li>?字符串：向上搜寻字符串</li></ul><blockquote><p><em>可通过<code>n</code>或<code>N</code>进行向下或向上搜寻，当使用<code>/*</code>搜寻时n代表下一个，N代表上一个，使用<code>?*</code>搜寻时相反。</em></p></blockquote></li><li><p>head：显示文件前面几行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> [-n number] 文件</span><br><span class="line"><span class="comment"># number表示显示几行，默认显示前面10行</span></span><br></pre></td></tr></table></figure><img src="image-20230507092711695.png" alt="image-20230507092711695"/></li><li><p>tail：显示文件后面几行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> [-n number] 文件</span><br><span class="line"><span class="comment"># 默认显示最后10行</span></span><br></pre></td></tr></table></figure></li><li><p>其他</p><p><code>ifconfig</code>：此命令用于查看网络配置</p><p>网络配置目录，文件地址 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;</p><img src="image-20230507084019027.png" alt="image-20230507084019027"/></li></ol><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Linux链接分两种，一种被称为硬链接，另一种被称为软链接（符号链接）。默认情况下，<code>ln</code>命令产生硬链接。</p><p><strong>硬链接</strong></p><p>硬链接指通过索引节点来进行链接。在Linux文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号（Inode Index）。在Linux中，多个文件名指向同一索引节点是存在的。比如：A是B的硬链接（A和B都是文件名），则A的目录项中的inode节点号与B的目录项中的inode节点号相同，即一个inode节点对应两个不同的文件名，两个文件名指向同一个文件，A和B对文件系统来说是完全平等的，删除其中任何一个都不会影响另外一个的访问。</p><p>硬链接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬链接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的链接，只删除一个链接并不影响索引节点本身和其它的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬链接文件均被删除。</p><p><strong>软链接</strong></p><p>另外一种链接称之为符号链接，也叫软链接。软链接文件类似于Windows的快捷方式，它实际上是一个特殊的文件。在符号链接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A是B的软链接（A和B都是文件名），A的目录项中的inode节点号与B的目录项中的inode节点号不相同，A和B指向的是两个不同的inode，继而指向两块不同的数据块。但是A的数据块中存放的只是B的路径名（可以根据这个找到B的目录项）。A和B之间是“主从”关系，如果B被删除了，A仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><p><strong>测试</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># touch f1 # 创建测试文件f1</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># ls</span></span><br><span class="line">f1</span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># ln f1 f2 # 创建f1的一个硬链接文件f2</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># ln -s f1 f3 # 创建f1的一个软链接文件f3</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># ls -li # -i参数显示文件的inode节点信息</span></span><br><span class="line">664867 -rw-r--r-- 2 root root    0 May  7 10:12 f1</span><br><span class="line">664867 -rw-r--r-- 2 root root    0 May  7 10:12 f2</span><br><span class="line">664870 lrwxrwxrwx 1 root root    2 May  7 10:13 f3 -&gt; f1</span><br></pre></td></tr></table></figure><p>从上面的结果中可以看出，硬链接文件f2与原文件f1的inode节点相同，均为664867，然而软链接文件f3的inode节点不同。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo向文件写入字符串</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># echo &quot;I am f1.&quot; &gt;&gt; f1</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># cat f1</span></span><br><span class="line">I am f1.</span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># cat f2</span></span><br><span class="line">I am f1.</span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># cat f3</span></span><br><span class="line">I am f1.</span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># rm -f f1</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># cat f2</span></span><br><span class="line">I am f1.</span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># cat f3</span></span><br><span class="line"><span class="built_in">cat</span>: f3: No such file or directory</span><br></pre></td></tr></table></figure><p>通过上面的测试可以看出：当删除原始文件f1后，硬链接f2不受影响，但是软链接f3无效。</p><blockquote><p>删除软链接f3，对f1、f2无影响；</p><p>删除硬链接f2，对f1、f3无影响；</p><p>删除原文件f1，对硬链接f2无影响，但会导致软链接f3失效；</p><p>同时删除原文件f1和硬链接f2，整个文件会真正的被删除。</p></blockquote><h2 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h2><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。用户在登录时输入正确的用户名和口令后，就能够进入系统和自己的主目录。</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、修改与删除。</li><li>用户口令的管理。</li><li>用户组的管理。</li></ul><h3 id="用户账号管理"><a href="#用户账号管理" class="headerlink" title="用户账号管理"></a>用户账号管理</h3><p><strong>添加账号</strong></p><p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。刚添加的账号是被锁定的，无法使用。</p><p>语法：<code>useradd 选项 用户名</code>，其中用户名指新账号的登录名。选项如下：</p><ul><li>-c：comment，指定一段注释性描述。</li><li>-d：目录，指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g：用户组，指定用户所属的用户组。</li><li>-G：用户组，指定用户所属的附加组。</li><li>-m：使用者目录如不存在则自动建立。</li><li>-s：Shell文件，指定用户的登录Shell。</li><li>-u：用户号，指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z /]<span class="comment"># cd /home</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># ls</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># useradd llc</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># ls</span></span><br><span class="line">llc</span><br></pre></td></tr></table></figure><blockquote><p><em>默认创建同名用户主目录，若该目录存在则提示目录已存在。</em></p><img src="image-20230520070717325.png" alt="image-20230520070717325"/><p><em>增加用户账号就是在<code>/etc/passwd</code>文件中为新用户增加一条记录，同时更新其他系统文件如<code>/etc/shadow</code>、<code>/etc/group</code>等。</em></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># cat /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">...</span><br><span class="line">llc:x:1000:1000::/home/llc:/bin/bash</span><br><span class="line"></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># cat /etc/shadow</span></span><br><span class="line">root:$6<span class="variable">$7w931</span>/Q.<span class="variable">$Y4WlA3o</span>.xKsgPECoLpX8dleBO5EoXmo9THNePvqvkg0ZK07B0O9bSXCdgc1JDi4llK39R804VkRufJIQbfQYT0:19462:0:99999:7:::</span><br><span class="line">...</span><br><span class="line">llc:!!:19496:0:99999:7:::</span><br><span class="line"></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># cat /etc/group</span></span><br><span class="line">root:x:0:</span><br><span class="line">...</span><br><span class="line">llc:x:1000:</span><br></pre></td></tr></table></figure></blockquote><p><strong>切换用户</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从root切换到普通用户</span></span><br><span class="line">su username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从普通用户切换到root用户</span></span><br><span class="line"><span class="comment"># 在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户</span></span><br><span class="line">sudo su</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-</span></span><br><span class="line">su - llc</span><br></pre></td></tr></table></figure><p><strong>删除用户</strong></p><p>删除用户账号就是要将&#x2F;etc&#x2F;passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>语法：<code>userdel 选项 用户名</code>，常用的选项是<code>-r</code>，它的作用是把用户的主目录一起删除。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel -r llc</span><br><span class="line"><span class="comment"># 此命令删除用户llc在系统文件中（主要是/etc/passwd、/etc/shadow、/etc/group等）的记录，同时删除用户的主目录。</span></span><br></pre></td></tr></table></figure><p><strong>修改账号</strong></p><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>语法：<code>usermod 选项 用户名</code>，常用的选项包括-c、-d、-m、-g、-G、-s、-u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># useradd llc</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># ls</span></span><br><span class="line">llc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户llc的主目录</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># usermod -d /home/llcFile -m llc</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># ls</span></span><br><span class="line">llcFile</span><br></pre></td></tr></table></figure><blockquote><p><em>使用<code>-l</code>选项修改用户名，例如：<code>usermod -l lc llc</code>，将用户llc的用户名改为lc。</em></p></blockquote><h3 id="用户口令管理"><a href="#用户口令管理" class="headerlink" title="用户口令管理"></a>用户口令管理</h3><p>用户账号刚创建时没有口令，必须为其指定口令后才可以使用。</p><p>超级用户可以为自己或其他用户指定口令，普通用户只能修改自己的口令。</p><p>语法：<code>passwd 选项 用户名</code>，选项：</p><ul><li>-l：锁定口令，即禁用账号。</li><li>-u：口令解锁。</li><li>-d：使账号无口令。</li><li>-f：强迫用户下次登录时修改口令。</li></ul><blockquote><p><em>如果默认用户名，即用户名为空，则表示修改当前用户的口令。</em></p></blockquote><p>如果是超级用户，可以使用下面的命令指定任何用户的口令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd llc</span><br><span class="line">New password:******</span><br><span class="line">Retype new password:******</span><br></pre></td></tr></table></figure><p>如果是普通用户，可以使用下面的命令修改自己的口令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd</span><br><span class="line">(current) UNIX password:****** <span class="comment"># 原口令</span></span><br><span class="line">New password:******</span><br><span class="line">Retype new password:******</span><br></pre></td></tr></table></figure><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，不需要知道原口令。</p><p>为用户指定空口令时，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd -d llc</span><br><span class="line"><span class="comment"># 此命令将用户llc的口令删除，这样系统就不再允许该用户登录了。</span></span><br></pre></td></tr></table></figure><p>passwd命令还可以使用<code>-l</code>（lock）选项锁定某一用户，使其不能登录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd -l llc</span><br></pre></td></tr></table></figure><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、修改和删除，实际上就是对<code>/etc/group</code>文件的更新。</p><p><strong>添加用户组</strong></p><p>语法：<code>groupadd 选项 用户组</code>，选项：</p><ul><li>-g：GID，指定新用户组的组标识号（GID）。</li><li>-o：一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd group1</span><br><span class="line"><span class="comment"># 此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1</span></span><br><span class="line"></span><br><span class="line">groupadd -g 101 group2</span><br><span class="line"><span class="comment"># 此命令向系统中增加了一个新组group2，同时指定新组的组标识号为101</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/group</span><br><span class="line"><span class="comment"># root:x:0:</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># group1:x:1001:</span></span><br><span class="line"><span class="comment"># group2:x:101:</span></span><br></pre></td></tr></table></figure><p><strong>删除用户组</strong></p><p>语法：<code>groupdel 用户组</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从系统中删除组group1</span></span><br><span class="line">groupdel group1</span><br></pre></td></tr></table></figure><p><strong>修改用户组的属性</strong></p><p>语法：<code>groupmod 选项 用户组</code>，选项：</p><ul><li>-g：GID，为用户组指定新的组标识号。</li><li>-o：与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n：用户组的新名称。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将组group2的组标识号修改为102。</span></span><br><span class="line">groupmod -g 102 group2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将组group2的组名修改为group3。</span></span><br><span class="line">groupmod -n group3 group2</span><br></pre></td></tr></table></figure><p><strong>切换组</strong></p><p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p><p>用户可以在登录后，使用命令<code>newgrp</code>切换到其他用户组，这个命令的参数就是目标用户组。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">newgrp root</span><br><span class="line"><span class="comment"># 这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组</span></span><br></pre></td></tr></table></figure><h3 id="与用户账号有关的系统文件"><a href="#与用户账号有关的系统文件" class="headerlink" title="与用户账号有关的系统文件"></a>与用户账号有关的系统文件</h3><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p><p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括&#x2F;etc&#x2F;passwd、&#x2F;etc&#x2F;shadow、&#x2F;etc&#x2F;group等。</p><p><strong>&#x2F;etc&#x2F;passwd</strong></p><p>&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件，Linux系统中的每个用户都在&#x2F;etc&#x2F;passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。这个文件对所有用户都是可读的，它的内容类似下面的例子：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>从上面的例子我们可以看到，&#x2F;etc&#x2F;passwd中一行记录对应着一个用户，每行记录又被冒号<code>:</code>分隔为7个字段，其格式和具体含义如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure><ol><li><p>用户名：代表用户账号的字符串。</p><p>通常长度不超过8个字符，并且由大小写字母和&#x2F;或数字组成。登录名中不能有冒号<code>:</code>，因为冒号在这里是分隔符。</p><p>为了兼容起见，登录名中最好不要包含点字符<code>.</code>，并且不使用连字符<code>-</code>和加号<code>+</code>打头。</p></li><li><p>口令：一些系统中，存放着加密后的用户口令字。</p><p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于&#x2F;etc&#x2F;passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到&#x2F;etc&#x2F;shadow文件中，而在&#x2F;etc&#x2F;passwd文件的口令字段中只存放一个特殊的字符，例如”x“或者”*“。</p></li><li><p>用户标识号：整数，系统内部用它来标识用户。</p><p>一般情况下它与用户名是一一对应的，如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p><p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p></li><li><p>组标识号：记录用户所属的用户组。</p><p>它对应着&#x2F;etc&#x2F;group文件中的一条记录。</p></li><li><p>注释性描述：记录用户的一些个人情况。</p><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</p></li><li><p>主目录：用户的起始工作目录。</p><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p></li><li><p>用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh（Bourne Shell）、csh（C Shell）、ksh（Korn Shell）、tcsh（TENEX&#x2F;TOPS-20 type C Shell）、bash（Bourne Again Shell）等。</p><p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为&#x2F;bin&#x2F;sh。</p><p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p><p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p></li><li><p>系统中有一类用户称为伪用户（pseudo users）。</p><p>这些用户在&#x2F;etc&#x2F;passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p><p>常见的伪用户如下所示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">伪 用 户 含 义</span><br><span class="line">bin 拥有可执行的用户命令文件</span><br><span class="line">sys 拥有系统文件</span><br><span class="line">adm 拥有帐户文件</span><br><span class="line">uucp UUCP使用</span><br><span class="line">lp lp或lpd子系统使用</span><br><span class="line">nobody NFS使用</span><br></pre></td></tr></table></figure><p>除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit、cron、mail、usenet等，它们也都各自为相关的进程和文件所需要。</p></li></ol><p><strong>&#x2F;etc&#x2F;shadow</strong></p><p>由于&#x2F;etc&#x2F;passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是&#x2F;etc&#x2F;shadow文件，只有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z ~]<span class="comment"># cat /etc/shadow</span></span><br><span class="line">root:$6<span class="variable">$7w931</span>/Q.<span class="variable">$Y4WlA3o</span>.xKsgPECoLpX8dleBO5EoXmo9THNePvqvkg0ZK07B0O9bSXCdgc1JDi4llK39R804VkRufJIQbfQYT0:19462:0:99999:7:::</span><br><span class="line">bin:*:17834:0:99999:7:::</span><br><span class="line">daemon:*:17834:0:99999:7:::</span><br><span class="line">adm:*:17834:0:99999:7:::</span><br><span class="line">lp:*:17834:0:99999:7:::</span><br><span class="line"><span class="built_in">sync</span>:*:17834:0:99999:7:::</span><br><span class="line">shutdown:*:17834:0:99999:7:::</span><br><span class="line">halt:*:17834:0:99999:7:::</span><br><span class="line">mail:*:17834:0:99999:7:::</span><br><span class="line">operator:*:17834:0:99999:7:::</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;shadow中的记录行与&#x2F;etc&#x2F;passwd中的一一对应，它由pwconv命令根据&#x2F;etc&#x2F;passwd中的数据自动产生。它的文件格式与&#x2F;etc&#x2F;passwd类似，由若干个字段组成，字段之间用<code>:</code>隔开，这些字段是：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure><ol><li>登录名：与&#x2F;etc&#x2F;passwd文件中的登录名相一致的用户账号</li><li>口令：字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合{ .&#x2F;0-9A-Za-z }中的字符，则对应的用户不能登录。</li><li>最后一次修改时间：表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li><li>最小时间间隔：指的是两次修改口令之间所需的最小天数。</li><li>最大时间间隔：指的是口令保持有效的最大天数。</li><li>警告时间：表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li><li>不活动时间：表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li><li>失效时间：字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li></ol><p><strong>&#x2F;etc&#x2F;group</strong></p><p>用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。</p><p>将用户分组是Linux系统中对用户进行管理及控制访问权限的一种手段。每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p><p>当一个用户同时是多个组中的成员时，在&#x2F;etc&#x2F;passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z ~]<span class="comment"># cat /etc/group</span></span><br><span class="line">root:x:0:</span><br><span class="line">bin:x:1:</span><br><span class="line">daemon:x:2:</span><br><span class="line">sys:x:3:</span><br><span class="line">adm:x:4:</span><br><span class="line"><span class="built_in">tty</span>:x:5:</span><br><span class="line">disk:x:6:</span><br><span class="line">lp:x:7:</span><br><span class="line">mem:x:8:</span><br><span class="line">kmem:x:9:</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中，此文件的格式也类似于&#x2F;etc&#x2F;passwd文件，由冒号<code>:</code>隔开若干个字段，这些字段有：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">组名:口令:组标识号:组内用户列表</span><br></pre></td></tr></table></figure><ol><li>组名：用户组的名称，由字母或数字构成。与&#x2F;etc&#x2F;passwd中的登录名一样，组名不应重复。</li><li>口令：字段存放的是用户组加密后的口令字。一般Linux系统的用户组都没有口令，即这个字段一般为空，或者是*。</li><li>组标识号：与用户标识号类似，也是一个整数，被系统内部用来标识组。</li><li>组内用户列表：属于这个组的所有用户的列表，不同用户之间用逗号<code>,</code>分隔。这个用户组可能是用户的主组，也可能是附加组。</li></ol><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p>Linux磁盘管理常用命令为 <code>df</code>、<code>du</code>。</p><ul><li>df：列出文件系统的整体磁盘使用量</li><li>du：检查磁盘空间使用量</li></ul><p><strong>df</strong></p><p>检查文件系统的磁盘空间占用情况，可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a：列出所有的文件系统，包括系统特有的&#x2F;proc等文件系统；</li><li>-k：以KBytes的容量显示各文件系统；</li><li>-m：以MBytes的容量显示各文件系统；</li><li>-h：以人们较易阅读的GBytes、MBytes、KBytes等格式自行显示；</li><li>-H：以M&#x3D;1000K取代M&#x3D;1024K的进位方式；</li><li>-T：显示文件系统类型，连同该partition的filesystem名称（例如ext3）也列出；</li><li>-i：不用硬盘容量，而以inode的数量来显示。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在Linux底下如果df没有加任何选项，那么默认会将系统内所有的（不含特殊内存内的文件系统与 swap）都以1Kbytes的容量列出来</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/vda1       41147472 3348380  35895600   9% /</span><br><span class="line">devtmpfs          877544       0    877544   0% /dev</span><br><span class="line">tmpfs             888200       0    888200   0% /dev/shm</span><br><span class="line">tmpfs             888200     448    887752   1% /run</span><br><span class="line">tmpfs             888200       0    888200   0% /sys/fs/cgroup</span><br><span class="line">tmpfs             177644       0    177644   0% /run/user/0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将容量结果以易读的容量格式显示出来</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G  3.2G   35G   9% /</span><br><span class="line">devtmpfs        857M     0  857M   0% /dev</span><br><span class="line">tmpfs           868M     0  868M   0% /dev/shm</span><br><span class="line">tmpfs           868M  448K  867M   1% /run</span><br><span class="line">tmpfs           868M     0  868M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           174M     0  174M   0% /run/user/0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将系统内所有特殊文件的格式及名称都列出来</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># df -aT</span></span><br><span class="line">Filesystem     Type        1K-blocks    Used Available Use% Mounted on</span><br><span class="line">rootfs         -                   -       -         -    - /</span><br><span class="line">sysfs          sysfs               0       0         0    - /sys</span><br><span class="line">proc           proc                0       0         0    - /proc</span><br><span class="line">devtmpfs       devtmpfs       877544       0    877544   0% /dev</span><br><span class="line">securityfs     securityfs          0       0         0    - /sys/kernel/security</span><br><span class="line">tmpfs          tmpfs          888200       0    888200   0% /dev/shm</span><br><span class="line">devpts         devpts              0       0         0    - /dev/pts</span><br><span class="line">tmpfs          tmpfs          888200     448    887752   1% /run</span><br><span class="line">tmpfs          tmpfs          888200       0    888200   0% /sys/fs/cgroup</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/systemd</span><br><span class="line">pstore         pstore              0       0         0    - /sys/fs/pstore</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/pids</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/blkio</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpu,cpuacct</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/freezer</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/memory</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/net_cls,net_prio</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpuset</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/perf_event</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/devices</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/hugetlb</span><br><span class="line">configfs       configfs            0       0         0    - /sys/kernel/config</span><br><span class="line">/dev/vda1      ext4         41147472 3348392  35895588   9% /</span><br><span class="line">systemd-1      -                   -       -         -    - /proc/sys/fs/binfmt_misc</span><br><span class="line">hugetlbfs      hugetlbfs           0       0         0    - /dev/hugepages</span><br><span class="line">debugfs        debugfs             0       0         0    - /sys/kernel/debug</span><br><span class="line">mqueue         mqueue              0       0         0    - /dev/mqueue</span><br><span class="line">tmpfs          tmpfs          177644       0    177644   0% /run/user/0</span><br><span class="line">binfmt_misc    binfmt_misc         0       0         0    - /proc/sys/fs/binfmt_misc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 /etc 底下的可用的磁盘容量以易读的容量格式显示</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z home]<span class="comment"># df -h /etc</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G  3.2G   35G   9% /</span><br></pre></td></tr></table></figure><p><strong>du</strong></p><p>du命令用来查看使用空间，但是与df命令不同的是du命令是对文件和目录磁盘使用的空间的查看。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h：以人们较易读的容量格式（G&#x2F;M）显示；</li><li>-s：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S：不包括子目录下的总计，与-s有点差别。</li><li>-k：以KBytes列出容量显示；</li><li>-m：以MBytes列出容量显示；</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）</span></span><br><span class="line"><span class="comment"># 直接输入du没有加任何选项时，则du会分析当前所在目录的文件与目录所占用的硬盘空间。</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z nginx]<span class="comment"># du</span></span><br><span class="line">72      ./conf</span><br><span class="line">4       ./fastcgi_temp</span><br><span class="line">4       ./uwsgi_temp</span><br><span class="line">4       ./scgi_temp</span><br><span class="line">4       ./proxy_temp</span><br><span class="line">3736    ./sbin</span><br><span class="line">4       ./client_body_temp</span><br><span class="line">12      ./html</span><br><span class="line">128     ./logs</span><br><span class="line">3972    . <span class="comment"># 这个目录(.)所占用的总量</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件的容量也列出来</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z nginx]<span class="comment"># du -a</span></span><br><span class="line">4       ./conf/scgi_params</span><br><span class="line">...</span><br><span class="line">8       ./conf/mime.types</span><br><span class="line">72      ./conf</span><br><span class="line">4       ./fastcgi_temp</span><br><span class="line">4       ./uwsgi_temp</span><br><span class="line">4       ./scgi_temp</span><br><span class="line">4       ./proxy_temp</span><br><span class="line">3732    ./sbin/nginx</span><br><span class="line">3736    ./sbin</span><br><span class="line">4       ./client_body_temp</span><br><span class="line">4       ./html/index.html</span><br><span class="line">4       ./html/50x.html</span><br><span class="line">12      ./html</span><br><span class="line">44      ./logs/error.log</span><br><span class="line">80      ./logs/access.log</span><br><span class="line">128     ./logs</span><br><span class="line">3972    .</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查根目录底下每个目录所占用的容量</span></span><br><span class="line">[root@iZf8zde65mian5izoh0918Z nginx]<span class="comment"># du -sm /*</span></span><br><span class="line">0       /bin</span><br><span class="line">132     /boot</span><br><span class="line">...</span><br><span class="line">1       /tmp</span><br><span class="line">2385    /usr</span><br><span class="line">581     /var</span><br></pre></td></tr></table></figure><blockquote><p>通配符<code>*</code>来代表每个目录。</p></blockquote><p><strong>磁盘挂载与卸除</strong></p><p>根文件系统之外的其他文件要想能够被访问，都必须通过”关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”，解除此关联关系的过程称之为“卸载”。</p><p>Linux的磁盘挂载使用<code>mount</code>命令，卸载使用<code>umount</code>命令。</p><p>磁盘挂载语法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将/dev/hdc6挂载到/mnt/hdc6上面</span></span><br><span class="line">[root@www ~]<span class="comment"># mkdir /mnt/hdc6</span></span><br><span class="line">[root@www ~]<span class="comment"># mount /dev/hdc6 /mnt/hdc6</span></span><br><span class="line">[root@www ~]<span class="comment"># df</span></span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">...</span><br><span class="line">/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6</span><br></pre></td></tr></table></figure><p>磁盘卸载语法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f：强制卸除，可用在类似网络文件系统（NFS）无法读取到的情况下；</li><li>-n：不升级&#x2F;etc&#x2F;mtab情况下卸除。</li></ul><p>实例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载/dev/hdc6</span></span><br><span class="line">[root@www ~]<span class="comment"># umount /dev/hdc6</span></span><br></pre></td></tr></table></figure><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>在Linux中，每一个程序都有自己的一个进程，每一个进程都有一个id号。</p><p>每一个进程都有一个父进程。</p><p>进程可以有两种存在方式：前台、后台运行。一般的话服务都是后台运行的，基本的程序都是前台运行的。</p><p>ps：查看当前系统中正在执行的各种进程的信息。选项：</p><ul><li>-a：当前进程</li><li>-u：以用户的信息显示进程</li><li>-x：显示后台运行进程的参数</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps -aux 查看所有进程</span></span><br><span class="line"><span class="comment"># | 管道符</span></span><br><span class="line"><span class="comment"># grep 过滤，查找文件中符合条件的字符串</span></span><br><span class="line">ps -aux|grep mysql</span><br></pre></td></tr></table></figure><p>ps -ef：可以查看父进程的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef|grep mysql</span><br></pre></td></tr></table></figure><p>进程树：pstree -pu</p><ul><li>-p：显示父id</li><li>-u：显示用户组</li></ul><p>结束进程：<code>kill -9 进程id</code></p><h2 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h2><p><code>vi/vim</code>共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode，也称编辑模式）和底线命令模式（Last line mode）。</p><img src="image-20230513080407565.png" alt="image-20230513080407565"/><p><strong>命令模式</strong></p><p>用户刚刚启动vi&#x2F;vim，便进入了命令模式。此状态下敲击键盘动作会被Vim识别为命令，而非输入字符，比如此时按下i，并不会输入一个字符，而被当作命令。以下是常用的几个命令：</p><ul><li><code>i</code>：切换到输入模式</li><li><code>x</code>：删除当前光标所在处的字符</li><li><code>:</code>：切换到底线命令模式</li></ul><p>若想要编辑文本：启动Vim，进入命令模式，按下i，切换到输入模式。</p><p><strong>输入模式</strong></p><p>在命令模式下按下<code>i</code>就进入了输入模式。在输入模式中，可以使用以下按键：</p><ul><li>Enter：回车键，换行</li><li>Backspace：退格键，删除光标前一个字符</li><li>Delete：删除键，删除光标所在字符</li><li>方向键：移动光标</li><li>Home&#x2F;End：移动光标到行首&#x2F;行尾</li><li>Page Up&#x2F;Page Down：上&#x2F;下翻页</li><li>Insert：切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li>Esc：退出输入模式，切换到命令模式</li></ul><p><strong>底线命令模式</strong></p><p>在命令模式下按下<code>:</code>（英文冒号）就进入了底线命令模式，按Esc键可退出底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。在底线命令模式中，基本的命令有：</p><ul><li><code>q</code>：退出程序</li><li><code>w</code>：保存文件</li></ul><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件存在则打开，不存在则创建，并进入命令模式</span></span><br><span class="line">vim test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按下i进入输入模式，输入Hello World</span></span><br><span class="line"><span class="comment"># 按下Esc键，退出输入模式，回到命令模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按下:wq，保存并退出vim</span></span><br></pre></td></tr></table></figure><img src="image-20230519184451720.png" alt="image-20230519184451720"/><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="jdk安装（rpm安装）"><a href="#jdk安装（rpm安装）" class="headerlink" title="jdk安装（rpm安装）"></a>jdk安装（rpm安装）</h3><ol><li><p>下载 jdk rpm包<code>jdk-8u202-linux-x64.rpm</code></p><blockquote><p>可以去oracle官网下载，也可以去以下地址下载：<a href="https://repo.huaweicloud.com/java/jdk/">https://repo.huaweicloud.com/java/jdk/</a></p><p>可以本地下载后上传，也可以直接在Linux上下载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.rpm</span><br></pre></td></tr></table></figure></blockquote></li><li><p>检查是否存在java环境：<code>java -version</code></p></li><li><p>卸载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测jdk版本信息</span></span><br><span class="line">rpm -qa|grep jdk</span><br><span class="line"><span class="comment"># 强制卸载</span></span><br><span class="line">rpm -e --nodeps xxx</span><br></pre></td></tr></table></figure><img src="image-20230515162127941.png" alt="image-20230515162127941"/></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传jdk对应的rpm包到/home/llc目录下</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh jdk-8u202-linux-x64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></li></ol><h3 id="Tomcat安装（解压缩安装）"><a href="#Tomcat安装（解压缩安装）" class="headerlink" title="Tomcat安装（解压缩安装）"></a>Tomcat安装（解压缩安装）</h3><ol><li><p>下载tomcat：<code>apache-tomcat-9.0.54.tar.gz</code></p><blockquote><p>可以本地下载后上传，也可以直接在Linux上下载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.54/bin/apache-tomcat-9.0.54.tar.gz</span><br></pre></td></tr></table></figure></blockquote></li><li><p>解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-9.0.54.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>运行tomcat</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入apache-tomcat-9.0.54下的bin目录</span></span><br><span class="line"><span class="comment"># 执行：startup.sh --&gt; 启动tomcat</span></span><br><span class="line"><span class="comment"># 执行：shutdown.sh --&gt; 关闭tomcat</span></span><br><span class="line">./startup.sh</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure></li><li><p>访问测试：公网IP:8080</p><blockquote><p>注意：安全组需要开放8080端口。</p></blockquote></li></ol><blockquote><p>防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all    <span class="comment"># 查看全部信息</span></span><br><span class="line">firewall-cmd --list-ports  <span class="comment"># 只看端口信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令含义：</span></span><br><span class="line">--zone <span class="comment"># 作用域</span></span><br><span class="line">--add-port=80/tcp  <span class="comment"># 添加端口，格式为：端口/通讯协议</span></span><br><span class="line">--permanent   <span class="comment"># 永久生效，没有此参数重启后失效</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="Docker安装（yum安装）"><a href="#Docker安装（yum安装）" class="headerlink" title="Docker安装（yum安装）"></a>Docker安装（yum安装）</h3><p>官网安装参考手册：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><ol><li><p>查看服务器系统版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8zde65mian5izoh0918Z ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure></li><li><p>安装gcc相关</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br><span class="line"><span class="comment"># yum install 为安装命令</span></span><br><span class="line"><span class="comment"># -y 所有的提示都为y</span></span><br></pre></td></tr></table></figure></li><li><p>卸载旧版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 官网版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">          docker-client \</span><br><span class="line">          docker-client-latest \</span><br><span class="line">          docker-common \</span><br><span class="line">          docker-latest \</span><br><span class="line">          docker-latest-logrotate \</span><br><span class="line">          docker-logrotate \</span><br><span class="line">          docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装需要的软件包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>设置仓库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国内镜像</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>更新yum软件包索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></li><li><p>安装Docker CE</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动Docker</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过运行映像验证Docker引擎安装是否成功</span></span><br><span class="line">docker run hello-world</span><br><span class="line"><span class="comment"># 此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条确认消息并退出</span></span><br><span class="line"></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><img src="image-20230517070854683.png" alt="image-20230517070854683"/></li></ol><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>Linux wget是一个下载文件的工具，用于命令行。</p><ol><li><p>安装wget：<code>yum install wget</code></p></li><li><p>下载示例：</p><ul><li><p>使用<code>wget</code>下载单个文件，下载过程中会显示进度条。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.54/bin/apache-tomcat-9.0.54.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>使用<code>wget -O</code>下载并以不同的文件名保存 </p><p>wget默认会以最后一个”&#x2F;”后面的字符串来命名，对于某些链接命名可能出错，此时可以使用-O参数指定文件名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O tomcat.tar.gz https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.54/bin/apache-tomcat-9.0.54.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>使用<code>wget -c</code>断点续传：重新启动下载中断的文件<br>对于下载大文件时突然由于网络等原因中断非常有帮助，可以继续接着下载而不需要重新下载。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c url</span><br></pre></td></tr></table></figure></li><li><p>使用<code>wget -b</code>后台下载 </p><p>对于下载非常大的文件的时候，可以使用参数-b进行后台下载。 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> wget -b https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.54/bin/apache-tomcat-9.0.54.tar.gz</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可以使用以下命令来察看下载进度</span></span><br><span class="line"><span class="built_in">tail</span> -f wget-log</span><br></pre></td></tr></table></figure></li><li><p>使用<code>wget –-spider</code>测试下载链接 </p><p>正确下载链接</p><img src="image-20230516145704050.png" alt="image-20230516145704050"/><p>错误下载链接</p><img src="image-20230516145745714.png" alt="image-20230516145745714"/></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT</title>
      <link href="/2023/04/21/JWT/"/>
      <url>/2023/04/21/JWT/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>众所周知，Http协议是无状态的，所以服务器无法通过浏览器的Http请求判断出来是哪一个用户的请求，这时候cookie应运而生，通过在服务器记录登录用户的信息，然后将session id写入用户的cookie中，后续浏览器发送的请求都将带上cookie，然后服务器通过cookie中的session id在内存中找到保存的session信息，就能得到用户的信息。</p><p><strong>session存在的问题</strong></p><p>传统session方式将用户信息保存在内存中</p><ol><li>当登录用户数量越来越多时，内存的占用也将越来越大；</li><li>服务从单服务到多服务会面临的session共享问题。</li></ol><p><strong>解决方法</strong></p><p>虽然目前存在使用Redis进行session共享的机制，但是随着用户量和访问量的增加，Redis中保存的数据会越来越多，开销就会越来越大，多服务间的耦合性也会越来越大，Redis中的数据也很难进行管理，例如当Redis集群服务器出现宕机的情况下，整个业务系统随之将变为不可用的状态。而JWT不是这样的，它只需要服务端生成token，客户端保存这个token，每次请求携带这个token，服务端认证解析即可。</p><p><strong>JWT</strong></p><p>JWT（JSON Web Token），一种基于Token的认证授权机制，从JWT的全称可以看出，JWT本身也是Token，一种规范化之后的JSON结构的Token。JWT的思想是将用户信息交给客户端保存，服务器不保留状态，用户登录后每个后续请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。</p><h2 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h2><p>JWT由头部（Header）、载荷（Payload）以及签名（Signature）三部分组成，其本质是一组字符串，通过<code>.</code>切分成三个Base64编码的部分，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.</span><br><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.</span><br><span class="line">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><p><strong>Header</strong></p><p>JSON格式数据，是描述JWT的元数据，通常由两部分组成：</p><ul><li>typ（Type）：令牌类型，也就是JWT。</li><li>alg（Algorithm）：签名算法，例如HS256。</li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Payload</strong></p><p>JSON格式数据，用来存放实际需要传递的数据，包含了Claims（声明，包含JWT的相关信息）。其中Claims分为三种类型：</p><ul><li>Registered Claims（注册声明）：预定义的一些声明，建议使用，但不是强制的。</li><li>Public Claims（公有声明）：JWT签发方可以自定义的声明，但为了避免冲突，应该在IANA JSON Web Token Registry中定义它们。</li><li>Private Claims（私有声明）：JWT签发方因为项目需要而自定义的声明，更符合实际项目场景使用。</li></ul><p>下面是一些常见的注册声明：</p><ul><li><code>iss</code>（issuer）：JWT签发方。</li><li><code>iat</code>（issued at time）：JWT签发时间。</li><li><code>sub</code>（subject）：JWT主题。</li><li><code>aud</code>（audience）：JWT接收方。</li><li><code>exp</code>（expiration time）：JWT的过期时间。</li><li><code>nbf</code>（not before time）：JWT生效时间，早于该定义的时间的JWT不能被接受处理。</li><li><code>jti</code>（JWT ID）：JWT唯一标识。</li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ff1212f5-d8d1-4496-bf41-d2dda73de19a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">15323232</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;admin&quot;</span><span class="punctuation">,</span> <span class="string">&quot;user&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>注意：Payload部分默认是不加密的，一定不要将隐私信息存放在Payload当中。</em></p></blockquote><p><strong>Signature（签名）</strong></p><p>服务器通过Header、PayLoad和一个密钥（Secret），使用Header里面指定的签名算法（默认是HMAC SHA256）生成，作用是防止JWT（主要是Payload）被篡改。</p><p>签名的计算公式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">    base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">    base64UrlEncode(payload),</span><br><span class="line">    secreta</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>计算出签名后，把Header、Payload、Signature三个部分拼成一个字符串，每个部分之间用<code>.</code>分隔，这个字符串就是JWT。</p><blockquote><p><em>注：可以在 <a href="http://jwt.io/">jwt.io</a> 这个网站上对JWT进行解码，解码之后得到的就是Header、Payload、Signature这三部分。</em></p><img src="image-20230421093231641.png" alt="image-20230421093231641"/></blockquote><h2 id="基于JWT进行身份认证"><a href="#基于JWT进行身份认证" class="headerlink" title="基于JWT进行身份认证"></a>基于JWT进行身份认证</h2><p>在基于JWT进行身份验证的的应用程序中，服务器通过Payload、Header和Secret（密钥）创建JWT并将JWT发送给客户端。客户端接收到JWT之后，会将其保存在Cookie或者localStorage里面，以后客户端发出的所有请求都会携带这个令牌。</p><p>步骤如下：</p><ol><li>用户向服务器发送用户名、密码以及验证码用于登陆系统。</li><li>如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的Token，也就是JWT。</li><li>用户以后每次向后端发请求都在Header中带上这个JWT。</li><li>服务端检查JWT并从中获取用户相关信息。</li></ol><p>两点建议：</p><ol><li>建议将JWT存放在<code>localStorage</code>中，放在Cookie中会有<code>CSRF</code>（跨站请求伪造攻击）风险。</li><li>请求服务端并携带JWT的常见做法是将其放在HTTP Header的<code>Authorization</code>字段中（Authorization: Bearer Token）。</li></ol><h2 id="防止JWT被篡改"><a href="#防止JWT被篡改" class="headerlink" title="防止JWT被篡改"></a>防止JWT被篡改</h2><p>有了签名之后，即使JWT被泄露或者截获，黑客也没办法同时篡改Signature 、Header 、Payload。</p><p>这是因为服务端拿到JWT之后，会解析出其中包含的Header、Payload以及Signature 。服务端会根据Header、Payload、密钥再次生成一个Signature。拿新生成的Signature和JWT中的Signature作对比，如果一样就说明Header和Payload没有被修改。不过，如果服务端的秘钥也被泄露的话，黑客就可以同时篡改Signature、Header、Payload了。黑客直接修改了Header和Payload之后，再重新生成一个Signature就可以了。</p><p>因此密钥一定保管好，一定不要泄露出去。<strong>JWT安全的核心在于签名，签名安全的核心在密钥。</strong></p><h2 id="加强JWT的安全性"><a href="#加强JWT的安全性" class="headerlink" title="加强JWT的安全性"></a>加强JWT的安全性</h2><ol><li>JWT存放在localStorage中而不是Cookie中，避免CSRF风险。</li><li>一定不要将隐私信息存放在Payload当中。</li><li>密钥一定保管好，一定不要泄露出去。JWT安全的核心在于签名，签名安全的核心在密钥。</li><li>Payload要加入<code>exp</code>（JWT的过期时间），永久有效的JWT不合理，并且JWT的过期时间不易过长。</li></ol><h2 id="JWT的使用"><a href="#JWT的使用" class="headerlink" title="JWT的使用"></a>JWT的使用</h2><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>生成Token</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    <span class="comment">// 200秒后令牌token失效</span></span><br><span class="line">    instance.add(Calendar.SECOND, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line">        .withHeader(map) <span class="comment">// 可省略，即使用默认值</span></span><br><span class="line">        .withClaim(<span class="string">&quot;userId&quot;</span>, <span class="number">1</span>)  <span class="comment">// Payload</span></span><br><span class="line">        .withClaim(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;ZhangSan&quot;</span>)</span><br><span class="line">        .withExpiresAt(instance.getTime()) <span class="comment">// 指定令牌的过期时间</span></span><br><span class="line">        .sign(Algorithm.HMAC256(<span class="string">&quot;test&quot;</span>)); <span class="comment">// 签名</span></span><br><span class="line">    System.out.println(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2ODIwNTEzOTEsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJaaGFuZ1NhbiJ9.7vJpX6Kcm9n_qzjwqcySgupaZ8cokCx0EJo5dY1NYQI</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>根据令牌和签名解析数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 通过签名生成验证对象</span></span><br><span class="line">    <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(<span class="string">&quot;test&quot;</span>)).build();</span><br><span class="line"></span><br><span class="line">    <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> jwtVerifier.verify(<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2ODIwNTExOTIsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJaaGFuZ1NhbiJ9.tAw61sIaqzwydziGAj8SBQdTwTCjgQyHcjpdTRbVXg8&quot;</span>);</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;userId&quot;</span>));</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;令牌过期时间：&quot;</span> + verify.getExpiresAt());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">&quot;ZhangSan&quot;</span></span><br><span class="line"><span class="comment">令牌过期时间：Fri Apr 21 12:29:51 CST 2023</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>常见异常信息</p><ul><li>签名不一致异常：SignatureVerificationException</li><li>令牌过期异常：TokenExpiredException</li><li>算法不匹配异常：AlgorithmMismatchException</li><li>失效的payload异常（传给客户端后，token被改动，验证不一致）：InvalidClaimException</li></ul></li><li><p>封装JWT</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SING</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 7天过期</span></span><br><span class="line">        instance.add(Calendar.DATE, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建jwt builder</span></span><br><span class="line">        JWTCreator.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> JWT.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Payload</span></span><br><span class="line">        map.forEach((k, v) -&gt; &#123;</span><br><span class="line">            builder.withClaim(k, v);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> builder.withExpiresAt(instance.getTime())  <span class="comment">// 指定令牌过期时间</span></span><br><span class="line">                .sign(Algorithm.HMAC256(SING));  <span class="comment">// 签名</span></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证token合法性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">verify</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取token信息方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">getTokenInfo</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class="line">        <span class="keyword">return</span> verify;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="SpringBoot整合JWT"><a href="#SpringBoot整合JWT" class="headerlink" title="SpringBoot整合JWT"></a>SpringBoot整合JWT</h2><ol><li><p>登录验证</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.selectByUsernameAndPassword(username, password);</span><br><span class="line">        Map&lt;String, String&gt; payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        payload.put(<span class="string">&quot;id&quot;</span>, String.valueOf(user.getId()));</span><br><span class="line">        payload.put(<span class="string">&quot;username&quot;</span>, user.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtils.getToken(payload);</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;认证成功！&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>, token);  <span class="comment">// 响应token</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用postman测试工具测试是否查询到数据库中的数据</p><img src="image-20230421213219484.png" alt="image-20230421213219484"/></li><li><p>验证Token</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">test</span><span class="params">(String token)</span>&#123;</span><br><span class="line">    System.out.println(token);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 验证令牌</span></span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> JWTUtils.verify(token);</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效签名&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (TokenExpiredException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;token过期&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;算法不一致&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;token无效&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="image-20230421213357679.png" alt="image-20230421213357679"/></li><li><p>整合拦截器</p><p>创建拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取请求头中的令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 验证令牌</span></span><br><span class="line">            JWTUtils.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 放行请求</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效签名&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (TokenExpiredException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;token过期&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;算法不一致&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;token无效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);  <span class="comment">// 设置状态</span></span><br><span class="line">        <span class="comment">// 将map以json的形式响应到前台 map --&gt; json (jackson)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(json);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置拦截器规则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">JWTInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/test&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改业务逻辑代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">test</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 由拦截器进行令牌验证，这里只需要处理业务逻辑</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> JWTUtils.verify(token);</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证请求头携带的Token</p><img src="image-20230421215730702.png" alt="image-20230421215730702"/></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2023/01/31/Vue/"/>
      <url>/2023/01/31/Vue/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>前后分离的开发思想主要是基于<code>SOC原则（关注度分离原则）</code> 。</p></li><li><p>CSS预处理器</p><p>CSS层叠样式表是一门标记语言，并不是编程语言，因此不可以自定义变量、不可以引用等，即不具备任何语法支持，主要缺陷如下：</p><ol><li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器。</li><li>没有变量及合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li></ol><p>这就导致增加了工作量。为了解决该问题，可以使用<code>CSS预处理器</code>，其提供了CSS缺失的样式复用机制，减少冗余代码，提高样式代码的可维护性及前端在样式上开发的效率。</p><p>CSS预处理器用一种专门的编程语言，用于进行Web页面样式设计，再通过编译器转换为正常的CSS文件，以供项目使用，常见的有SASS、LESS。</p><blockquote><p><em>LESS：<a href="https://less.bootcss.com/#%E6%A6%82%E8%A7%88">https://less.bootcss.com/#%E6%A6%82%E8%A7%88</a></em></p></blockquote></li><li><p>JavaScript框架</p><ol><li>jQuery：优点是简化了DOM操作，缺点是DOM操作太频繁，影响前端性能。</li><li>Angular：特点是将后台的MVC模式搬到了前端并增加了<code>模块化开发</code>的理念，采用TypeScript语法开发。</li><li>React：特点是提出了<code>虚拟DOM</code>的概念，用于减少真实DOM操作。在内存中模拟DOM操作，有效的提升了前端渲染效率。缺点是使用复杂，需要学习<code>JSX</code>语言。</li><li>Vue：一款渐进式JavaScript框架。所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular（模块化）和React（虚拟DOM）的优点。</li></ol></li><li><p>MV*模式</p><ol><li>MVC（同步通信为主）：Model、View、Controller</li><li>MVP（异步通信为主）：Model、View、Presenter</li><li>MVVM（异步通信为主）：Model、View、ViewModel</li></ol></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li><p>Vue.js是一套构建用户界面的渐进式框架，其只关注<code>视图层</code>，采用自底向上增量开发的设计。核心：<code>数据驱动</code>、<code>组件化</code>。</p></li><li><p>Vue采用<code>MVVM</code>模式，实现了DOM监听及数据绑定。</p><p> MVVM源自于经典的MVC模式，其核心是<code>ViewModel</code>层，负责转换Model中的数据对象来让数据变得更容易管理和使用，作用：向上与视图层进行双向数据绑定，向下与Model层通过接口请求进行数据交互。</p><img src="image-20230603185754135.png" alt="image-20230603185754135"/><p>Model：模型层；View：视图层；ViewModel：连接视图和数据的中间件。</p><p>在MVVM架构中，不允许数据和视图直接通信，只能通过ViewModel来通信。ViewModel能够观察到数据的变化，并对视图相应的内容进行更新；能够监听到视图的变化，通知数据发生改变。</p></li><li><p>CDN引用</p><ul><li>Staticfile CDN：<a href="https://cdn.staticfile.org/vue/2.2.2/vue.min.js">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a></li><li>unpkg：<a href="https://unpkg.com/vue@2.6.14/dist/vue.min.js">https://unpkg.com/vue@2.6.14/dist/vue.min.js</a></li><li>cdnjs：<a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a></li></ul></li></ol><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>每个Vue应用都需要通过实例化Vue来实现，其内部有以下几个参数：</p><ol><li>el：绑定DOM元素的id，即接下来的改动全部在指定的元素内，元素外部不受影响。</li><li>data： 用于定义属性，定义在大括号内。</li><li>methods： 用于定义函数，可通过return来返回函数值。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;&#125;&#125;用于输出对象属性或函数返回值<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>site:&#123;&#123;site&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">site</span>: <span class="string">&quot;测试&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">details</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span>  <span class="variable language_">this</span>.<span class="property">site</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>当一个Vue实例被创建时，它向Vue的响应式系统中加入了其data对象中能找到的所有的属性。当这些属性的值发生改变时，html视图将也会产生相应的变化。</p><p>在js中可以直接访问Vue的数据属性，也可以将js对象赋值给Vue中的属性，此时修改对应的属性会相互影响。</p><p>除了数据属性，Vue 实例还提供了一些有用的实例属性与方法，它们都有前缀<code>$</code>，以便与用户定义的属性区分开来。例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#vue_det&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">site</span>: <span class="string">&quot;测试&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(vm.<span class="property">$data</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(vm.<span class="property">$el</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>Vue的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进DOM系统。</p><ul><li><p>文本插值：数据绑定最常见的形式就是使用<code>&#123;&#123;...&#125;&#125;</code>的文本插值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>v-html</code>指令用于输出html代码，使用<code>v-text</code>输出纯文本。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">message</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;&lt;h1&gt;v-html&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>v-bind</code>设置标签属性值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px; background-color: #B2D1FF;&quot;</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;&#x27;border&#x27;: message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&quot;1px solid red&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用于类上，当属性值为true时，添加该类名，否则不添加。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;&#x27;class1&#x27;: use&#125;&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">use</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>支持缩写：<code>:属性名</code>，例如：<code>v-bind:href=&quot;url&quot; =&gt; :href=&quot;url&quot;</code>。</p></blockquote></li><li><p>表达式：Vue提供了完全的JavaScript表达式支持。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;5+5&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; message.split(&#x27;.&#x27;)&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">ok</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;abc.abc&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            id : <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表达式会在所属Vue实例的数据作用域下作为JavaScript被解析。需要注意的是，每个绑定都只能包含<code>单个表达式</code>，所以下面的例子都不会生效。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>过滤器：Vue允许用户自定义过滤器，被用作一些常见的文本格式化（即输出前先对文本其进行格式化），由管道符<code>|</code>指示。过滤器函数接受表达式的值作为第一个参数。以下实例对输入的字符串第一个字母转为大写：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;runoob&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">capitalize</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                value = value.<span class="title function_">toString</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在v-bind指令中使用过滤器实例：<code>&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</code>。</p><p>过滤器串联：<code>&#123;&#123; message | filterA | filterB &#125;&#125;</code></p><p>过滤器是JavaScript函数，因此可以接受参数：<code>&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</code>。此时message是第一个参数，字符串arg1是第二个参数，arg2表达式的值将被求值然后传给过滤器作为第三个参数。</p></blockquote></li></ul><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>条件判断：使用<code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>指令，根据表达式的值（true或false）来决定渲染哪个元素。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Not A/B/C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;C&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示与隐藏：使用<code>v-show</code>指令根据表达式的值来切换元素的<code>display</code>属性，即true时显示，false时隐藏，隐藏时display的值为none。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">ok</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>循环使用<code>v-for</code>指令，语法：<code>v-for=&quot;site in sites&quot;</code>， 其中：sites是源数据数组，site是数组元素迭代的别名。</p><p><strong>迭代数组</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;site in sites&quot;</span>&gt;</span>&#123;&#123; site.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sites</span>: [</span></span><br><span class="line"><span class="language-javascript">&#123; <span class="attr">name</span>: <span class="string">&#x27;python&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">&#123; <span class="attr">name</span>: <span class="string">&#x27;java&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>添加第二个参数获取数组下标：<code>v-for=&quot;(item,index) in list&quot;</code></p></blockquote><p><strong>迭代对象（遍历对象属性）</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in object&quot;</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">object</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>此时迭代的结果是获取对象的属性值。可提供第二个参数用于获取键，提供第三个参数用于获取索引，即：<code>v-for=&quot;(value, key, index) in object&quot;</code></p></blockquote><p><strong>迭代整数</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出1到10的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h2><p>v-bind可以用来设置class或style，其在处理class和style时，表达式的结果类型除了字符串之外，还可以是对象或数组。</p><p><strong>class绑定</strong></p><ol><li><p>绑定数据中的一个对象</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">classObject</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">classObject</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">active</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;text-danger&#x27;</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若属性中存在<code>-</code>，例如：text-danger，此时需要加上””，否则会报错。</p></blockquote></li><li><p>绑定计算属性，该计算属性返回值是一个对象</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">classObject</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">classObject</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">base</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定数组</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 可以使用三元表达式来切换列表中的class --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[errorClass, isActive ? activeClass : &#x27;&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">activeClass</span>: <span class="string">&#x27;active&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">errorClass</span>: <span class="string">&#x27;text-danger&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>style绑定（内联样式）</strong></p><ol><li><p>直接设置样式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">activeColor</span>: <span class="string">&#x27;green&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fontSize</span>: <span class="number">30</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定样式对象</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">styleObject</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleObject</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用数组将多个样式对象应用到一个元素上</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">baseStyles</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">overridingStyles</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;font-weight&#x27;</span>: <span class="string">&#x27;bold&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性重点突出在<code>属性</code>二字上（属性是名词）。首先它是一个属性，其次这个属性有计算的能力（计算是动词），这里的计算就是个函数。简单点说，它就是一个能够将计算结果缓存起来的属性，仅此而已，可以想象为缓存。</p><p>计算属性关键字：<code>computed</code>，在处理一些复杂逻辑时比较有用。示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用时相当于属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;Runoob!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 计算属性的getter</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">reversedMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>声明了一个计算属性reversedMessage（使用时不能加()），提供的函数将用作属性 vm.reversedMessage的getter。vm.reversedMessage依赖于vm.message，在vm.message发生改变时，vm.reversedMessage也会更新。</p></blockquote><p><strong>computed vs methods</strong></p><p>可以使用methods来替代computed，效果上两个都是一样的，但是computed是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用methods，在重新渲染的时候，函数总会重新调用执行。可以说使用computed性能会更好，但是如果不希望缓存，可以使用methods。</p><p>与methods对比：调用方法时，每次都需要进行计算，会产生系统开销。如果这个结果是不经常变化的，此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这一点。<code>计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约系统开销。</code></p><p><strong>computed setter</strong></p><p>computed属性默认只有getter，不过在需要时也可以提供一个setter，示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; site &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--调用getter，输出：菜鸟教程 http://www.runoob.com--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;Google&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;http://www.google.com&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">site</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// getter</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">url</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// setter</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> names = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">name</span> = names[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">url</span> = names[names.<span class="property">length</span> - <span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用setter，此时vm.name和vm.url会被更新</span></span></span><br><span class="line"><span class="language-javascript">    vm.<span class="property">site</span> = <span class="string">&#x27;菜鸟教程 http://www.runoob.com&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;name: &#x27;</span> + vm.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;url: &#x27;</span> + vm.<span class="property">url</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h2><p>监听属性<code>watch</code>，可以通过该属性来响应数据的变化。示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>计数器: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;counter++&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">counter</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $watch 是一个实例方法</span></span></span><br><span class="line"><span class="language-javascript">    vm.$watch(<span class="string">&#x27;counter&#x27;</span>, <span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当vm.counter发生改变时会调用该函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(oldVal + <span class="string">&quot;-&gt;&quot;</span> + newVal)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可改写为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        ...</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">counter</span>:<span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(oldVal+<span class="string">&quot;-&gt;&quot;</span>+newVal)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>该函数的<code>参数顺序固定</code>，第一个参数获取新值，第二个参数获取旧值。</p></blockquote><h2 id="事件处理器"><a href="#事件处理器" class="headerlink" title="事件处理器"></a>事件处理器</h2><p><strong>事件监听</strong></p><p>使用<code>v-on</code>指令，可以绑定一个表达式或者方法。支持缩写：<code>@事件名=&quot;...&quot;</code>。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">counter</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;Vue.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this在方法里指当前Vue实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;Hello &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// event是原生DOM事件，可获取触发事件的对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (event) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 直接调用方法，此时不存在触发事件的对象</span></span></span><br><span class="line"><span class="language-javascript">    vm.<span class="title function_">greet</span>() <span class="comment">// -&gt; &#x27;Hello Vue.js!&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当存在其他参数时需要获取事件对象，此时需要传递event。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;greet(&#x27;good&#x27;,$event)&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;button v-on:click=&quot;greet(&#x27;good&#x27;,event)&quot;&gt;Greet&lt;/button&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">method:&#123;</span><br><span class="line"> greet: function (mes,event) &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>事件修饰符</strong></p><p>Vue为v-on提供了事件修饰符来处理DOM事件细节，通过由点<code>.</code>表示的指令后缀来调用修饰符。</p><ol><li>stop —— 阻止冒泡</li><li>prevent —— 阻止默认事件</li><li>capture —— 阻止捕获</li><li>self —— 只监听触发该元素的事件</li><li>once —— 只触发一次</li><li>left —— 左键事件</li><li>right —— 右键事件</li><li>middle —— 中间滚轮事件</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>按键修饰符</strong></p><p>Vue允许为v-on在监听键盘事件时添加按键修饰符，可以使用KeyCode或按键别名。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在keyCode是13时调用vm.submit() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something&lt;/div</span><br></pre></td></tr></table></figure><blockquote><p>全部的按键别名：enter、tab、delete、esc、space、up、down、left、right、ctrl、alt、shift、meta。</p></blockquote><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p><strong>双向绑定</strong></p><p>使用<code>v-model</code>指令在表单控件元素（输入框、文本框、单选框、复选框、下拉列表）上创建双向数据绑定，v-model会根据控件类型自动选取正确的方法来更新元素。</p><ol><li><p>输入框：加载时数据会显示在输入框中。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;编辑我……&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>消息是: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Runoob&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>单选按钮</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;runoob&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Runoob&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;runoob&quot;</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;google&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Google&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;google&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>选中值为: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            picked : <span class="string">&#x27;Runoob&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>复选框：如果是一个则为逻辑值，如果是多个则绑定到<code>同一数组</code>上。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>单个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>多个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;runoob&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Runoob&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;runoob&quot;</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;google&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Google&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;google&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;taobao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Taobao&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;taobao&quot;</span>&gt;</span>taobao<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>选择的值为: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            checked : <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">checkedNames</span>: []</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>select列表</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选择一个网站<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;www.runoob.com&quot;</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;www.google.com&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>选择的网站是: &#123;&#123;selected&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selected</span>: <span class="string">&#x27;&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>v-model会忽略任何表单元素上初始的<code>value</code>、<code>checked</code>或<code>selected attribute</code>。它将始终将当前绑定的JavaScript状态视为正确来源，应在JavaScript中使用data选项来<code>声明该初始值</code>。</p><blockquote><p>如果v-model表达式的初始值<code>不匹配任何一个选择项</code>，&lt;select&gt;元素会渲染成一个“未选择”的状态。在iOS上，这将导致用户无法选择第一项，因为iOS在这种情况下不会触发一个change事件。因此，建议提供一个空值的禁用选项：<code>&lt;option disabled value=&quot;&quot;&gt;--请选择--&lt;/option&gt;</code></p></blockquote><p><strong>修饰符</strong></p><ol><li><p><code>.lazy</code>：在默认情况下，v-model在input事件中同步输入框的值与数据，但可添加修饰符lazy，从而转变为在change事件中同步，即触发change事件时再进行更新。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>.number</code>：如果想自动将用户的输入值转为Number类型（如果原值的转换结果为NaN则返回原值），可以添加修饰符number来处理输入值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>相当于调用 parseInt()，如果转换结果为NaN则返回原值。</em></p></blockquote></li><li><p><code>.trim</code>：如果要自动过滤用户输入的首尾空格，可以添加trim修饰符到v-model上过滤输入。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>声明组件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局组件，所有实例都能使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;component&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;li&gt;hello&lt;li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selected</span>: <span class="string">&#x27;&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 局部组件，只能在这个实例中使用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;component&#x27;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">&quot;&lt;li&gt;hello&lt;li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>props</code>属性给组件传递数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&quot;component&quot;,&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&#x27;item&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: &quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello </span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="language-xml">&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>v-for&#x3D;”item in items”：指遍历Vue实例中名为items的数组，并创建同等数量的组件。</p><p>v-bind:item&#x3D;”item”：指将遍历的item绑定到组件中props定义的名为item属性上（相当于将右侧的item的值传递给组件props属性中名为item的变量），此时等号左边的”item”为props定义的属性名，右边的”item”为遍历得到的item。</p><p>props属性中的值<code>不能大写</code>。</p></blockquote><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>在Vue中使用&lt;slot&gt;元素作为承载分发内容的出口，称其为“插槽”，可以应用在组合组件的场景中。插槽相当于在组件中渲染模板内容。示例：定义课程列表组件（todo），该组件由标题（todo-title）和内容（todo-items）组成，但三个组件又相互独立。步骤：</p><ol><li>定义课程列表组件，要实现其标题和内容动态绑定，可以在其中预留插槽，即slot；</li><li>定义标题和内容组件；</li><li>对应绑定。</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                      <span class="string">&quot;&lt;slot name=&#x27;todo-title&#x27;&gt;&lt;/slot&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                      <span class="string">&quot;&lt;ul&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                       <span class="string">&quot;&lt;slot name=&#x27;todo-items&#x27;&gt;&lt;/slot&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                      <span class="string">&quot;&lt;/ul&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                 <span class="string">&quot;&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo-title&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo-items&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;item&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;课程列表&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">items</span>: [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;html&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>todo-title和todo-items组件分别被分发到了todo组件的todo-title和todo-items插槽中。</p></blockquote><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>在组件中操作Vue实例的数据项，即调用实例中的方法，需要使用到自定义事件（组件中不能直接使用Vue实例中的方法）：<code>this.$emit(自定义事件名, 参数)</code>。当自定义事件被触发时，会调用Vue实例中对应的方法。示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-on:remove</span>=<span class="string">&quot;removesTodoItems(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//slot:插槽</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;slot name=&#x27;todo-title&#x27;&gt;&lt;/slot&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;ul&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;slot name=&#x27;todo-items&#x27;&gt;&lt;/slot&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;/ul&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                  <span class="string">&quot;&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo-title&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo-items&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;item&#x27;</span>,<span class="string">&quot;index&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;li&gt;&#123;&#123;index&#125;&#125;--&#123;&#123;item&#125;&#125;&lt;button @click=&quot;fun(index)&quot;&gt;删除&lt;/button&gt;&lt;/li&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fun</span>:<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&quot;remove&quot;</span>,index)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;课程列表&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">items</span>: [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;python&quot;</span>,<span class="string">&quot;html&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">removesTodoItems</span>:<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                vm.<span class="property">items</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Axios异步通信"><a href="#Axios异步通信" class="headerlink" title="Axios异步通信"></a>Axios异步通信</h2><p>Vue使用<code>axios</code>来完成 ajax 请求。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script src=&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>Get请求示例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://www.runoob.com/try/ajax/demo_axios_post.php&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="variable language_">this</span>.<span class="property">info</span> = response))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123; </span><br><span class="line">    <span class="comment">// 请求失败处理</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，直接拼接在后面</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 也可通过params设置参数，参数名有无引号均可</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">params</span>: &#123;</span><br><span class="line"><span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Post请求示例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;https://www.runoob.com/try/ajax/demo_axios_post.php&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="variable language_">this</span>.<span class="property">info</span> = response))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，此方式存在问题，可以使用下面两种方式</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,    </span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，能正常接收</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;qs&#x27;</span>);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, qs.<span class="title function_">stringify</span>(&#123; <span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种正常接收的方式</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">username</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">password</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">            str += <span class="built_in">encodeURIComponent</span>(key) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[key]) + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(response)))</span><br></pre></td></tr></table></figure><blockquote><p>第一种携带数据的post请求，在传递参数时<code>存在问题</code>：前端能传递参数，但<code>后端接收不到</code>，此时需要引入 <code>qs</code>。更多解决<code>post传参问题</code>的方法可参考：<a href="https://blog.csdn.net/lihchweb/article/details/79884134">https://blog.csdn.net/lihchweb/article/details/79884134</a></p></blockquote><h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><img src="image-20221102081643982.png" alt="image-20221102081643982"/><p>钩子函数使用示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 钩子函数 链式编程，ES6新特性</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;../data.json&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>(<span class="variable language_">this</span>.<span class="property">info</span>=response.<span class="property">data</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h2><p>vue-cli是官方提供的一个脚手架，用于快速生成一个vue的项目模板，其有预先定义好的目录结构及基础代码，就好比创建Maven项目时可以选择创建一个骨架项目，这个骨架项目就是脚手架，可以使我们的开发更加的快速。主要功能：</p><ol><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ol><p><strong>环境需求</strong></p><p>Node.js：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><ol><li><p>安装时选择自己的安装目录，无脑下一步即可。可通过命令行确认node.js是否安装成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看node.js版本号</span></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看npm版本号</span></span><br><span class="line"><span class="comment"># npm是一个软件包管理工具</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>安装node.js淘宝镜像加速器cnpm</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -g 指全局安装</span></span><br><span class="line">npm install cnpm -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用如下语句解决npm速度慢的问题，</span></span><br><span class="line">npm install --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><blockquote><p>安装位置：C:\Users\Administrator\AppData\Roaming\npm</p></blockquote></li></ol><p><strong>vue-cli的使用</strong></p><ol><li><p>安装vue-cli：npm install -g @vue&#x2F;cli</p><blockquote><p>检查版本：vue –version</p></blockquote></li><li><p>创建项目：vue create 项目名</p><blockquote><p>此时先创建一个空文件夹，并在cmd中进入该文件夹，再使用此命令，方便找到创建的项目。</p></blockquote></li><li><p>启动项目：npm run serve</p></li></ol><p><strong>npm命令解释</strong></p><ol><li>npm install moduleName：安装模块到项目目录下。</li><li>npm install -g moduleName：-g的意思是将模块安装到全局，具体安装到磁盘哪个位置要看npm config prefix的位置。</li><li>npm install –save moduleName：-–save的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖，-S为该命令的缩写。</li><li>npm install –save-dev moduleName：-–save-dev的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖，-D为该命令的缩写。</li></ol><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>本质上，webpack是一个现代JavaScript应用程序的静态模块打包器（module bundler）。当webpack处理应用程序时，它会递归的构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。安装及测试：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">webpack -v</span><br><span class="line">webpack-cli -v</span><br></pre></td></tr></table></figure><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>官方文档：<a href="https://router.vuejs.org/zh/introduction.html">https://router.vuejs.org/zh/introduction.html</a></p><p>使用npm或cnpm为项目安装vue-router。在命令行中进入对应的项目中，输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install vue-router --save-dev</span><br></pre></td></tr></table></figure><p>如果要在一个模块化工程中使用它，必须通过<code>Vue.use()</code>明确安装路由功能。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure><blockquote><p>使用后可能会由于vue-router版本过高而Vue版本过低，即vue-router对应的Vue为3.0以上而出错，此时运行<code>cnpm i vue-router@3.1.3</code>即可。或者开始时直接使用<code>yarn add vue-router@3</code>。</p></blockquote><img src="image-20221102150930617.png" alt="image-20221102150930617"/><p><strong>使用示例</strong></p><ol><li><p>删除多余文件，在components中存放自己的组件。定义一个Content.Vue组件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;当前为内容页&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">        // 上方语句用于解决报错，Alt+Enter</span><br><span class="line">        name: &quot;content&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加“scoped”属性来限制CSS仅用于此组件 --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>模板根只需要一个元素，即一个标签，该标签中包含内容，可在外侧用一个&lt;div&gt;包裹所有内容。</p></blockquote></li><li><p>安装路由：在src目录下创建<code>router</code>文件夹，专门存放路由。在该文件夹中创建<code>index.js</code>，用于编写主配置。index.js内容如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 导入自定义的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Content</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Content&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装路由</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="comment">// 配置路由，可配置多个</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 路由路径，相当于跳转链接</span></span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">            <span class="comment">// 路由名称，可省略</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Content&#x27;</span>,</span><br><span class="line">            <span class="comment">// 跳转到组件</span></span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Content</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在main.js中配置路由</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入上面创建的路由配置目录，会自动扫描路由配置index.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭生产模式下给出的提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="comment">// 配置路由</span></span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>在App.vue中使用路由</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;h1&gt;路由测试&lt;/h1&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            router-link: 默认会被渲染成一个&lt;a&gt;标签，to属性用于指定链接</span><br><span class="line">            router-view: 用于渲染路由匹配到的组件</span><br><span class="line">        --&gt;</span><br><span class="line">      &lt;router-link to=&quot;/content&quot;&gt;内容&lt;/router-link&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>router-link相当于&lt;a&gt;标签，会被渲染成一个超链接，它需要配合router-view使用，此时其对应组件的内容会在router-view中显示。若单独使用router-link，则内容无法显示。也可直接在地址栏中输入对应链接，即省略router-link，此时router-view中也会显示组件对应的内容。</p></blockquote></li></ol><h2 id="Vue结合ElementUI"><a href="#Vue结合ElementUI" class="headerlink" title="Vue结合ElementUI"></a>Vue结合ElementUI</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装element-ui</span></span><br><span class="line">npm i element-ui -S</span><br><span class="line"><span class="comment"># 安装SASS加载器（CSS预处理器）</span></span><br><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><ol><li><p>在项目src目录下创建views文件夹，用于存放Vue视图组件，而原有的components文件夹用于存放Vue功能组件。在views目录下创建首页视图Main.vue组件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;Main&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在views目录下创建登录页面视图Login.vue组件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-form ref=&quot;loginForm&quot; :model=&quot;form&quot; :rules=&quot;rules&quot; label-width=&quot;80px&quot; class=&quot;login-box&quot;&gt;</span><br><span class="line">      &lt;h3 class=&quot;login-title&quot;&gt;欢迎登录&lt;/h3&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;账号&quot; prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;text&quot; placeholder=&quot;请输入账号&quot; v-model=&quot;form.username&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; v-model=&quot;form.password&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; v-on:click=&quot;onSubmit(&#x27;loginForm&#x27;)&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;Login&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      form:&#123;</span><br><span class="line">        username:&#x27;&#x27;,</span><br><span class="line">        password:&#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 表单验证，需要在el-form-item元素中增加prop属性</span><br><span class="line">      rules:&#123;</span><br><span class="line">        username:[</span><br><span class="line">          &#123;required:true,message:&quot;账号不可为空&quot;,trigger:&quot;blur&quot;&#125;</span><br><span class="line">        ],</span><br><span class="line">        password:[</span><br><span class="line">          &#123;required:true,message:&quot;密码不可为空&quot;,tigger:&quot;blur&quot;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    onSubmit(formName)&#123;</span><br><span class="line">      // 为表单绑定验证功能</span><br><span class="line">      this.$refs[formName].validate((valid)=&gt;&#123;</span><br><span class="line">        if(valid)&#123;</span><br><span class="line">          // 使用vue-router路由到指定界面，该方式称为编程式导航</span><br><span class="line">          this.$router.push(&#x27;/main&#x27;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.login-box&#123;</span><br><span class="line">  border:1px solid #DCDFE6;</span><br><span class="line">  width: 350px;</span><br><span class="line">  margin:180px auto;</span><br><span class="line">  padding: 35px 35px 15px 35px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  -webkit-border-radius: 5px;</span><br><span class="line">  -moz-border-radius: 5px;</span><br><span class="line">  box-shadow: 0 0 25px #909399;</span><br><span class="line">&#125;</span><br><span class="line">.login-title&#123;</span><br><span class="line">  text-align:center;</span><br><span class="line">  margin: 0 auto 40px auto;</span><br><span class="line">  color: #303133;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>router目录下创建一个名为<code>index.js</code>的vue-router路由配置文件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&quot;@/views/Main&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Main</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中配置路由及ElementUI。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入Element</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写APP.vue</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>测试：<a href="http://localhost:8080/#/login">http://localhost:8080/#/login</a></p></li></ol><h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>嵌套路由又称子路由，在实际应用中，通常由多层嵌套的组件组合而成。同样的，URL中各段动态路径也按某种结构对应嵌套着各层组件，例如：</p><img src="image-20221102165836435.png" alt="image-20221102165836435"/><p><strong>使用示例</strong></p><ol><li>创建用户信息组件：在views&#x2F;user目录下创建一个名为Profile.vue的视图组件。</li></ol>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;用户信息&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;Profile&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建用户列表组件：在views&#x2F;user目录下创建一个名为List.vue的视图组件。</li></ol>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;用户列表&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;List&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改Main.vue视图组件。</li></ol>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">        &lt;el-menu :default-openeds=&quot;[&#x27;1&#x27;]&quot;&gt;</span><br><span class="line">          &lt;el-submenu index=&quot;1&quot;&gt;</span><br><span class="line">            &lt;template slot=&quot;title&quot;&gt;&lt;i class=&quot;el-icon-caret-right&quot;&gt;&lt;/i&gt;用户管理&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;1-1&quot;&gt;</span><br><span class="line">                &lt;!-- 插入的地方 --&gt;</span><br><span class="line">                &lt;router-link to=&quot;/user/profile&quot;&gt;个人信息&lt;/router-link&gt;</span><br><span class="line">              &lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;1-2&quot;&gt;</span><br><span class="line">                &lt;!-- 插入的地方 --&gt;</span><br><span class="line">                &lt;router-link to=&quot;/user/list&quot;&gt;用户列表&lt;/router-link&gt;</span><br><span class="line">              &lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">          &lt;el-submenu index=&quot;2&quot;&gt;</span><br><span class="line">            &lt;template slot=&quot;title&quot;&gt;&lt;i class=&quot;el-icon-caret-right&quot;&gt;&lt;/i&gt;内容管理&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;2-1&quot;&gt;分类管理&lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;2-2&quot;&gt;内容列表&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">      &lt;/el-aside&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-container&gt;</span><br><span class="line">        &lt;el-header style=&quot;text-align: right; font-size: 12px&quot;&gt;</span><br><span class="line">          &lt;el-dropdown&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-setting&quot; style=&quot;margin-right: 15px&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;个人信息&lt;/el-dropdown-item&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;退出登录&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;/el-dropdown-menu&gt;</span><br><span class="line">          &lt;/el-dropdown&gt;</span><br><span class="line">        &lt;/el-header&gt;</span><br><span class="line">        &lt;el-main&gt;</span><br><span class="line">          &lt;!-- 在这里展示视图 --&gt;</span><br><span class="line">          &lt;router-view /&gt;</span><br><span class="line">        &lt;/el-main&gt;</span><br><span class="line">      &lt;/el-container&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;Main&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.el-header &#123;</span><br><span class="line">  background-color: #B3C0D1;</span><br><span class="line">  color: #333;</span><br><span class="line">  line-height: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.el-aside &#123;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>修改路由配置</li></ol>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Main&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&quot;@/views/user/Profile&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&quot;@/views/user/List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Main</span>,</span><br><span class="line">            <span class="comment">// 子路由</span></span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;<span class="attr">path</span>: <span class="string">&#x27;/user/profile&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Profile</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">path</span>: <span class="string">&#x27;/user/list&#x27;</span>, <span class="attr">component</span>: <span class="title class_">List</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>路由跳转后组件内容会显示在router-view中，此时如果其组件内部也存在路由跳转链接router-link，则需要配置子路由。若此时未配置子路由，则无法在当前组件对应区域显示跳转组件内容，相应内容会显示在App.vue中的router-view中，相当于普通的路由跳转。</p></blockquote><h2 id="参数传递和重定向"><a href="#参数传递和重定向" class="headerlink" title="参数传递和重定向"></a>参数传递和重定向</h2><p><strong>参数传递</strong></p><ol><li><p>修改router&#x2F;index.js配置，为path属性增加<code>:id</code>占位符。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/profile/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Profile&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Profile</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">name：绑定组件的名字</span><br><span class="line">params：指需要传递的参数，两个地方的参数名需一致</span><br><span class="line">--&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name: &#x27;Profile&#x27;, params: &#123;id:1&#125;&#125;&quot;&gt;个人信息&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>传递参数时需要使用<code>v-bind</code>来绑定，即：<code>v-bind:to=&quot;&#123;name: 组件名, params: &#123;...&#125;&#125;&quot;</code>或<code>:to=&quot;&#123;name: 组件名, params: &#123;...&#125;&#125;&quot;</code>。</p></blockquote></li><li><p>组件接收参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用户信息&lt;/h1&gt;</span><br><span class="line">    &#123;&#123;$route.params.id&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>另一种参数传递方式：使用props减少耦合</p><ul><li><p>修改router&#x2F;index.js配置，为路由增加<code>props: true</code>属性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/profile/:id&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Profile&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">Profile</span>,</span><br><span class="line"><span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数和之前一样。在接收参数的组件中，增加props属性。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用户信息&lt;/h1&gt;</span><br><span class="line">    &#123;&#123;id&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;Profile&quot;,</span><br><span class="line">  props: [&#x27;id&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>重定向</strong></p><p>作用于路径不同但组件相同的情况，即不同路径可跳转到相同组件。</p><ol><li><p>修改router&#x2F;index.js配置，添加重定向路径。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Main&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Main</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/goHome&#x27;</span>,</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;/main&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改Main.vue</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-menu-item index=&quot;1-3&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/goHome&quot;&gt;返回首页&lt;/router-link&gt;</span><br><span class="line">&lt;/el-menu-item&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><p>路由模式有两种：</p><ul><li>hash：路径带#，默认，如：<a href="http://localhost:8080/#/login">http://localhost:8080/#/login</a></li><li>history：路径不带#，如：<a href="http://localhost:8080/login">http://localhost:8080/login</a></li></ul><p>可通过修改路由配置router&#x2F;index.js进行切换：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>:<span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">routes</span>: []</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h2><p>创建一个NotFound.vue视图组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;404，您的页面走丢了！&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;NotFound&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>修改路由配置router&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;../views/NotFound&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        ...</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">NotFound</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由钩子"><a href="#路由钩子" class="headerlink" title="路由钩子"></a>路由钩子</h2><p>除了钩子函数（mounted）外，还存在两个钩子函数：</p><ol><li>beforeRouteEnter：在进入路由前执行。</li><li>beforeRouteLeave：在离开路由前执行。</li></ol><p>测试：在Profile.vue组件中使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Profile&quot;</span>,</span><br><span class="line">  <span class="attr">beforeRouteEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入路由之前&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeRouteLeave</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;离开路由之前&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li>to：路由将要跳转的路径信息；</li><li>from：路径跳转前的路径信息；</li><li>next：路由的控制参数。<ul><li>next()：跳入下一个页面；</li><li>next(’&#x2F;path’)：改变路由的跳转方向，使其跳到另一个路由；</li><li>next(false)：返回原来的页面；</li><li>next((vm)&#x3D;&gt;{})：仅在<code>beforeRouteEnter</code>中可用，vm是组件实例。</li></ul></li></ol><p>在钩子函数中使用异步请求</p><ol><li>安装Axios</li></ol>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install axios -s</span><br></pre></td></tr></table></figure><ol start="2"><li>在main.js中应用Axios</li></ol>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能使用Vue.use(axios)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">axios</span> = axios;</span><br></pre></td></tr></table></figure><ol start="3"><li>准备数据</li></ol>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cv战士&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blog.csdn.net/qq_45408390?spm=1001.2101.3001.5343&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isNonProfit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;street&quot;</span><span class="punctuation">:</span> <span class="string">&quot;含光门&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;陕西西安&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bilibili&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://bilibili.com&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cv战士&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blog.csdn.net/qq_45408390?spm=1001.2101.3001.5343&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;百度&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>只有<code>public</code>目录下的文件可以被访问，因此把静态资源放入该文件夹下。例如：public&#x2F;mock&#x2F;data.json，访问地址：<a href="http://localhost:8080/mock/data.json">http://localhost:8080/mock/data.json</a></p></blockquote><ol start="4"><li>在beforeRouteEnter中进行异步请求</li></ol>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line vue/multi-word-component-names</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Profile&quot;</span>,</span><br><span class="line">    <span class="attr">beforeRouteEnter</span>: <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入路由之前&quot;</span>)</span><br><span class="line">        <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">            vm.<span class="title function_">getData</span>()</span><br><span class="line">            <span class="comment">// 调用当前组件的getData方法</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">getData</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">axios</span>(&#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/mock/data.json&#x27;</span></span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// axios.get(&quot;http://localhost:8080/mock/data.json&quot;).then(response=&gt;(console.log(response)))</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>创建项目的另一种方式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建项目并初始化</span></span><br><span class="line">npm create vue@2</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">npm dev run</span><br></pre></td></tr></table></figure><p><strong>依赖整理</strong></p><ol><li><p>bootstrap</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install bootstrap@5.3.0-alpha1</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/js/bootstrap.bundle&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>elementUI</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i element-ui -S</span><br><span class="line"><span class="comment"># npm install sass-loader node-sass --save-dev</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mian.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>)</span><br></pre></td></tr></table></figure></li><li><p>axios</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install axios -s</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mian.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">axios</span> = axios</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件使用时还需要导入</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>vue-router</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i vue-router@3.1.3</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: []</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mian.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>vue-cookies</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install vue-cookies</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueCookies</span> <span class="keyword">from</span> <span class="string">&#x27;vue-cookies&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueCookies</span>)</span><br></pre></td></tr></table></figure></li><li><p>base64加密</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save js-base64</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Base64</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;js-base64&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>表情</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save emoji-mart-vue</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Picker</span> &#125; <span class="keyword">from</span> <span class="string">&quot;emoji-mart-vue&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>时间格式化</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install moment --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>图片展示</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i vue-photo-collage</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PhotoCollageWrapper</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-photo-collage&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>md读取</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install marked -s</span><br><span class="line">cnpm install highlight.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; marked &#125; <span class="keyword">from</span> <span class="string">&quot;marked&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">&#x27;highlight.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;highlight.js/styles/default.css&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>图表绘制</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install echarts</span><br><span class="line">cnpm install echarts-wordcloud</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&quot;echarts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts-wordcloud&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>mapbox地图插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save mapbox-gl</span><br><span class="line">cnpm install --save mapbox-gl @mapbox/mapbox-gl-language</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;mapbox-gl/dist/mapbox-gl.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="keyword">import</span> mapboxgl <span class="keyword">from</span> <span class="string">&quot;mapbox-gl&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MapboxLanguage</span> <span class="keyword">from</span> <span class="string">&#x27;@mapbox/mapbox-gl-language&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2022/09/25/Mybatis/"/>
      <url>/2022/09/25/Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Mybatis是<code>持久层框架</code>，也是<code>半自动化的ORM框架</code>（对象关系映射）。</p><blockquote><p>持久化：将程序数据在持久状态和瞬时状态间转换的机制，即数据存入硬盘或从硬盘取出。JDBC就是一种持久化机制，文件IO也是一种持久化机制。</p><p>持久层：相当于专注于数据持久化逻辑的实现。</p></blockquote><p>优势：MyBatis避免了繁琐的JDBC代码和手动设置参数以及获取结果集的过程，通过使用简单的XML或注解来配置和映射原生信息，将接口和Java的实体类映射成数据库中的记录。</p><p>官方文档：<a href="https://mybatis.net.cn/">https://mybatis.net.cn/</a></p><blockquote><p><code>Maven静态资源过滤问题</code>：在src或其子文件夹下创建配置文件却无法被导出到target中，从而导致程序发生错误无法执行。解决方法：将下方代码添加到pom.xml中。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置文件mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/dbName?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/dao/xxx.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写工具类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写实体类</p></li><li><p>编写接口及对应的mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="传递参数的两种方式"><a href="#传递参数的两种方式" class="headerlink" title="传递参数的两种方式"></a>传递参数的两种方式</h2><ol><li><p>使用<code>@Param</code>，例如：<code>@Param(&quot;pwd&quot;) String Password</code></p></li><li><p>使用<code>Map</code>：在接口方法中，参数直接传递Map，而sql语句正常使用参数。在使用方法时，Map的key为sql中取的值即可，没有顺序要求。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mapper接口</span></span><br><span class="line">返回值 方法名(Map&lt;String,Object&gt; map);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapper.xml中的sql语句</span></span><br><span class="line">&lt;select id=<span class="string">&quot;&quot;</span> resultType=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    select * from user <span class="type">where</span> <span class="variable">name</span> <span class="operator">=</span> #&#123;username&#125; <span class="type">and</span> <span class="variable">pwd</span> <span class="operator">=</span> #&#123;pwd&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;pwd&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectUserByNP2(map);</span><br></pre></td></tr></table></figure><blockquote><p>如果参数过多，可以直接使用Map实现；如果参数比较少，直接传递参数即可。</p></blockquote></li></ol><h2 id="与-的区别"><a href="#与-的区别" class="headerlink" title="#与$的区别"></a>#与$的区别</h2><p><code>#&#123;&#125;</code>：其作用主要是替换预编译语句中的占位符?【推荐使用】</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO user (name) VALUES (#&#123;name&#125;);</span><br><span class="line">INSERT INTO user (name) VALUES (?);</span><br></pre></td></tr></table></figure><p><code>$&#123;&#125;</code>：其作用是直接进行字符串替换</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;$&#123;name&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;kuangshen&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="提交事务的方式"><a href="#提交事务的方式" class="headerlink" title="提交事务的方式"></a>提交事务的方式</h2><p>增删改查需要<code>提交事务</code>，正常情况下使用<code>session.commit()</code>命令进行提交，也可选择设置自动提交。改造MybatisUtils工具类的getSession( )方法，重载实现自动提交事务。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取SqlSession连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> getSession(<span class="literal">true</span>); <span class="comment">// 事务自动提交</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">(<span class="type">boolean</span> flag)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> sqlSessionFactory.openSession(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果集映射"><a href="#结果集映射" class="headerlink" title="结果集映射"></a>结果集映射</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- column是数据库表的列名, property是对应实体类的属性名 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多对一、一对多"><a href="#多对一、一对多" class="headerlink" title="多对一、一对多"></a>多对一、一对多</h2><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>按结果嵌套处理：直接查询出结果，进行结果集的映射，相当于联表查询。</p><p>实例：多个学生对应一个老师</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--学生实体增加属性--&gt;</span></span><br><span class="line">private Teacher teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mapper.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span> &gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按查询嵌套处理：相当于子查询【有些麻烦】</p><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>存在<code>按结果嵌套处理</code>和<code>按查询嵌套处理</code>两种方式</p><p>按结果嵌套处理实例：一个老师拥有多个学生</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--老师实体增加属性--&gt;</span></span><br><span class="line">private List<span class="tag">&lt;<span class="name">Student</span>&gt;</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mapper.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">select s.id sid, s.name sname, t.name tname, t.id tid</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关联 -&gt; association -&gt; 用于多对一</p><p>集合 -&gt; collection -&gt; 用于一对多</p><h2 id="模糊查询like语句"><a href="#模糊查询like语句" class="headerlink" title="模糊查询like语句"></a>模糊查询like语句</h2><ul><li><p>在Java代码中添加sql通配符。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java代码</span></span><br><span class="line"><span class="type">string</span> <span class="variable">wildcardname</span> <span class="operator">=</span> “%smi%”;</span><br><span class="line">list&lt;name&gt; names = mapper.selectlike(wildcardname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapper.xml</span></span><br><span class="line">&lt;select id=”selectlike”&gt;</span><br><span class="line">select * from foo where bar like #&#123;value&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><p>在sql语句中拼接通配符，会引起sql注入。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java代码</span></span><br><span class="line"><span class="type">string</span> <span class="variable">wildcardname</span> <span class="operator">=</span> “smi”;</span><br><span class="line">list&lt;name&gt; names = mapper.selectlike(wildcardname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapper.xml</span></span><br><span class="line">&lt;select id=”selectlike”&gt;</span><br><span class="line">    select * from foo where bar like <span class="string">&quot;%&quot;</span>#&#123;value&#125;<span class="string">&quot;%&quot;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Mybatis注解的的表达力和灵活性十分有限，最强大的MyBatis映射并不能用注解来构建，使用注解和配置文件协同开发，才是MyBatis的最佳实践。</p><p>注解：<code>@select()</code>、<code>@update()</code>、<code>@insert()</code>、<code>@delete()</code></p><p>使用注解开发后就不需要mapper.xml文件，此时sql语句写在接口方法的上方，同时mybatis-config.xml也需要修改。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select id,name,pwd password from user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在mybatis的核心配置文件中注入</span></span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class=<span class="string">&quot;com.kuang.mapper.UserMapper&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><p>Mybatis的核心配置文件mybatis-config.xml，能配置的内容如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">- configuration（配置）</span><br><span class="line">    - properties（属性）</span><br><span class="line">- settings（设置）</span><br><span class="line">    - typeAliases（类型别名）</span><br><span class="line">    - typeHandlers（类型处理器）</span><br><span class="line">    - objectFactory（对象工厂）</span><br><span class="line">    - plugins（插件）</span><br><span class="line">    - environments（环境配置）</span><br><span class="line">- environment（环境变量）</span><br><span class="line">- transactionManager（事务管理器）</span><br><span class="line">- dataSource（数据源）</span><br><span class="line">    - databaseIdProvider（数据库厂商标识）</span><br><span class="line">    - mappers（映射器）</span><br></pre></td></tr></table></figure><h3 id="environments元素"><a href="#environments元素" class="headerlink" title="environments元素"></a>environments元素</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置MyBatis的多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定）。</p><p>子元素节点：environment</p><ul><li><p>具体的一套环境，通过设置id进行区别，id保证唯一。</p></li><li><p>事务管理器：<code>&lt;transactionManager type=&quot;[ JDBC | MANAGED ]&quot;/&gt;</code>。这两种事务管理器类型都不需要设置任何属性。</p></li><li><p>dataSource元素使用标准的JDBC数据源接口来配置JDBC连接对象的资源。</p></li><li><p>数据源，必须配置，有三种的数据源类型：<code>type=&quot;[UNPOOLED | POOLED | JNDI]&quot;</code></p><p>unpooled：这个数据源的实现只是每次被请求时打开和关闭连接。</p><p>pooled：这种数据源的实现利用“池”的概念将JDBC连接对象组织起来，这是一种使得并发Web应用快速响应请求的流行处理方式。</p><p>jndi：这个数据源的实现是为了能在如Spring或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用。</p></li><li><p>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等。</p></li></ul><h3 id="mappers元素"><a href="#mappers元素" class="headerlink" title="mappers元素"></a>mappers元素</h3><p>映射器：定义映射SQL语句文件</p><p>引入资源方式有以下几种：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用映射器接口实现类的完全限定类名</span></span><br><span class="line"><span class="comment">    需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    将包内的映射器接口实现全部注册为映射器</span></span><br><span class="line"><span class="comment">    但是需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>数据库这些属性都是可外部配置且可动态替换的，既可以在典型的Java属性文件中配置，亦可通过properties元素的子元素来传递。</p><ol><li><p>在资源目录下新建一个db.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/dbName?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></li><li><p>将文件导入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>类型别名，为Java类型设置一个短的名字。它只和XML配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当这样配置时，User可以用在任何使用com.pojo.User的地方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以指定一个包名，MyBatis会在包名下面搜索需要的Java Bean</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每一个在包com.pojo中的Java Bean，在没有注解的情况下，会使用Bean的首字母小写的非限定类名来作为它的别名。若有注解，则别名为其注解值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>settings相关</p><ul><li>懒加载</li><li>日志实现</li><li>缓存开启关闭</li></ul><p>一个配置完整的settings元素示例如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>类型处理器</strong></p><p>无论是MyBatis在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java类型。可以重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型。</p><p><strong>对象工厂</strong></p><p>MyBatis每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过有参构造方法来实例化。如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。</p></blockquote><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><img src="image-20220927075925489.png" alt="image-20220927075925489" style="zoom:80%;" /><p>作用域理解</p><ul><li><p>SqlSessionFactoryBuilder的作用在于创建SqlSessionFactory，创建成功后，SqlSessionFactoryBuilder就失去了作用，所以它只能存在于创建SqlSessionFactory的方法中，而不要让其长期存在。所以SqlSessionFactoryBuilder实例的最佳作用域是方法作用域（也就是局部方法变量）。</p></li><li><p>SqlSessionFactory可以被认为是一个数据库连接池，它的作用是创建SqlSession接口对象。因为MyBatis的本质就是Java对数据库的操作，所以SqlSessionFactory的生命周期存在于整个MyBatis的应用之中，所以一旦创建了SqlSessionFactory，就要长期保存它，直至不再使用MyBatis应用，所以可以认为SqlSessionFactory的生命周期就等同于MyBatis的应用周期。</p></li><li><p>由于SqlSessionFactory是一个对数据库的连接池，所以它占据着数据库的连接资源。如果创建多个SqlSessionFactory，那么就存在多个数据库连接池，这样不利于对数据库资源的控制，也会导致数据库连接资源被消耗光，出现系统宕机等情况，所以尽量避免发生这样的情况。因此在一般的应用中我们往往希望SqlSessionFactory作为一个单例，让它在应用中被共享。所以SqlSessionFactory的最佳作用域是应用作用域。</p></li><li><p>如果说SqlSessionFactory相当于数据库连接池，那么SqlSession就相当于一个数据库连接（Connection对象），你可以在一个事务里面执行多条SQL，然后通过它的commit、rollback等方法，提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后，应该关闭这条连接，让它归还给SqlSessionFactory，否则数据库资源就很快被耗费精光，系统就会瘫痪，所以用try…catch…finally…语句来保证其正确关闭。所以SqlSession的最佳的作用域是请求或方法作用域。</p></li></ul><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><img src="image-20220926183150661.png" alt="image-20220926183150661"/><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种工具：SLF4J、Apache Commons Logging、Log4j 2、Log4j、JDK logging。具体选择哪个日志实现工具由MyBatis的内置日志工厂确定，它会使用最先找到的（按上文列举的顺序查找），如果一个都未找到，日志功能就会被禁用。</p><h3 id="标准日志实现"><a href="#标准日志实现" class="headerlink" title="标准日志实现"></a>标准日志实现</h3><p>指定MyBatis应该使用哪个日志记录实现，如果此设置不存在，则会自动发现日志记录实现。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h3><p>Log4j是Apache的一个开源项目。通过使用Log4j，可以控制日志信息输送的目的地：控制台，文本，GUI组件等，也可以控制每一条日志的输出格式。通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程。这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p><ol><li><p>导入log4j依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置文件log4j.properties：放在resources文件夹下。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/test.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure></li><li><p>setting设置日志实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试：控制台输出日志，同时生成一个日志文件。</p><blockquote><p>注意：log4j可进行信息输出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(MyTest.class);</span><br><span class="line">logger.info(<span class="string">&quot;info：进入selectUser方法&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug：进入selectUser方法&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error: 进入selectUser方法&quot;</span>);</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>查询大量数据的时候，往往使用分页进行查询，也就是每次处理小部分数据，这样对数据库的压力就在可控范围内。</p><h3 id="limit实现"><a href="#limit实现" class="headerlink" title="limit实现"></a>limit实现</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 检索startIndex<span class="operator">+</span><span class="number">1</span> <span class="operator">~</span> startIndex<span class="operator">+</span>pageSize</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT stratIndex, pageSize</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">5</span>, <span class="number">10</span>; # 检索记录行 <span class="number">6</span><span class="number">-15</span>  </span><br><span class="line"></span><br><span class="line"># 检索从某一个偏移量到表尾所有的记录行，指定第二个参数为<span class="number">-1</span>：   </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">95</span>, <span class="number">-1</span>; # 检索记录行 <span class="number">96</span><span class="operator">-</span>last.  </span><br><span class="line"></span><br><span class="line"># 如果只给定一个参数，它表示返回最大的记录行数目，即：LIMIT n 等价于 LIMIT <span class="number">0</span>,n。 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">5</span>; # 检索前<span class="number">5</span>个记录行  </span><br></pre></td></tr></table></figure><p>mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">(Map&lt;String,Integer&gt; map)</span>;</span><br></pre></td></tr></table></figure><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：起始位置 &#x3D; (当前页面 - 1) * 页面大小</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第几页</span></span><br><span class="line"><span class="type">int</span> <span class="variable">currentPage</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 每页显示几个</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Integer&gt;();</span><br><span class="line">map.put(<span class="string">&quot;startIndex&quot;</span>,(currentPage-<span class="number">1</span>)*pageSize);</span><br><span class="line">map.put(<span class="string">&quot;pageSize&quot;</span>,pageSize);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = mapper.selectUser(map);</span><br><span class="line"><span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PageHelper"><a href="#PageHelper" class="headerlink" title="PageHelper"></a>PageHelper</h3><p>参考文档：<a href="https://pagehelper.github.io/docs/howtouse/">https://pagehelper.github.io/docs/howtouse/</a></p><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>动态SQL指的是根据不同的查询条件，生成不同的Sql语句。</p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog <span class="keyword">where</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">title <span class="operator">=</span> #&#123;title&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;author != null&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">and</span> author <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果author等于null，那么查询语句为<code>select \* from user where title=#&#123;title&#125;</code>，但是如果title为空author不为空，那么查询语句为<code>select \* from user where and author=#&#123;author&#125;</code>，这是错误的SQL语句，此时需要使用where语句。</p></blockquote><h3 id="where语句"><a href="#where语句" class="headerlink" title="where语句"></a>where语句</h3><p>这个where标签会知道如果它包含的标签中有返回值的话，它就插入一个where。此外，如果标签返回的内容是以and或or开头的，则它会被剔除掉。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">title <span class="operator">=</span> #&#123;title&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;author != null&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">and</span> author <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="set语句"><a href="#set语句" class="headerlink" title="set语句"></a>set语句</h3><p>用于更新操作</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> blog</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">set</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">    title <span class="operator">=</span> #&#123;title&#125;,</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;author != null&quot;<span class="operator">&gt;</span></span><br><span class="line">    author <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">set</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;;</span><br></pre></td></tr></table></figure><h3 id="choose语句"><a href="#choose语句" class="headerlink" title="choose语句"></a>choose语句</h3><p>有时候我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用choose标签可以解决此类问题，类似于Java的switch语句。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>choose<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">title <span class="operator">=</span> #&#123;title&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;author != null&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> author <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span>otherwise<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> views <span class="operator">=</span> #&#123;views&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>otherwise<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>choose<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><p>有时候可能某个sql语句用的特别多，为了增加代码的重用性，简化代码，可以将这些代码抽取出来，使用时直接调用即可。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 提取<span class="keyword">sql</span>片段</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">sql</span> id<span class="operator">=</span>&quot;if-title-author&quot;<span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">      title <span class="operator">=</span> #&#123;title&#125;</span><br><span class="line">   <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;author != null&quot;<span class="operator">&gt;</span></span><br><span class="line">      <span class="keyword">and</span> author <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line">   <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">sql</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"># 引用<span class="keyword">sql</span>片段</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"># 引用<span class="keyword">sql</span>片段，如果refid指定的不在本文件中，那么需要在前面加上namespace</span><br><span class="line"><span class="operator">&lt;</span>include refid<span class="operator">=</span>&quot;if-title-author&quot;<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">/</span>include<span class="operator">&gt;</span></span><br><span class="line"># 在这里还可以引用其他的<span class="keyword">sql</span>片段</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>最好基于单表来定义sql片段，以提高片段的重用性。</p><p>注意：在sql片段中不要包括where。</p></blockquote><h3 id="foreach语句"><a href="#foreach语句" class="headerlink" title="foreach语句"></a>foreach语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># collection：指定输入对象中的集合属性</span><br><span class="line"># item：每次遍历生成的对象</span><br><span class="line"># <span class="keyword">open</span>：开始遍历时的拼接字符串</span><br><span class="line"># <span class="keyword">close</span>：结束时拼接的字符串</span><br><span class="line"># separator：遍历对象之间需要拼接的字符串</span><br><span class="line"># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog <span class="keyword">where</span> (id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>foreach collection<span class="operator">=</span>&quot;ids&quot; item<span class="operator">=</span>&quot;id&quot; <span class="keyword">open</span><span class="operator">=</span>&quot;(&quot; <span class="keyword">close</span><span class="operator">=</span>&quot;)&quot; separator<span class="operator">=</span>&quot;or&quot;<span class="operator">&gt;</span></span><br><span class="line">    id<span class="operator">=</span>#&#123;id&#125;</span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">HashMap map <span class="operator">=</span> <span class="keyword">new</span> HashMap();</span><br><span class="line">List<span class="operator">&lt;</span><span class="type">Integer</span><span class="operator">&gt;</span> ids <span class="operator">=</span> <span class="keyword">new</span> ArrayList<span class="operator">&lt;</span><span class="type">Integer</span><span class="operator">&gt;</span>();</span><br><span class="line">ids.add(<span class="number">1</span>);</span><br><span class="line">ids.add(<span class="number">2</span>);</span><br><span class="line">ids.add(<span class="number">3</span>);</span><br><span class="line">map.put(&quot;ids&quot;,ids);</span><br><span class="line">List<span class="operator">&lt;</span>Blog<span class="operator">&gt;</span> blogs <span class="operator">=</span> mapper.queryBlogForeach(map);</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>其实动态sql语句的编写往往就是一个拼接的问题，为了保证拼接准确，最好先要写出原生的sql语句，然后再通过动态sql对照着改，防止出错。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>什么是缓存？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库数据文件）查询，而从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul><p>为什么使用缓存：减少和数据库的交互次数，减少系统开销，提高系统效率。</p><p>什么样的数据能使用缓存：经常查询并且不经常改变的数据。</p><p>Mybatis缓存：MyBatis系统中默认定义了两级缓存：<code>一级缓存</code>和<code>二级缓存</code>。</p><ul><li>默认情况下，只有一级缓存开启（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，它是基于namespace级别的缓存。</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache，我们可以通过实现Cache接口来自定义二级缓存。</li></ul><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存，也叫本地缓存。与数据库同一次会话期间查询到的数据会放在本地缓存中，以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">System.out.println(user==user2);</span><br></pre></td></tr></table></figure><p>一级缓存是SqlSession级别的缓存，是一直开启的，关闭不了。</p><p>一级缓存失效的四种情况，即没有使用到当前的一级缓存，还需要再向数据库中发起一次查询请求。</p><ol><li><p>sqlSession不同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session2</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> session2.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">session.close();</span><br><span class="line">session2.close();</span><br></pre></td></tr></table></figure><blockquote><p>观察结果：发现发送了两条SQL语句。</p><p>结论：每个sqlSession中的缓存相互独立。</p></blockquote></li><li><p>sqlSession相同，查询条件不同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">2</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">System.out.println(user==user2);</span><br></pre></td></tr></table></figure><blockquote><p>观察结果：发现发送了两条SQL语句。</p><p>结论：当前缓存中，不存在这个数据。</p></blockquote></li><li><p>sqlSession相同，但两次查询之间<code>执行了增删改</code>操作。</p><blockquote><p>观察结果：在执行了增删改操作后，查询操作重新执行了。</p><p>结论：因为增删改操作可能会对当前数据产生影响。</p></blockquote></li><li><p>sqlSession相同，手动清除一级缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="comment">// 手动清除缓存</span></span><br><span class="line">session.clearCache();</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user2);</span><br></pre></td></tr></table></figure><blockquote><p>一级缓存就是一个map</p></blockquote></li></ol><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存，其是基于namespace级别的缓存。一个名称空间，对应一个二级缓存。</p><p>工作机制：</p><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中。</li></ul><p>使用：</p><ol><li><p>开启全局缓存【mybatis-config.xml】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>步骤2，在每个mapper.xml中配置使用二级缓存</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--官方示例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个更高级的配置创建了一个FIFO缓存，每隔60秒刷新，最多可以存储结果对象或列表的512个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会使不同线程中的调用者产生冲突。 --&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>结论：</p><ul><li>只要开启了二级缓存，在同一个Mapper中的查询，可以在二级缓存中拿到数据；</li><li>查出的数据都会被默认先放在一级缓存中；</li><li>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中。</li></ul><h3 id="缓存原理图"><a href="#缓存原理图" class="headerlink" title="缓存原理图"></a>缓存原理图</h3><img src="image-20220926183816723.png" alt="image-20220926183816723"/>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2022/09/24/SpringMVC/"/>
      <url>/2022/09/24/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>MVC</strong></p><p>MVC是<code>模型</code>（Model）、<code>视图</code>（View）、<code>控制器</code>（Controller）的简写，是一种软件设计规范。以将业务逻辑、数据、显示分离的方式来组织代码，其主要作用是降低视图与业务逻辑间的双向耦合。MVC不是一种设计模式，而是一种架构模式。</p><ul><li>Model：数据模型，提供要展示的数据，因此包含数据（Dao）和行为（Service）。</li><li>View：负责进行模型的展示，一般就是页面。</li><li>Controller：接收用户请求，委托给模型进行处理，处理完毕后把返回的模型数据返回给视图，由视图负责展示。</li></ul><p><strong>SpringMVC概述</strong></p><p>SpringMVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。特点：</p><ul><li>轻量级，简单易学</li><li>高效，基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li><code>约定优于配置</code></li><li>功能强大：RESTFul、数据验证、格式化、本地化、主题等</li><li>简介灵活</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>SpringMVC框架以请求为驱动，围绕<code>DispatcherServlet</code>（调度servlet，本质上是一个servlet，它继承自HttpServlet）设计，其作用是将请求分发到不同的处理器。</p><img src="image-20220924163248344.png" alt="image-20220924163248344"/><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p>简要分析执行流程：</p><ol><li>获取用户请求对应的url</li><li>DispatcherServlet调用HandlerMapping（处理器映射器），HandlerMapping根据请求的url查找Handler。</li><li>HandlerExecution表示具体的Handler，其主要作用是根据url查找控制器。</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet，如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter，如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li><li>DispatcherServlet调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ol><h2 id="第一个SpringMVC程序"><a href="#第一个SpringMVC程序" class="headerlink" title="第一个SpringMVC程序"></a>第一个SpringMVC程序</h2><ol><li><p>添加web的支持，配置web.xml，注册DispatcherServlet。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定一个springmvc的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别1：跟服务器一起启动。启动顺序，数字越小，启动越早--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>：不会匹配<code>.jsp</code>，只针对我们编写的请求，即：.jsp不会进入DispatcherServlet类。</p><p><code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code>：会匹配<code>*.jsp</code>，会出现返回jsp视图时再次进入DispatcherServlet类，导致找不到对应的controller，所以报404。</p></blockquote></li><li><p>编写SpringMVC的配置文件，添加处理器映射器、处理器适配器及视图解析器。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据url中请求的名字查找对应的bean，例如xxx/hello，则查找/hello--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        视图解析器：解析ModelAndView</span></span><br><span class="line"><span class="comment">        1. 获取ModelAndView的数据</span></span><br><span class="line"><span class="comment">        2. 解析ModelAndView的视图名字</span></span><br><span class="line"><span class="comment">        3. 拼接视图名字，找到对应的视图</span></span><br><span class="line"><span class="comment">        4. 将数据渲染到对应视图上</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写Controller，要么实现Controller接口，要么添加注解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">// 封装对象，放在ModelAndView中，即Model</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;helloSpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">// 封装要跳转的视图，放在ModelAndView中，即View</span></span><br><span class="line">        <span class="comment">// 拼接后为：/WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将Controller类交给SpringIOC容器，注册bean。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--id：请求的位置，class：对请求进行处理的Controller（即谁对请求进行处理）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写对应的jsp页面，显示ModelandView存放的数据。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat启动测试。</p><blockquote><p>若访问出现404，先查看控制台输出，看一下是否缺少jar包。如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖，然后重启Tomcat。</p></blockquote></li></ol><h2 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h2><p>编写配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效，由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 让SpringMVC不处理静态资源，即过滤.css、.html、.js、.mp3等资源，使它们不被视图解析器处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">        即：替代了处理器映射器、处理器适配器。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用注解，会自动配置bean</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">// @RequestMapping：映射请求路径，可设置多级路径，即在类与方法上都进行映射，但类上的映射可省略</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">// model用于存放数据</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        <span class="comment">// 封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">// 跳转的视图，会被视图解析器处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用springMVC必须配置的三大件：处理器映射器、处理器适配器、视图解析器。</p><p>通常，我们只需要手动配置视图解析器，而处理器映射器和处理器适配器只需要开启注解驱动即可。</p></blockquote><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><p>控制器负责解析用户的请求并将其转换为一个模型返回给视图解析器，可以通过<code>实现接口</code>或<code>使用注解</code>两种方法来实现。</p><ul><li><p>实现Controller接口，该接口在org.springframework.web.servlet.mvc包下，接口中只有一个方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现该接口的类获得控制器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">   <span class="comment">// 处理请求且返回一个模型与视图对象</span></span><br><span class="line">   ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Controller类并实现该接口，编写完毕后，需要去Spring配置文件中<code>注册</code>请求的bean。name或者id对应请求路径，class对应处理请求的类。</p><blockquote><p>只要类实现了Controller接口，说明这就是一个控制器，缺点就是一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller，定义的方式比较麻烦。</p><p>注意：这种方式就算只保留视图解析器也能运行。</p></blockquote></li><li><p>使用注解@Controller，该注解用于声明该类是一个控制器，该方式需要在配置文件中声明组件扫描。</p><blockquote><p>注意：这种方式就算只保留视图解析器以及注解扫描也能运行。</p></blockquote></li></ul><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h2><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法，即可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要多级路径时也可以直接注解在方法上，例如：@RequestMapping(“&#x2F;c3&#x2F;test1”)</p></blockquote><h2 id="结果跳转方式"><a href="#结果跳转方式" class="headerlink" title="结果跳转方式"></a>结果跳转方式</h2><h3 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h3><p>设置ModelAndView对象，根据view的名称和视图解析器可跳到指定的页面。</p><p>页面：{视图解析器前缀} + viewName + {视图解析器后缀}</p><blockquote><p>此时控制器采用实现接口的方式编写。</p></blockquote><h3 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h3><p>通过设置ServletAPI，不需要视图解析器：</p><ul><li>通过HttpServletResponse进行输出。</li><li>通过HttpServletResponse实现重定向，<code>不能传递数据</code>。</li><li>通过HttpServletRequest实现转发，<code>不改变地址栏</code>。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultGo</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">// 转发</span></span><br><span class="line">       req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC实现转发和重定向"><a href="#SpringMVC实现转发和重定向" class="headerlink" title="SpringMVC实现转发和重定向"></a>SpringMVC实现转发和重定向</h3><p>有视图解析器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 重定向，不需要视图解析器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 转发</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">    <span class="comment">// 重定向到另一个请求，&quot;redirect:/t1&quot;也可以</span></span><br><span class="line">    <span class="comment">// return &quot;redirect:t1&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无视图解析器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSpringMVC</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// 转发，两种方式均可</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/jsp/test1.jsp&quot;</span>;</span><br><span class="line">       <span class="comment">// return &quot;forward:/WEB-INF/jsp/test1.jsp&quot;;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t3&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// 重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h3><p>请求地址中参数名和处理方法的参数名<code>一致</code>，此时能直接得到对应的值。若不存在对应的参数，则方法中的参数值为默认值。</p><p>请求地址中参数名和处理方法的参数名<code>不一致</code>，使用<code>@RequestParam</code>注解进行参数对应。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/hello?username=zs</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span>&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>无论两者是否对应，都使用注解，表示其需要接收前端传递的参数。使用注解后，请求地址中必须存在对应的参数，否则会报错。</p><p>若提交的是一个<code>对象</code>，即对象相应属性，方法参数使用对象即可。此时前端传递的参数名和对象属性名必须一致，否则对应的属性为默认值。</p></blockquote><h3 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h3><ol><li><p>通过ModelAndView</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    mv.setViewName(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ControllerTest1 implements Controller &#123;</span></span><br><span class="line"><span class="comment">   public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</span></span><br><span class="line"><span class="comment">       //返回一个模型视图对象</span></span><br><span class="line"><span class="comment">       ModelAndView mv = new ModelAndView();</span></span><br><span class="line"><span class="comment">       mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);</span></span><br><span class="line"><span class="comment">       mv.setViewName(&quot;test&quot;);</span></span><br><span class="line"><span class="comment">       return mv;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>通过Model</p></li><li><p>通过ModelMap</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">test4</span><span class="params">(ModelMap map)</span>&#123;</span><br><span class="line">    map.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><p>解决前端传递的数据为乱码的问题，在web.xml中配置SpringMVC的乱码过滤器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：此处是<code>“/*”</code>。</p></blockquote><h2 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h2><p>RestFul是一种资源定位及资源操作的风格，不是标准也不是协议，只是一种风格，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>传统方式操作资源，通过<code>不同的参数</code>来实现不同的效果，方法单一，post和get。</p><ul><li><p><a href="http://127.0.0.1/item/queryItem.action?id=1%E2%80%94%E2%80%94%E6%9F%A5%E8%AF%A2%EF%BC%8CGET">http://127.0.0.1/item/queryItem.action?id=1——查询，GET</a></p></li><li><p><a href="http://127.0.0.1/item/saveItem.action%E2%80%94%E2%80%94%E6%96%B0%E5%A2%9E%EF%BC%8CPOST">http://127.0.0.1/item/saveItem.action——新增，POST</a></p></li><li><p><a href="http://127.0.0.1/item/updateItem.action%E2%80%94%E2%80%94%E6%9B%B4%E6%96%B0%EF%BC%8CPOST">http://127.0.0.1/item/updateItem.action——更新，POST</a></p></li><li><p><a href="http://127.0.0.1/item/deleteItem.action?id=1%E2%80%94%E2%80%94%E5%88%A0%E9%99%A4%EF%BC%8CGET%E6%88%96POST">http://127.0.0.1/item/deleteItem.action?id=1——删除，GET或POST</a></p></li></ul><p>使用RestFul操作资源，可以通过<code>不同的请求方式</code>来实现不同的效果，如下：请求地址一样，但是功能不同。</p><ul><li><a href="http://127.0.0.1/item/1%E2%80%94%E2%80%94%E6%9F%A5%E8%AF%A2%EF%BC%8CGET">http://127.0.0.1/item/1——查询，GET</a></li><li><a href="http://127.0.0.1/item%E2%80%94%E2%80%94%E6%96%B0%E5%A2%9E%EF%BC%8CPOST">http://127.0.0.1/item——新增，POST</a></li><li><a href="http://127.0.0.1/item%E2%80%94%E2%80%94%E6%9B%B4%E6%96%B0%EF%BC%8CPUT">http://127.0.0.1/item——更新，PUT</a></li><li><a href="http://127.0.0.1/item/1%E2%80%94%E2%80%94%E5%88%A0%E9%99%A4%EF%BC%8CDELETE">http://127.0.0.1/item/1——删除，DELETE</a></li></ul><p>在SpringMVC中可以使用<code>@PathVariable</code>注解，让方法参数的值对应绑定到一个URL模板变量上，同时参数也可以从URL上获取传递的值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestFulController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="comment">// RestFul风格：http://localhost:8080/add/a/b</span></span><br><span class="line">    <span class="comment">// 例如：http://localhost:8080/add/1/2</span></span><br><span class="line">    <span class="comment">// 此时传统拼接方法就不能使用了</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> <span class="type">int</span> b, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为：&quot;</span>+(a+b));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    也可以这样写：</span></span><br><span class="line"><span class="comment">    @RequestMapping(&quot;/add/&#123;a1&#125;&quot;)</span></span><br><span class="line"><span class="comment">    public String test(@PathVariable(&quot;a1&quot;) int a)&#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>使用<code>method属性</code>指定请求类型，用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET、POST、PUT、DELETE等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> String b, Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为：&quot;</span>+(a+b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只有请求类型相同时才能访问，若请求类型不相同，会报错405。</p><p>所有的地址栏请求默认是<code>GET类型</code>。</p><p>可以把value改为path，即<code>@RequestMapping(path = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;, method = ...)</code></p></blockquote><p>方法级别的注解变体有如下几个：</p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li><li>@PatchMapping</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等价于@RequestMapping(method = RequestMethod.GET) </span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> String b, Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为1：&quot;</span>+(a+b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求的URL地址相同，都是/add/a/b，但结果不同：因为请求的方式不同，此时会调用不同的方法。</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> String b, Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为2：&quot;</span>+(a+b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用路径变量的好处：</p><ul><li>使路径变得更加简洁。</li><li>获得参数更加方便，框架会自动进行类型转换。</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法。例如需要的两个参数都是int，而访问的路径是&#x2F;add&#x2F;1&#x2F;a，则请求失败，因为路径与方法不匹配，而不是参数转换失败。</li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>概念：JSON（JavaScript Object Notation，JS对象标记）是一种轻量级的数据交换格式，采用完全独立于编程语言的文本格式来存储和表示数据，简洁和清晰的层次结构使得JSON成为理想的数据交换语言，易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><p>在JavaScript语言中，一切都是对象。因此，任何JavaScript支持的类型都可以通过JSON来表示。</p><p>关于JSON和JavaScript对象，可以理解为JSON是JavaScript对象的字符串表示法，它使用文本表示一个JS对象的信息，本质是一个<code>字符串</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;; </span><br><span class="line"><span class="comment">// 这是一个 JSON 字符串，本质是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; </span><br></pre></td></tr></table></figure><p>JSON和JavaScript对象互转</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JavaScript -&gt; JSON：使用JSON.stringify()方法</span></span><br><span class="line">user = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zs&quot;</span>&#125;</span><br><span class="line">json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON -&gt; JavaScript：使用JSON.parse()方法</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);</span><br></pre></td></tr></table></figure><h2 id="Controller返回JSON数据"><a href="#Controller返回JSON数据" class="headerlink" title="Controller返回JSON数据"></a>Controller返回JSON数据</h2><p><strong>使用Jackson</strong></p><ol><li><p>Jackson：json解析工具，使用时需要导入对应依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">// 加上这个注解后就不会走视图解析器，会直接返回一个字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">// 创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">// 将对象解析成为json格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以在类上使用<code>@RestController</code>注解（@RestController是@Controller和@ResponseBody两个注解的结合体），使用该注解后，该类下的方法返回的都是字符串，此时就不需要为每个方法都添加@ResponseBody。</p></blockquote></li><li><p>测试发现乱码，需要设置一下它的编码格式为utf-8，以及它返回的类型，通过@RequestMaping的produces属性来实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// produces：指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/j1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p>多请求时可以通过Spring配置统一配置。在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSON乱码问题配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这部分乱码处理的是<code>后台返回前端</code>所带来的乱码，使用时需要引入<code>Jackson的依赖</code>。</p></blockquote></li><li><p>对于时间对象，返回的是当前日期的毫秒数，即Jackson默认是会把时间转成<code>时间戳</code>的形式。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想得到日期格式，可以自定义日期格式或使用ObjectMapper：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义日期格式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(sdf.format(date));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ObjectMapper</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="comment">// 不使用时间戳的方式</span></span><br><span class="line">    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 自定义日期格式对象</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="comment">// 指定日期格式</span></span><br><span class="line">    mapper.setDateFormat(sdf);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(sdf.format(date));   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽取为工具类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(object,<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个参数为日期格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object, String dataFormat)</span>&#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(dataFormat);</span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> JsonUtils.getJson(date,<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>使用FastJson</strong></p><p>FastJson，阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换。</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>fastjson三个主要的类：</p><ul><li><p>JSONObject代表json对象；</p></li><li><p>JSONArray代表json对象数组；</p></li><li><p>JSON用于JSONObject和JSONArray的转化。</p></li></ul><p>方法</p><ul><li>java对象 -&gt; JSON字符串：JSON.toJSONString(list)</li><li>JSON字符串 -&gt; java对象：JSON.parseObject(str2, User.class)</li><li>java对象 -&gt; JSON对象：(JSONObject)JSON.toJSON(user1)</li><li>JSON对象 -&gt; java对象：JSON.toJavaObject(jsonObject1, User.class)</li></ul><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><p>步骤：</p><p>创建数据库 -&gt; 创建项目 -&gt; 导入依赖 -&gt; 编写配置文件（database.properties、mybatis-config.xml（可省略）、applicationContext.xml） -&gt; pojo（实体类） -&gt; dao（接口以及接口对应的mapper.xml） -&gt; service（接口以及实现类，在实现类中调用dao层） -&gt; spring整合mybatis（spring-dao.xml） -&gt; spring整合service（spring-service.xml） -&gt; 增加web支持 -&gt; springmvc（web.xml以及spring-mvc.xml） -&gt; controller和视图层编写</p><p>依赖：junit、数据库驱动、连接池、jsp、jstl、servlet、mybatis、spring、lombok</p><p>相关文件：</p><ul><li><p>数据库配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--编码格式/安全连接/时区--&gt;</span></span><br><span class="line">jdbc:mysql://localhost:3306/dbName?userUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span><br></pre></td></tr></table></figure></li><li><p>数据库配置文件<code>database.properties</code></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/dbName?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></li><li><p>Spring整合Mybatis的相关的配置文件<code>spring-dao.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库配置文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">数据库连接池</span></span><br><span class="line"><span class="comment">dbcp：半自动化操作，不能自动连接</span></span><br><span class="line"><span class="comment">c3p0：自动化操作(自动加载配置文件，并且可以自动设置到对象中)</span></span><br><span class="line"><span class="comment">druid、hikari</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 绑定MyBaties的配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中，此后就不需要编写mapper的实现类了 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory，也可以选择注入SqlSessionTemplate --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描的Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.kuang.dao&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>MapperScannerConfigurer自动扫描，将Mapper接口生成代理注入到Spring。basePackage属性是让你为映射器接口文件设置基本的包路径，你可以使用分号或逗号作为分隔符设置多于一个的包路径。每个映射器将会在指定的包路径中递归地被搜索到。</p><p>注意：没有必要去指定SqlSessionFactory或SqlSessionTemplate，因为MapperScannerConfigurer将会创建MapperFactoryBean，之后自动装配。但是，如果你使用了一个以上的DataSource，那么自动装配可能会失效。</p></blockquote></li><li><p>Spring整合service：<code>spring-service.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描service下的包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--将所有业务类注入到spring中，可以通过配置，或者注解实现--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--注意：这里加载的是总的配置文件--&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--乱码过滤--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">          org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.扫描包：controller--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">&lt;!-- 2.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 3.静态资源过滤--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Spring配置整合文件：<code>applicationContext.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p>过滤器与拦截器的区别：拦截器是AOP思想的具体应用。</p><p>过滤器：</p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了&#x2F;*之后，可以对所有要访问的资源进行拦截</li></ul><p>拦截器：</p><ul><li><p>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</p></li><li><p>拦截器只会拦截访问的控制器方法</p></li></ul><p>自定义拦截器需要实现HandlerInterceptor接口。编写拦截器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在请求处理的方法之前执行</span></span><br><span class="line">   <span class="comment">// 如果返回true执行下一个拦截器</span></span><br><span class="line">   <span class="comment">// 如果返回false就不执行下一个拦截器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理前------------&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在请求处理方法执行之后执行</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理后------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------清理------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只需重写第一个方法即可，当返回false时可进行重定向或转发。</p></blockquote><p>在springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/**包括路径及其子路径，即过滤所有请求--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/* 拦截的是/admin/*这种, /admin/*/*不会被拦截--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h2><p><strong>文件上传</strong></p><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为<code>multipart/form-data</code>，只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器。</p><p>表单<code>enctype</code>属性说明：</p><ul><li>application&#x2F;x-www&#x3D;form-urlencoded：默认方式，只处理表单域中的value属性值，采用这种编码方式的表单会将表单域中的值处理成URL编码方式。</li><li>multipart&#x2F;form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text&#x2F;plain：除了把空格转换为”+”号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><p>示例：</p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的，否则下方控制器可能出错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置bean：multipartResolver</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id必须为：multipartResolver，否则上传文件会报400的错误！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M），可省略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>前端页面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @RequestParam(&quot;file&quot;)：将name=file控件得到的文件封装成CommonsMultipartFile对象</span></span><br><span class="line"><span class="comment">// 批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件名：file.getOriginalFilename();</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uploadFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 如果文件名为空，直接回到首页！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;上传文件名 : &quot;</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传路径保存设置</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    <span class="comment">// 如果路径不存在，创建一个</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">        realPath.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> file.getInputStream(); </span><br><span class="line">    <span class="comment">// 文件输出流</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath,uploadFileName)); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取写出</span></span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    os.close();</span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>也可采用<code>file.Transto</code>来保存上传的文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传路径保存设置</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">        realPath.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 上传文件地址</span></span><br><span class="line">    System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过CommonsMultipartFile的方法直接写文件</span></span><br><span class="line">    file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(realPath +<span class="string">&quot;/&quot;</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><p><strong>文件下载</strong></p><p>文件下载步骤：</p><ul><li>设置response响应头</li><li>读取文件 – InputStream</li><li>写出文件 – OutputStream</li><li>执行操作</li><li>关闭流</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloads</span><span class="params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   <span class="comment">// 要下载的图片地址</span></span><br><span class="line">   <span class="type">String</span>  <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   <span class="type">String</span>  <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;基础语法.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 1、设置response 响应头</span></span><br><span class="line">   response.reset(); <span class="comment">// 设置页面不缓存,清空buffer</span></span><br><span class="line">   response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">// 字符编码</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">// 二进制传输数据</span></span><br><span class="line">   <span class="comment">// 设置响应头</span></span><br><span class="line">   response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">   <span class="comment">// 2、 读取文件--输入流</span></span><br><span class="line">   InputStream input=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">   <span class="comment">// 3、 写出文件--输出流</span></span><br><span class="line">   <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">   <span class="type">byte</span>[] buff =<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">// 4、执行写出操作</span></span><br><span class="line">   <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">       out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">       out.flush();</span><br><span class="line">  &#125;</span><br><span class="line">   out.close();</span><br><span class="line">   input.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2022/09/22/Spring/"/>
      <url>/2022/09/22/Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。</p><p>官网：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/">https://docs.spring.io/spring-framework/docs/current/reference/html/</a></p><p>下载地址：<a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">https://repo.spring.io/ui/native/release/org/springframework/spring/</a></p><p>github：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p><p>优点：</p><ul><li>Spring是一个开源、免费、<code>轻量级</code>、非入侵式（即引用后程序依旧能正常运行）的框架；</li><li>控制反转（<code>IOC</code>）、面向切面编程（<code>AOP</code>）；</li><li>支持事务处理、框架整合。</li></ul><p>Maven依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>控制反转IOC（Inversion of Control），是一种设计思想，而 <code>DI（依赖注入）</code>是实现IOC的一种方法。没有IOC的程序中，使用面向对象编程时，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由<code>程序</code>自己控制。而控制反转后将对象的创建转移给<code>第三方</code>。即所谓控制反转就是：<code>获得依赖对象的方式反转了</code>。</p><img src="image-20220922184922803.png" alt="image-20220922184922803"/><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象并存入容器中，程序使用时再从IOC容器中取出需要的对象。</p><img src="image-20220922185943310.png" alt="image-20220922185943310" style="zoom:60%;" /><p>采用 <code>XML方式</code> 配置Bean的时候，Bean的定义信息是和实现 <code>分离</code> 的，而采用 <code>注解</code> 的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了<code>零配置</code>的目的。</p><p>控制反转是一种使用描述（XML或注解）并通过第三方去生产获取特定对象的方式。在Spring中实现控制反转的是 <code>IOC容器</code>，其实现方法是 <code>依赖注入</code>（DI，Dependency Injection）。</p><h2 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h2><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">使用Spring来创建对象，在Spring中这些都称为Bean。等价于: 类型 变量名 = new 类型();</span></span><br><span class="line"><span class="comment">参数说明：id: 等价于变量名；class: 需创建的对象；property: 给对象的属性赋值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象，可以传递多个参数，为配置文件的路径。</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 从容器中取出对象</span></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 传递第二个参数就可以省略类型转换</span></span><br><span class="line">        <span class="comment">// Hello people = context.getBean(&quot;hello&quot;, Hello.class);       </span></span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程就叫控制反转：</p><ul><li>控制：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的。使用Spring后，对象由Spring来创建。</li><li>反转：程序本身不创建对象，而变成被动的接收对象。</li></ul><p>IOC是一种编程思想，由主动的编程变成被动的接收。所谓的IOC，即：<code>对象由Spring来创建，管理，装配</code>。</p><h2 id="IOC创建对象方式"><a href="#IOC创建对象方式" class="headerlink" title="IOC创建对象方式"></a>IOC创建对象方式</h2><p>默认使用 <code>无参构造方法</code> 创建对象，当需要为属性赋值时需要有对应的 <code>set方法</code>。</p><p>使用 <code>有参构造方法</code> 来创建对象时，此时只能通过以下方式进行属性赋值，且 <code>可以省略set方法</code>。</p><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>下标</code> 赋值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据 <code>类型</code> 赋值，但类型相同时会出错，不建议使用</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>参数名</code> 来赋值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在 <code>配置文件加载</code> 的时候，容器中管理的对象就已经 <code>初始化</code> 了。</p></blockquote><h2 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h2><p>依赖 : 指Bean对象的 <code>创建</code> 依赖于容器 。</p><p>注入 : 指Bean对象所依赖的 <code>资源</code> , 例如属性，由容器来设置和装配 。</p><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><p>此时使用的是 <code>有参构造方法</code>，参考 <code>IOC创建对象方式</code> 的第二种。</p><h3 id="Set方式注入【主要方式】"><a href="#Set方式注入【主要方式】" class="headerlink" title="Set方式注入【主要方式】"></a>Set方式注入【主要方式】</h3><p>此时必须有 <code>无参构造方法</code> 以及 <code>set方法</code>。</p><p>Address类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx-xxx-xx&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基本数据类型，即普通值注入，value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;property name=&quot;name&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;value&gt;张三&lt;/value&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--对象类型，即bean注入，ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数组类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>《红楼梦》<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>《西游记》<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--List类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>阅读<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>绘画<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Map类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;001&quot;</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;002&quot;</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Set类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--null值和空值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;wife&quot; value=&quot;&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Properties类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>1910121029<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="P命名空间、C命名空间注入"><a href="#P命名空间、C命名空间注入" class="headerlink" title="P命名空间、C命名空间注入"></a>P命名空间、C命名空间注入</h3><p>p命名空间注入：对应于 <code>set注入</code>，依赖于 <code>无参构造和set方法</code>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用时需要导入p命名空间对应的xml约束--&gt;</span></span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值，property的缩写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>c命名空间注入：对应于 <code>构造器注入</code>，依赖于 <code>有参构造</code>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用时需要导入c命名空间对应的xml约束--&gt;</span></span><br><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--c命名空间注入，通过有参构造器进行注入，constructor-arg的缩写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean属性的自动装配"><a href="#Bean属性的自动装配" class="headerlink" title="Bean属性的自动装配"></a>Bean属性的自动装配</h2><p><code>自动装配</code> 是Spring满足bean依赖的一种方式，Spring会在上下文中自动寻找，并自动给bean <code>装配属性</code>。</p><p>在Spring中有三种装配的方式：</p><ul><li>在xml中显式配置【传统方式】</li><li>在Java中显式配置【使用java方式，不需要xml配置文件】</li><li>隐式的自动装配bean【注解】</li></ul><p>以下主要讲解第三种方式：</p><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 狗类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;miao~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;wang~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h3><p><code>byName</code>，按 <code>名称</code> 自动装配。修改bean配置，增加属性 <code>autowire=&quot;byName&quot;</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>规则：查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。然后去spring容器中寻找是否有此字符串名称id的对象，如果有，就取出注入；如果没有，就报空指针异常。</p><h3 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h3><p><code>byType</code>，按 <code>类型</code> 自动装配。会自动在容器上下文中查找和自己属性 <code>类型相同</code> 的bean，使用时需要保证：<code>同一类型</code> 的对象，在spring容器中 <code>唯一</code>。如果不唯一，会报不唯一的异常，即：<code>NoUniqueBeanDefinitionException</code></p><p>修改bean配置，增加属性 <code>autowire=&quot;byType&quot;</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>此时属性对应的bean就算 <code>不提供id</code> 也能装配成功，因为byType是根据类型来装配的，例如：<code>&lt;bean class=&quot;com.pojo.Cat&quot;/&gt;</code></p></blockquote><h3 id="使用注解实现属性的自动装配"><a href="#使用注解实现属性的自动装配" class="headerlink" title="使用注解实现属性的自动装配"></a>使用注解实现属性的自动装配</h3><p>jdk1.5后支持注解，Spring2.5后支持注解。</p><p>使用注解须知</p><ul><li>导入约束：context约束</li><li>开启属性注解支持：<code>&lt;context:annotation-config/&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>@Autowired注解</code>，直接在属性上使用，或是在set方法上使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;   </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        @Autowired</span></span><br><span class="line"><span class="comment">        public void setDog(Dog dog) &#123;</span></span><br><span class="line"><span class="comment">            this.dog = dog;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时它会依照byName或是byType方式进行自动装配，因此要么存在 <code>id值与名字相同</code>，要么 <code>该类型的bean唯一</code>，否则会报错。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">@Autowired</span></span><br><span class="line"><span class="comment">private Dog dog;</span></span><br><span class="line"><span class="comment">此时不存在与名字相同的id值，且该类型的bean也不唯一，因此不能完成自动装配</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>存在所需id值的bean时又存在同类型的bean对象时 <code>优先使用byName方式</code>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此时优先使用byName方式进行注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小灰&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当既不存在与名字相同的id值，且该类型的bean又不唯一时，可以在属性上方加上 <code>@Qualifier(value=&quot;xxx&quot;)</code> 来指定一个bean，即可完成自动装配。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;dog11&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><blockquote><p>使用@Autowired，即使 <code>没有set方法</code> 也能正常运行，前提是自动装配的属性在IOC（Spring）容器中存在且符合byName或byType。</p><p>如果显式定义了@Autowired的required的属性为false，说明这个对象可以为 <code>null</code>，否则不允许为空，即：<code>@Autowired(required = false)</code></p></blockquote><p><code>@Resource注解</code>，直接在属性上使用，或是在set方法上使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        @Resource</span></span><br><span class="line"><span class="comment">    public void setCat(Cat cat) &#123;</span></span><br><span class="line"><span class="comment">        this.cat = cat;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它也是依据byName或byType来实现的，因此要么存在id值与名字相同，要么该类型的bean唯一，否则会报错。当存在所需id值的bean时又存在同类型的bean对象时<code>优先使用byName方式</code>。这种注解也可以省略set方法。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此时优先使用byName方式进行注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小灰&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当既不存在与名字相同的id值，且该类型的bean又不唯一时，可以通过 <code>name</code> 来指定bean。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;dog1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><h3 id="alias标签"><a href="#alias标签" class="headerlink" title="alias标签"></a>alias标签</h3><p>设置 <code>别名</code>，可以使用原名称或别名来获取这个对象</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bean标签的配置"><a href="#bean标签的配置" class="headerlink" title="bean标签的配置"></a>bean标签的配置</h3><ul><li>id：bean的标识符，相当于对象名</li><li>class：bean对象所对应的全限定名：包名 + 类名</li><li>name：<code>别名</code>，可以同时取多个别名，可以用逗号、空格、分号分隔。</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2 u2,u3;u4&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> id是bean的标识符，<code>唯一</code>。如果没有配置id，name就是默认标识符。</p><p>如果 <code>不配置id和name</code>，可以根据 <code>Context.getBean(类名.class)</code> 获取对象。</p></blockquote><h3 id="import标签"><a href="#import标签" class="headerlink" title="import标签"></a>import标签</h3><p>import标签一般用于团队开发，它可以将多个配置文件导入 <code>合并</code> 为一个。使用的时候，直接使用总的配置文件即可。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--当前为applicationContext.xml，另外两个分别为beans1.xml、beans2.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans1.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若两个配置文件中存在 <code>相同的bean</code>，例如配置文件1中的bean与配置文件2中某一个bean的 <code>id相同</code>，则后导入的配置文件中的bean会 <code>覆盖</code> 之前导入的配置文件中的bean，同时它的别名为两者别名的 <code>并集</code>。</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--beans1.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u1,u2,u3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--beans2.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u2,u3,u4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans1.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--合并后该bean在applicationContext.xml中的结果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u1,u2,u3,u4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p>参考文档：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes</a></p><p><code>singleton</code>（单例模式）：每次从容器中get到的都是同一个对象，Spring的默认机制，也可显式设置。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">System.out.println(user==user2); <span class="comment">// 结果为true</span></span><br></pre></td></tr></table></figure><p><code>prototype</code>（原型模式）：每次从容器中get的时候，都会产生一个新对象。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">System.out.println(user.hashCode());</span><br><span class="line">System.out.println(user2.hashCode());</span><br><span class="line">System.out.println(user==user2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果</span></span><br><span class="line"><span class="comment">2074185499</span></span><br><span class="line"><span class="comment">797925218</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>其余的request、session、application、websocket，这些只能在web开发中使用。</p></blockquote><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证导入了 <code>aop</code> 的包。</p><img src="image-20220922222210070.png" alt="image-20220922222210070"/><p>使用注解需要导入 <code>context约束</code>，增加注解的支持。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bean的自动装配"><a href="#bean的自动装配" class="headerlink" title="bean的自动装配"></a>bean的自动装配</h3><p>使用 <code>@Component</code> 注解，放在类上，说明这个类被Spring管理了，等价于bean。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// component: 组件</span></span><br><span class="line"><span class="comment">// 等价于 &lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 此时id就是类名小写</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">System.out.println(user.name);</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用@Component注解需要导入约束：<code>&lt;context:component-scan base-package=&quot;com.pojo&quot;/&gt;</code></p></blockquote><h3 id="属性的自动装配"><a href="#属性的自动装配" class="headerlink" title="属性的自动装配"></a>属性的自动装配</h3><p>除之前介绍的方法外，还可以使用 <code>@Value</code> 注解，实现属性的注入。可以放在属性上（此时可以 <code>省略</code> set方法），也可以放在set方法上。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123; </span><br><span class="line">    <span class="comment">// 相当于 &lt;property name=&quot;name&quot; value=&quot;张三&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Value(&quot;张三&quot;)</span></span><br><span class="line"><span class="comment">    public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment">        this.name = name;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Component的衍生注解"><a href="#Component的衍生注解" class="headerlink" title="@Component的衍生注解"></a>@Component的衍生注解</h3><p>在web开发中按照MVC三层架构分层，对应的注解为：</p><ul><li>dao 【<code>@Repository</code>】</li><li>service  【<code>@Service</code>】</li><li>controller  【<code>@Controller</code>】</li></ul><p>这三个注解以及@Component的功能都是一样的，都代表将某个类注册到Spring容器中，即装配bean。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li><code>singleton</code>：默认的，Spring会采用单例模式创建这个对象。关闭工厂，所有的对象都会销毁。</li><li><code>prototype</code>：多例模式。关闭工厂，所有的对象不会销毁。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="comment">// @Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：若要使用@Scope注解，此时的bean需要使用 <code>@Component</code> 注解来配置。若用xml来配置bean，@Scope无法生效。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>xml与注解</p><ul><li>xml：更加万能，适用于任何场合，维护简单方便。</li><li>注解：维护相对复杂。</li></ul><p>xml与注解配合使用：xml用来管理bean，注解只负责完成属性的注入。</p><p>注解与约束的对应关系</p><ul><li>@Autowired和@Resource——<code>&lt;context:annotation-config/&gt;</code></li><li>@Component——<code>&lt;context:component-scan base-package=&quot;com.pojo&quot;/&gt;</code></li><li>@Value——<code>&lt;context:component-scan base-package=&quot;com.pojo&quot;/&gt;</code> 或 <code>&lt;context:annotation-config/&gt;</code></li><li>@Scope——<code>&lt;context:component-scan base-package=&quot;com.pojo&quot;/&gt;</code></li></ul><h2 id="IOC小结"><a href="#IOC小结" class="headerlink" title="IOC小结"></a>IOC小结</h2><p>bean的创建方式：</p><ul><li>无参构造</li><li>有参构造</li><li>@Compenent——需要导入扫描组件的约束</li></ul><p>属性装配方式：</p><ul><li>构造器——对应有参构造</li><li>set注入——对应无参构造和set方法</li><li>P、C命名空间——需要导入对应命名空间的约束</li><li>隐式装配：byName、byType、@Autowired、@Resource——后两个需要开启注解支持</li><li>@Value——要么导入扫描组件的约束、要么开启注解驱动</li></ul><h2 id="Java方式配置Spring"><a href="#Java方式配置Spring" class="headerlink" title="Java方式配置Spring"></a>Java方式配置Spring</h2><p>完全不使用Spring的xml配置，全权交给Java。</p><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="comment">// 使用这种java方式进行配置时，可以不导入@Value所需约束</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 使该类成为配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"><span class="comment">// 注册一个bean，此时bean中的id属性值即为方法名，即user，class属性值即为返回值类型</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="comment">// 原型模式</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用java进行Spring配置，使用AnnotationConfigApplicationContext来获取上下文，参数为配置类</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure><p>存在多个配置类时，也可以通过 <code>@Import</code> 注解导入合并其他配置类，类似于配置文件中的 import 标签。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(MyConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig1</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式分为：<code>静态代理</code> 和 <code>动态代理</code>，其中AOP的底层机制就是动态代理。</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>角色分析</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决。</li><li>真实角色：被代理的角色。</li><li>代理角色：代理真色角色，代理真实角色后，一般会做一些附属操作，例如收中介费。</li><li>客户：访问代理角色的人。</li></ul><p>代码实现</p><p>抽象角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 房屋出租</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东有房子准备出租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        host.rent();</span><br><span class="line">        contract();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contract</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租赁合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户，访问代理角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：在这个过程中，客户直接接触的就是中介，就如同现实生活中的样子，客户看不到房东，但是通过中介代理租到了房东的房子，这就是所谓的代理模式。可以 <code>在不改变原来的代码的情况下，实现了对原有功能的增强</code>。</p><p>优点：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务。</li><li>公共业务交给代理角色，实现了业务的分工。</li><li>公共业务发生扩展的时候，方便集中管理。</li></ul><p>缺点：一个真实角色就需要一个代理角色，代码量大。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理和静态代理的角色相同，即：抽象角色、真实角色、代理角色、客户。区别之处在于动态代理的 <code>代理类</code>（代理角色）是 <code>动态生成</code> 的，不是直接写好的。</p><p>动态代理分为：基于 <code>接口</code> 的动态代理、基于 <code>类</code> 的动态代理，实现方法有：</p><ul><li>基于接口 —— JDK动态代理</li><li>基于类 —— cglib</li><li>java字节码实现 —— javasist</li></ul><p>JDK动态代理的核心：Proxy【代理】、InvocationHandler【调用处理程序】</p><p>优点：</p><ul><li>涵盖静态代理的优点。</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务。因此一个动态代理类可以代理多个类，只需这些类实现了同一个接口。</li></ul><p>抽象角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 房屋出租</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东有房子准备出租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理类（通用版）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成得到代理类</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 第一个参数：类加载器第二个参数：代理类实现的接口列表</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理代理实例上的方法调用并返回结果</span></span><br><span class="line">    <span class="comment">// proxy：代理类method：代理类的调用处理程序的方法对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 动态代理的本质，就是使用反射机制实现</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="comment">// 调用附属方法</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编写附属方法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 真实角色</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="comment">// 代理角色</span></span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">pih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">        <span class="comment">// 设置要代理的对象</span></span><br><span class="line">        pih.setTarget(host);</span><br><span class="line">        <span class="comment">// 动态生成代理类</span></span><br><span class="line">        <span class="type">Rent</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rent) pih.getProxy();</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP（Aspect Oriented Programming），面向切面编程。可在不影响原来业务类的情况下，实现动态的增强。</p><p>作用：提供声明式事务；允许用户自定义切面。</p><p>相关名词：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能，即与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点，如日志、安全、缓存、事务等等。</li><li>切面（Aspect）：横切关注点被模块化的特殊对象，即它是一个类。</li><li>通知（Advice）：切面必须要完成的工作，即它是类中的一个方法。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知执行的“地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><img src="image-20220924102955138.png" alt="image-20220924102955138" style="zoom:70%;" /><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice：</p><table><thead><tr><th>通知类型</th><th>连接点</th><th>实现接口</th></tr></thead><tbody><tr><td>前置通知</td><td>方法前</td><td>org.springframework.aop.MethodBeforeAdvice</td></tr><tr><td>后置通知</td><td>方法后</td><td>org.springframework.aop.AfterReturningAdvice</td></tr><tr><td>环绕通知</td><td>方法前后</td><td>org.aopalliance.intercept.MethodInterceptor</td></tr><tr><td>异常抛出通知</td><td>方法抛出异常</td><td>org.springfarmework.aop.ThrowsAdvice</td></tr><tr><td>引介通知</td><td>类中增加新的方法属性</td><td>org.springframework.aop.IntroductionInterceptor</td></tr></tbody></table><p>Spring实现AOP织入，需要先导入一个依赖，且有以下几种方式</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式一：使用Spring的API接口</p><p>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前置通知</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        method: 要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">        args: 参数</span></span><br><span class="line"><span class="comment">        target: 目标对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置通知</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// returnValue: 方法执行后的返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span> + method.getName() + <span class="string">&quot;方法，返回结果为&quot;</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring的XML配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一：使用原生的SpringAPI接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP：需要导入AOP的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--expression：切入点表达式，指定要执行的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行增强--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>切入点表达式：execution( [权限修饰符] 返回值类型 包名.类名.方法名(参数列表))</p><p>修饰符可以省略。返回值类型可以指定，也可以使用*，表示任意类型。</p><p>​方法切入点：</p><p>​* *(..)：所有包中所有类的所有方法</p><p>​* login(..)</p><p>​* login(String, String)</p><p>​* login(String, ..)</p><p>​* register(com.*.*.User)：参数为自定义对象时需要使用类的全类名</p><p>​类切入点：</p><p>​* *..UserServiceImpl.*(..)：所有包中的USerServiceImple类内部的所有方法</p><p>​* *.UserServiceImpl.*(..)：一级包中的USerServiceImple类内部的所有方法</p><p>​* *..UserServiceImpl.login(..)：所有包中的USerServiceImple类中的login方法</p><p>​包切入点：</p><p>​* com.baizhi..*.*(..)：com.baizhi包下及其子包中所有类中的所有方法</p><p>​* com.baizhi.*.*(..)：com.baizhi包下所有类中的所有方法</p><p>​* *..*.*(..)：所有包中所有类的所有方法</p></blockquote><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 动态代理代理的是接口</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userServiceImpl</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userServiceImpl&quot;</span>, UserService.class);</span><br><span class="line">        userServiceImpl.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">com.service.UserServiceImpl的add被执行了</span></span><br><span class="line"><span class="comment">增加了一个用户</span></span><br><span class="line"><span class="comment">执行了add方法，返回结果为null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>动态代理代理的是接口，因此context.getbean()返回的是接口类型。</p></blockquote><p>方式二：使用自定义类来实现AOP【主要是切面定义】</p><p>接口和实现类不变，定义切面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">diyPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====方法执行前=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====方法执行后=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring的XML配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式二：自定义类--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.diy.diyPointCut&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义切面，ref：要引用的类(切面)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通知，即什么时候执行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类不变，结果示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=====方法执行前=====</span><br><span class="line">增加了一个用户</span><br><span class="line">=====方法执行后=====</span><br></pre></td></tr></table></figure><p>方式三：使用注解实现AOP</p><p>接口和实现类不变，定义切面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// 标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> String str=<span class="string">&quot;execution(* com.service.UserServiceImpl.*(..))&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====方法执行前=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(str)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====方法执行后=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="comment">// 在环绕增强中，可以给定一个参数，用以获取切入点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行前&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring的XML配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式三：使用注解实现AOP--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持，为容器中配置@Aspect切面的bean创建代理，织入切面。--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">默认是JDK动态代理(即proxy-target-class=&quot;false&quot;)，可修改为cglib(proxy-target-class=&quot;true&quot;)。两者方式不同，结果相同</span></span><br><span class="line"><span class="comment">        基于接口: JDK动态代理</span></span><br><span class="line"><span class="comment">        基于类: cglib</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;aop:aspectj-autoproxy proxy-target-class=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类不变，结果示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">执行前</span><br><span class="line">=====方法执行前=====</span><br><span class="line">增加了一个用户</span><br><span class="line">=====方法执行后=====</span><br><span class="line">执行后</span><br></pre></td></tr></table></figure><h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><p>依赖：mybatis、mybatis-spring、mysql、spring、spring-jdbc、AOP织入、junit、lombok</p><p>数据源配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--DataSource: 使用Spring的数据源替换Mybatis的配置，这里使用Spring提供的jdbc，需要导入Spring-jdbc依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?userUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sqlSessionFactory</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定Mybatis配置文件，可以省略--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当mapper映射写在mybatis-config.xml中时，此处需要绑定MyBatis的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--当mapper.xml被省略时，即使用注解开发，此时不能在此配置mapper映射，因为不存在xml文件。此时只能在mapper-config中配置，并在此处绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sqlSessionTemplate</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sqlSessionTemplate: 使用的sqlSession--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只能使用构造器注入sqlSessionFactory，因为它没有set方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这种方式，需要编写接口的实现类，例如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有操作原来都是用sqlSession来执行，现在都使用SqlSessionTemplate</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring中注入实现类，同时引用之前的配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">List&lt;User&gt; userList = userMapper.select();</span><br><span class="line"><span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种方式，省略SqlSessionTemplate，使用SqlSessionDaoSupport</p><p>接口的实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImplTwo</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span></span><br><span class="line"><span class="comment">        return mapper.select();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring中注入实现类，同时引用Mybatis的配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--applicationContext.xml--&gt;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="keyword">import</span> resource=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;userMapper2&quot;</span> class=<span class="string">&quot;com.mapper.UserMapperImplTwo&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;sqlSessionFactory&quot;</span> ref=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：可以不编写接口对应的实现类，参考SpringMVC中SSM整合。</p></blockquote><p>java注解实现</p><p>实体类和接口不变，使用注解来指定sql。</p><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 配置数据源</span></span><br><span class="line">    <span class="keyword">public</span> DriverManagerDataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 配置SqlSessionFactory</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 将Mapper接口加入Spring中，MapperFactoryBean将会负责SqlSession的创建和关闭。</span></span><br><span class="line">    <span class="keyword">public</span> MapperFactoryBean <span class="title function_">userMapper</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MapperFactoryBean</span> <span class="variable">mapperFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperFactoryBean</span>();</span><br><span class="line">        mapperFactoryBean.setMapperInterface(com.mapper.UserMapper.class);</span><br><span class="line">        mapperFactoryBean.setSqlSessionFactory(sqlSessionFactory());</span><br><span class="line">        <span class="keyword">return</span> mapperFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">List&lt;User&gt; list = mapper.select();</span><br><span class="line"><span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>一组事务要么都成功，要么都失败，其在项目开发中十分重要，涉及到数据的一致性问题，因此要确保其完整性和一致性。</p><p>事务的ACID原则：原子性、一致性、隔离性、持久性。</p><p>Spring支持编程式事务管理和声明式事务管理。</p><ul><li><p>编程式事务管理</p><ul><li><p>将事务管理代码嵌到业务方法中来控制事务的提交和回滚。</p></li><li><p>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码。</p></li></ul></li><li><p>声明式事务管理</p><ul><li><p>一般情况下比编程式事务好用。</p></li><li><p>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</p></li><li><p>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过AOP支持声明式事务管理。</p></li></ul></li></ul><p>声明式事务：简单来说，就是用于控制事务的提交和回滚，可通过AOP实现。</p><p>spring配置：配置事务管理器、配置事务通知、配置aop</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;constructor-arg ref=&quot;dataSource&quot; /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给哪些方法配置事务，可针对某一方法，也可针对所有方法--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务的传播特性：propagation，不配置时默认为REQUIRED，表示支持事务，此时针对所有方法进行配置即可--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;tx:method name=&quot;update&quot; propagation=&quot;REQUIRED&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;delete&quot; propagation=&quot;REQUIRED&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;select&quot; read-only=&quot;true&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;insert&quot; propagation=&quot;REQUIRED&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结合AOP实现事务的织入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;teAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用声明式事务时需要导入tx约束以及AOP约束。</p></blockquote><p>spring事务传播特性：事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</p><ul><li>propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。</li></ul><p>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。</p><p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1() -&gt; Service2#method2() -&gt; Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p><p>声明式事务示例：</p><p>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from User&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(name,sex,age) values(#&#123;name&#125;,#&#123;sex&#125;,#&#123;age&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;deletes from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;丽丽&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        mapper.insert(user);</span><br><span class="line">        mapper.delete(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mapper.select();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        getSqlSession().getMapper(UserMapper.class).insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        getSqlSession().getMapper(UserMapper.class).delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">List&lt;User&gt; list = mapper.select();</span><br><span class="line"><span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于sql语句中的删除语句存在问题，在不进行事务处理时能成功插入，但删除异常，导致未能删除，造成数据不一致。而通过声明式事务可让其在出现异常后回滚，保证数据的一致性。</p></blockquote><p>思考：为什么需要事务？</p><ul><li>如果不配置事务，可能存在数据提交不一致的情况。</li><li>如果不在Spring中配置声明式事务，就需要在代码中手动配置事务。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2022/09/20/AJAX/"/>
      <url>/2022/09/20/AJAX/</url>
      
        <content type="html"><![CDATA[<p>Ajax &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML），其最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</p><h2 id="JS实现"><a href="#JS实现" class="headerlink" title="JS实现"></a>JS实现</h2><h3 id="创建XHR对象"><a href="#创建XHR对象" class="headerlink" title="创建XHR对象"></a>创建XHR对象</h3><p>Ajax的核心是<code>XMLHttpRequest</code>（XHR）对象，其是一个javascript对象，为向服务器发送请求和解析服务器响应提供了接口，能够以<code>异步方式</code>从服务器获取新数据。</p><p>语法：<code>xmlhttp = new XMLHttpRequest();</code></p><blockquote><p>老版本的 Internet Explorer（IE5和IE6）使用 <code>ActiveX</code> 对象。为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveX 对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xmlhttp</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span><br><span class="line">       <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">       xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">       <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">       xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h3><p>发送请求使用XHR对象的<code>open()</code>和<code>send()</code>方法。</p><ol><li><p>open(method, url, async)：规定请求的类型、URL以及是否异步处理请求。</p><ul><li>metod：请求的类型，Get或Post；</li><li>url：文件在服务器上的位置，该文件可以是任何类型的文件，例如.txt或.xml；</li><li>async：true（异步）或false（同步）。</li></ul><blockquote><p>请求txt文件可直接得到文本内容。<br>对于不同类型的文件，处理方式不同，例如访问xml，返回的响应数据就需要进行解析。</p></blockquote></li><li><p>send(string)：将请求发送到服务器，其中string为POST请求携带的数据。</p><p>使用Get还是Post：与Post相比，Get更简单也更快，并且在大部分情况下都能用。然而，在以下情况中，请使用Post请求：</p><ul><li>不愿使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（Post请求没有数据量限制）</li><li>发送包含未知字符的用户输入时，Post比Get更稳定也更可靠</li></ul></li><li><p>GET请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的get请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/demo_get.php&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上面的例子中，得到的是缓存的结果。为了避免这种情况，给URL添加一个唯一的ID</span></span><br><span class="line">xmhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/demo_get.php?t=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>(), <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带数据的get请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/demo_get2.php?fname=Henry&amp;lname=Ford&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure></li><li><p>Post请求示例：需要传递数据时，使用 <code>setRequestHeader()</code> 来添加 <code>HTTP头</code>，然后在send()方法中传递要发送的数据。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单post请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/demo_post.php&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带数据的post请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/demo_post2.php&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>(<span class="string">&quot;fname=Henry&amp;lname=Ford&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>setRequestHeader(header,value)：用于给请求添加HTTP头，Post请求携带数据时必须使用。其中header规定头的名称；value规定头的值。</p></blockquote></li></ol><h3 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h3><p>对于来自服务器的响应，可以使用XHR对象的<code>responseText</code>或<code>responseXML</code>属性，其中responseText用来获得字符串形式的响应数据，responseXML用来获得XML形式的响应数据。</p><p>当请求被发送到服务器时，需要执行一些基于响应的任务。<code>readyState</code>属性存有XHR的状态信息，每当readyState改变时，就会触发<code>onreadystatechange</code>事件。</p><ul><li>0：请求未初始化（还没有调用 open()）。</li><li>1：请求已经建立，但是还没有发送（还没有调用 send()）。</li><li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li><li>3：请求在处理中，通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li><li>4：响应已完成，可以获取并使用服务器的响应了。</li></ul><p>在onreadystatechange事件中，规定当服务器响应已做好被处理的准备时所执行的任务。当readyState等于4且状态为200时，表示<code>响应已就绪</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>onreadystatechange 事件被触发4次，分别是：0-1、1-2、2-3、3-4，对应着readyState的每个变化。</p><p>status存在两种状态：200表示成功、404表示失败。</p></blockquote><h3 id="整合示例"><a href="#整合示例" class="headerlink" title="整合示例"></a>整合示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uname&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;login()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        username = $(<span class="string">&quot;#uname&quot;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        password = $(<span class="string">&quot;#pwd&quot;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        url = <span class="string">&quot;/login?username=&quot;</span> + username + <span class="string">&quot;&amp;password=&quot;</span> + password</span></span><br><span class="line"><span class="language-javascript">        xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>异步 - True 或 False</p><p>XHR对象如果要用于Ajax的话，其open()方法的<code>async</code>参数必须设置为<code>true</code>。通过Ajax，JavaScript无需等待服务器的响应，而是在等待服务器响应时执行其他脚本，当响应就绪后对响应进行处理。</p><p>当<code>async=true</code>时，需要规定在响应处于onreadystatechange事件中的<code>就绪状态</code>时执行的函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>)</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax_info.txt&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><p>当<code>async=false</code>，JavaScript会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。注意：此时不需要onreadystatechang函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax_info.txt&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>)</span><br></pre></td></tr></table></figure><h2 id="jQuery实现"><a href="#jQuery实现" class="headerlink" title="jQuery实现"></a>jQuery实现</h2><p>jQuery提供多个与Ajax有关的方法，通过这些方法，能够使用Get或Post从远程服务器上请求文本、HTML、XML或JSON，同时能够把这些外部数据直接载入网页的被选元素中。示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;a1()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">a1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 可直接传递参数：$.post(url, data, success)。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 其中data可省略，例如：$.post(&quot;/a2&quot;, function(data)&#123;&#125;)</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 也可使用$.get()或$.ajax()。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// $.get()、$.post()在内部调用$.ajax()。</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">post</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/url&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 传递数据，键值对形式，逗号分隔</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;<span class="string">&quot;name&quot;</span>: $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>()&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 成功后执行回调函数，此时data为后端返回的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(data)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 失败后执行的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue实现"><a href="#Vue实现" class="headerlink" title="Vue实现"></a>Vue实现</h2><p>Vue中使用<code>axios</code>来完成Ajax请求。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script src=&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>Get请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123; </span><br><span class="line">    <span class="comment">// 请求失败处理</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?id=12345&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 通过params设置参数</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">params</span>: &#123;</span><br><span class="line"><span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Post请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，此方式存在问题，后端接收不到参数，可使用下面两种方式</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,    </span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，能正常接收</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;qs&#x27;</span>)</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, qs.<span class="title function_">stringify</span>(&#123;<span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;)).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种正常接收的方式</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">username</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">password</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">            str += <span class="built_in">encodeURIComponent</span>(key) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[key]) + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>第一种携带数据的post请求在传递参数时存在问题：<code>前端能传递参数，但后端接收不到</code>。</p><p>更多解决<code>post传参问题</code>的方法可参考：<a href="https://blog.csdn.net/lihchweb/article/details/79884134">https://blog.csdn.net/lihchweb/article/details/79884134</a></p></blockquote><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>Vue的异步加载也可以使用<code>vue-resource</code>来完成（2.0后停止维护，推荐使用Axios）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Get请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/url&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;get.php&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;...&#125;)</span><br></pre></td></tr></table></figure><p>Post请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/url&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>&#125;, &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>post请求发送数据到后端，需要第三个参数<code>&#123;emulateJSON:true&#125;</code>。emulateJSON的作用：如果Web服务器无法处理编码为<code>application/json</code>的请求，可以启用emulateJSON选项。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo框架搭建博客</title>
      <link href="/2022/09/15/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/09/15/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>搭建博客前需要安装一些必要软件：<code>Node.js</code>及<code>git</code>，此外还可以安装编写博客的Markdown编译器，例如：Typora。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li><p>建立对应的博客文件夹，例如：<code>F:\学习\Blogroot</code>，该目录将作为博客的根目录。</p></li><li><p>安装Hexo：在博客根目录下右击打开<code>Git Bash Here</code>，输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将npm源替换为阿里的镜像，之后的安装就会迅速很多了</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># hexo-cli是hexo的指令集</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># 有了指令集以后，使用它的初始化指令来初始化安装Hexo博客</span></span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li><p>本地浏览：在博客根目录下右击打开<code>Git Bash Here</code>，输入：<code>hexo server</code>，简写：<code>hexo s</code></p></li><li><p>常用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清空缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 重新编译</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 本地访问</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment"># 新建文章</span></span><br><span class="line">hexo new <span class="string">&quot;文章title&quot;</span></span><br><span class="line"><span class="comment"># 部署到云端</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><h2 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h2><p><strong>添加分类页面</strong></p><p>在博客根目录下右击打开<code>Git Bash Here</code>，输入：<code>hexo new page categories</code>创建分类页面。打开<code>Blogroot\source\categories\index.md</code>，在头部加上<code>type</code>属性：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line"><span class="built_in">date</span>: 2022-09-14 20:42:34</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure><p>给文章添加分类，例如：给<code>Hello-world</code>添加分类，打开<code>Blogroot\source\_posts\Hello-world.md</code>，修改头部：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">categories: 学习笔记</span><br></pre></td></tr></table></figure><p><strong>添加标签页面</strong></p><p>在博客根目录下右击打开<code>Git Bash Here</code>，输入：<code>hexo new page tags</code>创建标签页面。打开<code>Blogroot\source\tags\index.md</code>， 在头部加上<code>type</code>属性：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line"><span class="built_in">date</span>: 2022-09-14 20:43:40</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>给文章添加标签，例如：给<code>hello-world</code>添加标签，打开<code>Blogroot\source\_posts\Hello-world.md</code>，修改头部：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">categories: 学习笔记</span><br><span class="line">tags: [Node.js, Hexo]</span><br></pre></td></tr></table></figure><blockquote><p>注：添加标签的第二种写法——使用<code>-</code>短划线列出来</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">categories: 学习笔记</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">-</span> Node.js # 短划线后有空格</span><br><span class="line"><span class="bullet">-</span> Hexo</span><br></pre></td></tr></table></figure></blockquote><p><strong>添加友情链接页面</strong></p><p>在博客根目录下右击打开<code>Git Bash Here</code>，输入：<code>hexo new page link</code>创建友情链接页面。打开<code>Blogroot\source\link\index.md</code>， 在头部加上<code>type</code>属性：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 友情链接</span><br><span class="line"><span class="built_in">date</span>: 2022-09-14 22:30:33</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;link&quot;</span></span><br></pre></td></tr></table></figure><p>添加友情链接采用本地生成方式。在<code>Blogroot\source\_data</code>（如果没有_data，则创建一个）下创建<code>link.yml</code>文件：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure><blockquote><p>注：<code>class_name</code>和<code>class_desc</code>支持html格式书写，如不需要，也可以留空。</p><p>注：自2.2.0起，友情链接界面可以由用户自定义，只需要在友情链接的md中设置即可，以普通的Markdown格式书写。</p></blockquote><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><strong>主题配置</strong></p><p>博客主题使用<code>Butterfly</code>，可直接参照<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly主题官方文档</a>进行主题配置。</p><p><strong>博客搭建</strong></p><p>Hexo博客搭建参考文档：<a href="https://akilar.top/posts/6ef63e2d/">https://akilar.top/posts/6ef63e2d/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
