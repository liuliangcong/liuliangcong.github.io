<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JWT</title>
      <link href="/2023/04/21/JWT/"/>
      <url>/2023/04/21/JWT/</url>
      
        <content type="html"><![CDATA[<p>JWT（JSON Web Token），一种基于Token的认证授权机制。从JWT的全称可以看出，JWT本身也是Token，一种规范化之后的JSON结构的Token。</p><h2 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h2><p>JWT本质是一组字符串，通过<code>.</code>切分成三个Base64编码的部分，示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.</span><br><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.</span><br><span class="line">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><ol><li><p>Header：JSON格式数据，是描述JWT的元数据，通常由两部分组成</p><ul><li><p>typ（Type）：令牌类型，也就是JWT。</p></li><li><p>alg（Algorithm）：签名算法，例如HS256。</p></li></ul><p>示例</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Payload：JSON格式数据，用来存放实际需要传递的数据，包含了Claims（声明，包含JWT的相关信息）。其中Claims分为三种类型：</p><ul><li>Registered Claims（注册声明）：预定义的一些声明，建议使用，但不是强制的。</li><li>Public Claims（公有声明）：JWT签发方可以自定义的声明，但为了避免冲突，应该在IANA JSON Web Token Registry中定义它们。</li><li>Private Claims（私有声明）：JWT签发方因为项目需要而自定义的声明，更符合实际项目场景使用。</li></ul><p>下面是一些常见的注册声明：</p><blockquote><ul><li><code>iss</code>（issuer）：JWT签发方。</li><li><code>iat</code>（issued at time）：JWT签发时间。</li><li><code>sub</code>（subject）：JWT主题。</li><li><code>aud</code>（audience）：JWT接收方。</li><li><code>exp</code>（expiration time）：JWT的过期时间。</li><li><code>nbf</code>（not before time）：JWT生效时间，早于该定义的时间的JWT不能被接受处理。</li><li><code>jti</code>（JWT ID）：JWT唯一标识。</li></ul></blockquote><p>示例</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ff1212f5-d8d1-4496-bf41-d2dda73de19a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">15323232</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;admin&quot;</span><span class="punctuation">,</span> <span class="string">&quot;user&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><em>注意：Payload部分默认是不加密的，一定不要将隐私信息存放在Payload当中。</em></p></li><li><p>Signature（签名）：服务器通过Header、PayLoad和一个密钥（Secret），使用Header里面指定的签名算法（默认是HMAC SHA256）生成，作用是防止JWT（主要是Payload）被篡改。</p><p>签名的计算公式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">    base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">    base64UrlEncode(payload),</span><br><span class="line">    secreta</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>计算出签名后，把Header、Payload、Signature三个部分拼成一个字符串，每个部分之间用<code>.</code>分隔，这个字符串就是JWT。</p><p><em>注：可以在<a href="http://jwt.io">jwt.io</a>这个网站上对JWT进行解码，解码之后得到的就是Header、Payload、Signature这三部分。</em></p><img src="image-20230421093231641.png" alt="image-20230421093231641"/></li></ol><h2 id="基于JWT进行身份认证"><a href="#基于JWT进行身份认证" class="headerlink" title="基于JWT进行身份认证"></a>基于JWT进行身份认证</h2><p>在基于JWT进行身份验证的的应用程序中，服务器通过Payload、Header和Secret（密钥）创建JWT并将JWT发送给客户端。客户端接收到JWT之后，会将其保存在Cookie或者localStorage里面，以后客户端发出的所有请求都会携带这个令牌。</p><p>步骤如下：</p><ol><li>用户向服务器发送用户名、密码以及验证码用于登陆系统。</li><li>如果用户用户名、密码以及验证码校验正确的话，服务端会返回已经签名的Token，也就是JWT。</li><li>用户以后每次向后端发请求都在Header中带上这个JWT。</li><li>服务端检查JWT并从中获取用户相关信息。</li></ol><p>两点建议：</p><ol><li>建议将JWT存放在<code>localStorage</code>中，放在Cookie中会有<code>CSRF</code>（跨站请求伪造攻击）风险。</li><li>请求服务端并携带JWT的常见做法是将其放在HTTP Header的<code>Authorization</code>字段中（Authorization: Bearer Token）。</li></ol><h2 id="防止JWT被篡改"><a href="#防止JWT被篡改" class="headerlink" title="防止JWT被篡改"></a>防止JWT被篡改</h2><p>有了签名之后，即使JWT被泄露或者截获，黑客也没办法同时篡改Signature 、Header 、Payload。</p><p>这是因为服务端拿到JWT之后，会解析出其中包含的Header、Payload以及Signature 。服务端会根据Header、Payload、密钥再次生成一个Signature。拿新生成的Signature和JWT中的Signature作对比，如果一样就说明Header和Payload没有被修改。不过，如果服务端的秘钥也被泄露的话，黑客就可以同时篡改Signature、Header、Payload了。黑客直接修改了Header和Payload之后，再重新生成一个Signature就可以了。</p><p>因此密钥一定保管好，一定不要泄露出去。<strong>JWT安全的核心在于签名，签名安全的核心在密钥。</strong></p><h2 id="加强JWT的安全性"><a href="#加强JWT的安全性" class="headerlink" title="加强JWT的安全性"></a>加强JWT的安全性</h2><ol><li>JWT存放在localStorage中而不是Cookie中，避免CSRF风险。</li><li>一定不要将隐私信息存放在Payload当中。</li><li>密钥一定保管好，一定不要泄露出去。JWT安全的核心在于签名，签名安全的核心在密钥。</li><li>Payload要加入<code>exp</code>（JWT的过期时间），永久有效的JWT不合理，并且JWT的过期时间不易过长。</li></ol><h2 id="JWT的使用"><a href="#JWT的使用" class="headerlink" title="JWT的使用"></a>JWT的使用</h2><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>生成Token</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    <span class="comment">// 200秒后令牌token失效</span></span><br><span class="line">    instance.add(Calendar.SECOND, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line">        .withHeader(map) <span class="comment">// 可省略，即使用默认值</span></span><br><span class="line">        .withClaim(<span class="string">&quot;userId&quot;</span>, <span class="number">1</span>)  <span class="comment">// Payload</span></span><br><span class="line">        .withClaim(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;ZhangSan&quot;</span>)</span><br><span class="line">        .withExpiresAt(instance.getTime()) <span class="comment">// 指定令牌的过期时间</span></span><br><span class="line">        .sign(Algorithm.HMAC256(<span class="string">&quot;test&quot;</span>)); <span class="comment">// 签名</span></span><br><span class="line">    System.out.println(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2ODIwNTEzOTEsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJaaGFuZ1NhbiJ9.7vJpX6Kcm9n_qzjwqcySgupaZ8cokCx0EJo5dY1NYQI</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>根据令牌和签名解析数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 通过签名生成验证对象</span></span><br><span class="line">    <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(<span class="string">&quot;test&quot;</span>)).build();</span><br><span class="line"></span><br><span class="line">    <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> jwtVerifier.verify(<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2ODIwNTExOTIsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJaaGFuZ1NhbiJ9.tAw61sIaqzwydziGAj8SBQdTwTCjgQyHcjpdTRbVXg8&quot;</span>);</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;userId&quot;</span>));</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;令牌过期时间：&quot;</span> + verify.getExpiresAt());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">&quot;ZhangSan&quot;</span></span><br><span class="line"><span class="comment">令牌过期时间：Fri Apr 21 12:29:51 CST 2023</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>常见异常信息</p><ul><li>签名不一致异常：SignatureVerificationException</li><li>令牌过期异常：TokenExpiredException</li><li>算法不匹配异常：AlgorithmMismatchException</li><li>失效的payload异常（传给客户端后，token被改动，验证不一致）：InvalidClaimException</li></ul></li><li><p>封装JWT</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SING</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 7天过期</span></span><br><span class="line">        instance.add(Calendar.DATE, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建jwt builder</span></span><br><span class="line">        JWTCreator.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> JWT.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Payload</span></span><br><span class="line">        map.forEach((k, v) -&gt; &#123;</span><br><span class="line">            builder.withClaim(k, v);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> builder.withExpiresAt(instance.getTime())  <span class="comment">// 指定令牌过期时间</span></span><br><span class="line">                .sign(Algorithm.HMAC256(SING));  <span class="comment">// 签名</span></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证token合法性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">verify</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取token信息方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">getTokenInfo</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class="line">        <span class="keyword">return</span> verify;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="SpringBoot整合JWT"><a href="#SpringBoot整合JWT" class="headerlink" title="SpringBoot整合JWT"></a>SpringBoot整合JWT</h2><ol><li><p>登录验证</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.selectByUsernameAndPassword(username, password);</span><br><span class="line">        Map&lt;String, String&gt; payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        payload.put(<span class="string">&quot;id&quot;</span>, String.valueOf(user.getId()));</span><br><span class="line">        payload.put(<span class="string">&quot;username&quot;</span>, user.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtils.getToken(payload);</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;认证成功！&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>, token);  <span class="comment">// 响应token</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用postman测试工具测试是否查询到数据库中的数据</p><img src="image-20230421213219484.png" alt="image-20230421213219484"/></li><li><p>验证Token</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">test</span><span class="params">(String token)</span>&#123;</span><br><span class="line">    System.out.println(token);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 验证令牌</span></span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> JWTUtils.verify(token);</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效签名&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (TokenExpiredException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;token过期&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;算法不一致&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;token无效&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="image-20230421213357679.png" alt="image-20230421213357679"/></li><li><p>整合拦截器</p><p>创建拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取请求头中的令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 验证令牌</span></span><br><span class="line">            JWTUtils.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 放行请求</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效签名&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (TokenExpiredException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;token过期&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;算法不一致&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;token无效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);  <span class="comment">// 设置状态</span></span><br><span class="line">        <span class="comment">// 将map以json的形式响应到前台 map --&gt; json (jackson)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(json);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置拦截器规则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">JWTInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/test&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改业务逻辑代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">test</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 由拦截器进行令牌验证，这里只需要处理业务逻辑</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> JWTUtils.verify(token);</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证请求头携带的Token</p><img src="image-20230421215730702.png" alt="image-20230421215730702"/></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2023/01/31/Vue/"/>
      <url>/2023/01/31/Vue/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ul><li><p>前后分离的开发思想主要是基于<code>SOC原则（关注度分离原则）</code> 。</p></li><li><p>CSS预处理器</p><p>CSS层叠样式表是一门标记语言，并不是编程语言，因此不可以自定义变量，不可以引用等，即不具备任何语法支持，主要缺陷如下：</p><ol><li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器。</li><li>没有变量及合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li></ol><p>这就导致增加了工作量。为了解决该问题，可以使用<code>CSS预处理器</code>，其提供了CSS缺失的样式复用机制，减少冗余代码，提高样式代码的可维护性及前端在样式上开发的效率。</p><p>CSS预处理器用一种专门的编程语言，用于进行Web页面样式设计，再通过编译器转换为正常的CSS文件，以供项目使用。常见的有SASS、LESS。</p><blockquote><p><em>LESS：<a href="https://less.bootcss.com/#%E6%A6%82%E8%A7%88">https://less.bootcss.com/#%E6%A6%82%E8%A7%88</a></em></p></blockquote></li><li><p>JavaScript框架</p><ol><li>jQuery：优点是简化了DOM操作，缺点是DOM操作太频繁，影响前端性能。</li><li>Angular：特点是将后台的MVC模式搬到了前端并增加了<code>模块化开发</code>的理念，采用TypeScript语法开发。</li><li>React：特点是提出了<code>虚拟DOM</code>的概念，用于减少真实DOM操作。在内存中模拟DOM操作，有效的提升了前端渲染效率。缺点是使用复杂，需要学习<code>JSX</code>语言。</li><li>Vue：一款渐进式JavaScript框架。所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular（模块化）和React（虚拟DOM）的优点。</li></ol></li><li><p>MV*模式</p><ol><li>MVC（同步通信为主）：Model、View、Controller</li><li>MVP（异步通信为主）：Model、View、Presenter</li><li>MVVM（异步通信为主）：Model、View、ViewModel</li></ol></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>Vue.js是一套构建用户界面的渐进式框架，其只关注<code>视图层</code>，采用自底向上增量开发的设计。核心：数据驱动、组件化。</p></li><li><p>Vue采用MVVM模式，实现了DOM监听及数据绑定。</p><p>MVVM源自于经典的MVC模式，其核心是ViewModel层，负责转换Model中的数据对象来让数据变得更容易管理和使用，作用：向上与视图层进行双向数据绑定，向下与Model层通过接口请求进行数据交互。</p><img src="image-20221101092241056.png" alt="image-20221101092241056"/><ol><li>Model：模型层；View：视图层；ViewModel：连接视图和数据的中间件。</li><li>在MVVM架构中，不允许数据和视图直接通信，只能通过ViewModel来通信。ViewModel能够观察到数据的变化，并对视图相应的内容进行更新；能够监听到视图的变化，通知数据发生改变。</li></ol></li><li><p>CDN引用</p><blockquote><p><em>Staticfile CDN：<a href="https://cdn.staticfile.org/vue/2.2.2/vue.min.js">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a></em></p><p><em>unpkg：<a href="https://unpkg.com/vue@2.6.14/dist/vue.min.js">https://unpkg.com/vue@2.6.14/dist/vue.min.js</a></em></p><p><em>cdnjs：<a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a></em></p></blockquote></li></ul><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li><p>每个Vue应用都需要通过实例化Vue来实现，其内部有以下几个参数：</p><ol><li>el：绑定DOM元素的id，即接下来的改动全部在指定的元素内，元素外部不受影响；</li><li>data： 用于定义属性，定义在大括号内；</li><li>methods： 用于定义函数，可通过 return 来返回函数值。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;&#125;&#125;用于输出对象属性或函数返回值<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>site:&#123;&#123;site&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">site</span>: <span class="string">&quot;测试&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">details</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span>  <span class="variable language_">this</span>.<span class="property">site</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>当一个Vue实例被创建时，它向Vue的响应式系统中加入了其data对象中能找到的所有的属性。当这些属性的值发生改变时，html视图将也会产生相应的变化。</p></li><li><p>在js中可以直接访问Vue的数据属性，也可以将js对象赋值给Vue中的属性，此时修改对应的属性会相互影响。</p></li><li><p>除了数据属性，Vue 实例还提供了一些有用的实例属性与方法，它们都有前缀<code>$</code>，以便与用户定义的属性区分开来。例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#vue_det&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">site</span>: <span class="string">&quot;测试&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(vm.<span class="property">$data</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(vm.<span class="property">$el</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>Vue的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进DOM系统。</p><ul><li><p>文本插值：数据绑定最常见的形式就是使用<code>&#123;&#123;...&#125;&#125;</code>的文本插值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>v-html</code>指令用于输出html代码，使用<code>v-text</code>输出纯文本。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">message</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;&lt;h1&gt;v-html&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>v-bind</code>设置标签属性值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px; background-color: #B2D1FF;&quot;</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;&#x27;border&#x27;: message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&quot;1px solid red&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作用于类上，当属性值为true时，添加该类名，否则不添加。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;&#x27;class1&#x27;: use&#125;&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">use</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>支持缩写：<code>:属性名</code>，例如：<code>v-bind:href=&quot;url&quot; =&gt; :href=&quot;url&quot;</code>。</em></p></blockquote></li><li><p>表达式：Vue提供了完全的JavaScript表达式支持。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;5+5&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; message.split(&#x27;.&#x27;)&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">ok</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;abc.abc&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            id : <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表达式会在所属Vue实例的数据作用域下作为JavaScript被解析。需要注意的是，每个绑定都只能包含<code>单个表达式</code>，所以下面的例子都不会生效。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>过滤器：Vue允许用户自定义过滤器，被用作一些常见的文本格式化（即输出前先对文本其进行格式化），由管道符<code>|</code>指示。过滤器函数接受表达式的值作为第一个参数。以下实例对输入的字符串第一个字母转为大写：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;runoob&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">capitalize</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                value = value.<span class="title function_">toString</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>*在 v-bind 指令中使用过滤器实例：<code>&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</code>*。</p><p><em>过滤器串联：<code>&#123;&#123; message | filterA | filterB &#125;&#125;</code></em></p><p><em>过滤器是 JavaScript 函数，因此可以接受参数：<code>&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</code>。此时message是第一个参数，字符串’arg1’是第二个参数， arg2表达式的值将被求值然后传给过滤器作为第三个参数。</em></p></blockquote></li></ul><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul><li><p>条件判断：使用<code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>指令，根据表达式的值（true或false）来决定渲染哪个元素。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Not A/B/C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;C&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>显示与隐藏：使用<code>v-show</code>指令根据表达式的值来切换元素的<code>display</code>属性，即true时显示，false时隐藏，隐藏时display的值为none。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">ok</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>循环使用<code>v-for</code>指令，语法：<code>v-for=&quot;site in sites&quot;</code>， 其中：sites是源数据数组，site是数组元素迭代的别名。</p><ul><li><p>迭代数组</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;site in sites&quot;</span>&gt;</span>&#123;&#123; site.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sites</span>: [</span></span><br><span class="line"><span class="language-javascript">&#123; <span class="attr">name</span>: <span class="string">&#x27;python&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">&#123; <span class="attr">name</span>: <span class="string">&#x27;java&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>添加第二个参数获取数组下标：<code>v-for=&quot;(item,index) in list&quot;</code></em></p></blockquote></li><li><p>迭代对象（遍历对象属性）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in object&quot;</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">object</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>此时迭代的结果是获取对象的属性值。可提供第二个参数用于获取键，提供第三个参数用于获取索引，即：<code>v-for=&quot;(value, key, index) in object&quot;</code></em></p></blockquote></li><li><p>迭代整数</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出1到10的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h2><p>v-bind可以用来设置class或style，其在处理class和style时，表达式的结果类型除了字符串之外，还可以是对象或数组。</p><ul><li><p>class绑定</p><ol><li><p>绑定数据中的一个对象</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">classObject</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">classObject</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">active</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;text-danger&#x27;</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>若属性中存在下划线<code>_</code>，则属性需要加上””，否则会报错。</em></p></blockquote></li><li><p>绑定计算属性，该计算属性返回值是一个对象</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">classObject</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">classObject</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">base</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定数组</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 可以使用三元表达式来切换列表中的class --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[errorClass, isActive ? activeClass : &#x27;&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">activeClass</span>: <span class="string">&#x27;active&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">errorClass</span>: <span class="string">&#x27;text-danger&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>style绑定（内联样式）</p><ol><li><p>直接设置样式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">activeColor</span>: <span class="string">&#x27;green&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fontSize</span>: <span class="number">30</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定样式对象</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">styleObject</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleObject</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用数组将多个样式对象应用到一个元素上</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">baseStyles</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">overridingStyles</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;font-weight&#x27;</span>: <span class="string">&#x27;bold&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性重点突出在<code>属性</code>二字上（属性是名词）。首先它是一个属性，其次这个属性有计算的能力（计算是动词），这里的计算就是个函数。简单点说，它就是一个能够将计算结果缓存起来的属性，仅此而已，可以想象为缓存。</p><ul><li><p>计算属性关键字：<code>computed</code>，在处理一些复杂逻辑时比较有用。示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用时相当于属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;Runoob!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 计算属性的getter</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">reversedMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>声明了一个计算属性reversedMessage（使用时不能加()），提供的函数将用作属性 vm.reversedMessage的getter。vm.reversedMessage依赖于vm.message，在vm.message发生改变时，vm.reversedMessage也会更新。</p></blockquote></li><li><p>computed vs methods</p><p>可以使用methods来替代computed，效果上两个都是一样的，但是computed是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用methods，在重新渲染的时候，函数总会重新调用执行。可以说使用computed性能会更好，但是如果不希望缓存，可以使用methods。</p><p>与methods对比：调用方法时，每次都需要进行计算，会产生系统开销。如果这个结果是不经常变化的，此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这一点。<code>计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约系统开销。</code></p></li><li><p>computed setter：computed属性默认只有getter，不过在需要时也可以提供一个setter，示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; site &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--调用getter，输出：菜鸟教程 http://www.runoob.com--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;Google&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;http://www.google.com&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">site</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// getter</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">url</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// setter</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> names = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">name</span> = names[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">url</span> = names[names.<span class="property">length</span> - <span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用setter，此时vm.name和vm.url会被更新</span></span></span><br><span class="line"><span class="language-javascript">    vm.<span class="property">site</span> = <span class="string">&#x27;菜鸟教程 http://www.runoob.com&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;name: &#x27;</span> + vm.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;url: &#x27;</span> + vm.<span class="property">url</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h2><p>监听属性<code>watch</code>，可以通过该属性来响应数据的变化。示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>计数器: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;counter++&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">counter</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $watch 是一个实例方法</span></span></span><br><span class="line"><span class="language-javascript">    vm.$watch(<span class="string">&#x27;counter&#x27;</span>, <span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当vm.counter发生改变时会调用该函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(oldVal + <span class="string">&quot;-&gt;&quot;</span> + newVal)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可改写为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        ...</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">counter</span>:<span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(oldVal+<span class="string">&quot;-&gt;&quot;</span>+newVal)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>该函数的<code>参数顺序固定</code>，第一个参数获取新值，第二个参数获取旧值。</em></p></blockquote><h2 id="事件处理器"><a href="#事件处理器" class="headerlink" title="事件处理器"></a>事件处理器</h2><ul><li><p>事件监听：使用<code>v-on</code>指令，可以绑定一个表达式或者方法。支持缩写：<code>@事件名=&quot;...&quot;</code>。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">counter</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;Vue.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this在方法里指当前Vue实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;Hello &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// event是原生DOM事件，可获取触发事件的对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (event) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 直接调用方法，此时不存在触发事件的对象</span></span></span><br><span class="line"><span class="language-javascript">    vm.<span class="title function_">greet</span>() <span class="comment">// -&gt; &#x27;Hello Vue.js!&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>当存在其他参数时需要获取事件对象，此时需要传递event。</em></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;greet(&#x27;good&#x27;,$event)&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;button v-on:click=&quot;greet(&#x27;good&#x27;,event)&quot;&gt;Greet&lt;/button&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">method:&#123;</span><br><span class="line"> greet: function (mes,event) &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>事件修饰符：Vue为v-on提供了事件修饰符来处理DOM事件细节，通过由点<code>.</code>表示的指令后缀来调用修饰符。</p><ol><li>stop —— 阻止冒泡</li><li>prevent —— 阻止默认事件</li><li>capture —— 阻止捕获</li><li>self —— 只监听触发该元素的事件</li><li>once —— 只触发一次</li><li>left —— 左键事件</li><li>right —— 右键事件</li><li>middle —— 中间滚轮事件</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按键修饰符：Vue允许为v-on在监听键盘事件时添加按键修饰符，可以使用KeyCode或按键别名。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在keyCode是13时调用vm.submit() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something&lt;/div</span><br></pre></td></tr></table></figure><blockquote><p><em>全部的按键别名：enter、tab、delete、esc、space、up、down、left、right、ctrl、alt、shift、meta</em></p></blockquote></li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li><p>双向绑定：使用<code>v-model</code>指令在表单控件元素（输入框、文本框、单选框、复选框、下拉列表）上创建双向数据绑定，v-model会根据控件类型自动选取正确的方法来更新元素。</p><ol><li><p>输入框：加载时数据会显示在输入框中。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;编辑我……&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>消息是: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Runoob&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>单选按钮</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;runoob&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Runoob&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;runoob&quot;</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;google&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Google&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;google&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>选中值为: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            picked : <span class="string">&#x27;Runoob&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>复选框：如果是一个则为逻辑值，如果是多个则绑定到<code>同一数组</code>上。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>单个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>多个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;runoob&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Runoob&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;runoob&quot;</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;google&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Google&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;google&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;taobao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Taobao&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;taobao&quot;</span>&gt;</span>taobao<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>选择的值为: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            checked : <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">checkedNames</span>: []</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>select列表</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选择一个网站<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;www.runoob.com&quot;</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;www.google.com&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>选择的网站是: &#123;&#123;selected&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selected</span>: <span class="string">&#x27;&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>v-model会忽略任何表单元素上初始的<code>value</code>、<code>checked</code>或<code>selected attribute</code>。它将始终将当前绑定的JavaScript状态视为正确来源，应在JavaScript中使用data选项来<code>声明该初始值</code>。</p><blockquote><p><em>如果v-model表达式的初始值<code>不匹配任何一个选择项</code>，&lt;select&gt;元素会渲染成一个“未选择”的状态。在iOS上，这将导致用户无法选择第一项，因为iOS在这种情况下不会触发一个change事件。因此，建议提供一个空值的禁用选项：<code>&lt;option disabled value=&quot;&quot;&gt;--请选择--&lt;/option&gt;</code></em></p></blockquote></li><li><p>修饰符</p><ol><li><p><code>.lazy</code>：在默认情况下，v-model在input事件中同步输入框的值与数据，但可添加修饰符lazy，从而转变为在change事件中同步，即触发change事件时再进行更新。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>.number</code>：如果想自动将用户的输入值转为Number类型（如果原值的转换结果为NaN则返回原值），可以添加修饰符number来处理输入值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>相当于调用 parseInt()，如果转换结果为NaN则返回原值。</em></p></blockquote></li><li><p><code>.trim</code>：如果要自动过滤用户输入的首尾空格，可以添加trim修饰符到v-model上过滤输入。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li><p>声明组件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局组件，所有实例都能使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;component&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;li&gt;hello&lt;li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selected</span>: <span class="string">&#x27;&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 局部组件，只能在这个实例中使用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;component&#x27;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">&quot;&lt;li&gt;hello&lt;li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>props</code>属性给组件传递数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&quot;component&quot;,&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&#x27;item&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: &quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello </span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="language-xml">&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>v-for&#x3D;”item in items”：指遍历Vue实例中名为items的数组，并创建同等数量的组件。</em></p><p><em>v-bind:item&#x3D;”item”：指将遍历的item绑定到组件中props定义的名为item属性上（相当于将右侧的item的值传递给组件props属性中名为item的变量），此时等号左边的”item”为props定义的属性名，右边的”item”为遍历得到的item。</em></p><p><em>props属性中的值<code>不能大写</code>。</em></p></blockquote></li></ul><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>在Vue中使用<slot>元素作为承载分发内容的出口，称其为“插槽”，可以应用在组合组件的场景中。插槽相当于在组件中渲染模板内容。示例：定义课程列表组件（todo），该组件由标题（todo-title）和内容（todo-items）组成，但三个组件又相互独立。步骤：</p><ul><li>定义课程列表组件，要实现其标题和内容动态绑定，可以在其中预留插槽，即slot；</li><li>定义标题和内容组件；</li><li>对应绑定。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                      <span class="string">&quot;&lt;slot name=&#x27;todo-title&#x27;&gt;&lt;/slot&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                      <span class="string">&quot;&lt;ul&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                       <span class="string">&quot;&lt;slot name=&#x27;todo-items&#x27;&gt;&lt;/slot&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                      <span class="string">&quot;&lt;/ul&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                 <span class="string">&quot;&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo-title&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo-items&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;item&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;课程列表&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">items</span>: [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;html&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>todo-title 和 todo-items 组件分别被分发到了 todo 组件的 todo-title 和 todo-items 插槽中。</em></p></blockquote><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>在组件中操作Vue实例的数据项，即调用实例中的方法，需要使用到自定义事件（组件中不能直接使用Vue实例中的方法）：<code>this.$emit(自定义事件名, 参数)</code>。当自定义事件被触发时，会调用Vue实例中对应的方法。示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-on:remove</span>=<span class="string">&quot;removesTodoItems(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//slot:插槽</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;slot name=&#x27;todo-title&#x27;&gt;&lt;/slot&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;ul&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;slot name=&#x27;todo-items&#x27;&gt;&lt;/slot&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;&lt;/ul&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">                  <span class="string">&quot;&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo-title&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;todo-items&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;item&#x27;</span>,<span class="string">&quot;index&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;li&gt;&#123;&#123;index&#125;&#125;--&#123;&#123;item&#125;&#125;&lt;button @click=&quot;fun(index)&quot;&gt;删除&lt;/button&gt;&lt;/li&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fun</span>:<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&quot;remove&quot;</span>,index)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;课程列表&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">items</span>: [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;python&quot;</span>,<span class="string">&quot;html&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">removesTodoItems</span>:<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                vm.<span class="property">items</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Axios异步通信"><a href="#Axios异步通信" class="headerlink" title="Axios异步通信"></a>Axios异步通信</h2><p>Vue使用<code>axios</code>来完成 ajax 请求。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script src=&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>Get请求示例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://www.runoob.com/try/ajax/demo_axios_post.php&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="variable language_">this</span>.<span class="property">info</span> = response))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123; </span><br><span class="line">        <span class="comment">// 请求失败处理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，直接拼接在后面</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 也可通过params设置参数，参数名有无引号均可</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">params</span>: &#123;</span><br><span class="line"><span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Post请求示例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&#x27;https://www.runoob.com/try/ajax/demo_axios_post.php&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="variable language_">this</span>.<span class="property">info</span> = response))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，此方式存在问题，可以使用下面两种方式</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,    </span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，能正常接收</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;qs&#x27;</span>);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, qs.<span class="title function_">stringify</span>(&#123; <span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种正常接收的方式</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">username</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">password</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">            str += <span class="built_in">encodeURIComponent</span>(key) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[key]) + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(response)))</span><br></pre></td></tr></table></figure><blockquote><p><em>第一种携带数据的post请求，在传递参数时<code>存在问题</code>：前端能传递参数，但<code>后端接收不到</code>，此时需要引入 <code>qs</code>。更多解决<code>post传参问题</code>的方法可参考：<a href="https://blog.csdn.net/lihchweb/article/details/79884134">https://blog.csdn.net/lihchweb/article/details/79884134</a></em></p></blockquote></li></ul><h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><img src="image-20221102081643982.png" alt="image-20221102081643982"/><p>钩子函数使用示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 钩子函数 链式编程，ES6新特性</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;../data.json&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>(<span class="variable language_">this</span>.<span class="property">info</span>=response.<span class="property">data</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h2><p>vue-cli是官方提供的一个脚手架，用于快速生成一个vue的项目模板。其有预先定义好的目录结构及基础代码，就好比创建Maven项目时可以选择创建一个骨架项目，这个骨架项目就是脚手架，可以使我们的开发更加的快速。</p><ul><li><p>主要功能</p><ol><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ol></li><li><p>环境需求：Node.js：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><ol><li><p>安装时选择自己的安装目录，无脑下一步即可。可通过命令行确认node.js是否安装成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看node.js版本号</span></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看npm版本号</span></span><br><span class="line"><span class="comment"># npm是一个软件包管理工具</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>安装node.js淘宝镜像加速器cnpm</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -g 指全局安装</span></span><br><span class="line">npm install cnpm -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用如下语句解决npm速度慢的问题，</span></span><br><span class="line">npm install --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><blockquote><p><em>安装位置：C:\Users\Administrator\AppData\Roaming\npm</em></p></blockquote></li></ol></li><li><p>vue-cli的使用</p><ol><li><p>安装vue-cli：npm install -g @vue&#x2F;cli</p><blockquote><p><em>检查版本：vue –version</em></p></blockquote></li><li><p>创建项目：vue create 项目名</p><blockquote><p><em>此时先创建一个空文件夹，并在cmd中进入该文件夹，再使用此命令，方便找到创建的项目。</em></p></blockquote></li><li><p>启动项目：npm run serve</p></li></ol></li><li><p>npm命令解释</p><ol><li>npm install moduleName：安装模块到项目目录下。</li><li>npm install -g moduleName：-g的意思是将模块安装到全局，具体安装到磁盘哪个位置要看npm config prefix的位置。</li><li>npm install –save moduleName：-–save的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖，-S为该命令的缩写。</li><li>npm install –save-dev moduleName：-–save-dev的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖，-D为该命令的缩写。</li></ol></li></ul><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>本质上，webpack是一个现代JavaScript应用程序的静态模块打包器（module bundler）。当webpack处理应用程序时，它会递归的构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。安装及测试：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">webpack -v</span><br><span class="line">webpack-cli -v</span><br></pre></td></tr></table></figure><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><ul><li><p>官方文档：<a href="https://router.vuejs.org/zh/introduction.html">https://router.vuejs.org/zh/introduction.html</a></p></li><li><p>使用npm或cnpm为项目安装vue-router。在命令行中进入对应的项目中，输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install vue-router --save-dev</span><br></pre></td></tr></table></figure></li><li><p>如果要在一个模块化工程中使用它，必须通过<code>Vue.use()</code>明确安装路由功能。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure><blockquote><p><em>使用后可能会由于vue-router版本过高而Vue版本过低，即vue-router对应的Vue为3.0以上而出错，此时运行<code>cnpm i vue-router@3.1.3</code>即可。或者开始时直接使用<code>yarn add vue-router@3</code>。</em></p></blockquote><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221102150930617.png" alt="image-20221102150930617"></p></li><li><p>实例</p><ol><li><p>删除多余文件，在components中存放自己的组件。定义一个Content.Vue组件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;当前为内容页&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">        // 上方语句用于解决报错，Alt+Enter</span><br><span class="line">        name: &quot;content&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加“scoped”属性来限制CSS仅用于此组件 --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p><em>模板根只需要一个元素，即一个标签，该标签中包含内容，可在外侧用一个<div>包裹所有内容。</em></p></blockquote></li><li><p>安装路由：在src目录下创建<code>router</code>文件夹，专门存放路由。在该文件夹中创建<code>index.js</code>，用于编写主配置。index.js内容如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 导入自定义的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Content</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Content&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装路由</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="comment">// 配置路由，可配置多个</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 路由路径，相当于跳转链接</span></span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">            <span class="comment">// 路由名称，可省略</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Content&#x27;</span>,</span><br><span class="line">            <span class="comment">// 跳转到组件</span></span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Content</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在main.js中配置路由</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入上面创建的路由配置目录，会自动扫描路由配置index.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭生产模式下给出的提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="comment">// 配置路由</span></span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>在App.vue中使用路由</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;h1&gt;路由测试&lt;/h1&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            router-link: 默认会被渲染成一个&lt;a&gt;标签，to属性用于指定链接</span><br><span class="line">            router-view: 用于渲染路由匹配到的组件</span><br><span class="line">        --&gt;</span><br><span class="line">      &lt;router-link to=&quot;/content&quot;&gt;内容&lt;/router-link&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p><em>router-link相当于<a>标签，会被渲染成一个超链接，它需要配合router-view使用，此时其对应组件的内容会在router-view中显示。若单独使用router-link，则内容无法显示。也可直接在地址栏中输入对应链接，即省略router-link，此时router-view中也会显示组件对应的内容。</em></p></blockquote></li></ol></li></ul><h2 id="Vue结合ElementUI"><a href="#Vue结合ElementUI" class="headerlink" title="Vue结合ElementUI"></a>Vue结合ElementUI</h2><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装element-ui</span></span><br><span class="line">npm i element-ui -S</span><br><span class="line"><span class="comment"># 安装SASS加载器（CSS预处理器）</span></span><br><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure></li><li><p>实例：在项目src目录下创建views文件夹，用于存放Vue视图组件，而原有的components文件夹用于存放Vue功能组件。</p><ol><li><p>在views目录下创建首页视图Main.vue组件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;Main&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在views目录下创建登录页面视图Login.vue组件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-form ref=&quot;loginForm&quot; :model=&quot;form&quot; :rules=&quot;rules&quot; label-width=&quot;80px&quot; class=&quot;login-box&quot;&gt;</span><br><span class="line">      &lt;h3 class=&quot;login-title&quot;&gt;欢迎登录&lt;/h3&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;账号&quot; prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;text&quot; placeholder=&quot;请输入账号&quot; v-model=&quot;form.username&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; v-model=&quot;form.password&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; v-on:click=&quot;onSubmit(&#x27;loginForm&#x27;)&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;Login&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      form:&#123;</span><br><span class="line">        username:&#x27;&#x27;,</span><br><span class="line">        password:&#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 表单验证，需要在el-form-item元素中增加prop属性</span><br><span class="line">      rules:&#123;</span><br><span class="line">        username:[</span><br><span class="line">          &#123;required:true,message:&quot;账号不可为空&quot;,trigger:&quot;blur&quot;&#125;</span><br><span class="line">        ],</span><br><span class="line">        password:[</span><br><span class="line">          &#123;required:true,message:&quot;密码不可为空&quot;,tigger:&quot;blur&quot;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    onSubmit(formName)&#123;</span><br><span class="line">      // 为表单绑定验证功能</span><br><span class="line">      this.$refs[formName].validate((valid)=&gt;&#123;</span><br><span class="line">        if(valid)&#123;</span><br><span class="line">          // 使用vue-router路由到指定界面，该方式称为编程式导航</span><br><span class="line">          this.$router.push(&#x27;/main&#x27;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.login-box&#123;</span><br><span class="line">  border:1px solid #DCDFE6;</span><br><span class="line">  width: 350px;</span><br><span class="line">  margin:180px auto;</span><br><span class="line">  padding: 35px 35px 15px 35px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  -webkit-border-radius: 5px;</span><br><span class="line">  -moz-border-radius: 5px;</span><br><span class="line">  box-shadow: 0 0 25px #909399;</span><br><span class="line">&#125;</span><br><span class="line">.login-title&#123;</span><br><span class="line">  text-align:center;</span><br><span class="line">  margin: 0 auto 40px auto;</span><br><span class="line">  color: #303133;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>router目录下创建一个名为<code>index.js</code>的vue-router路由配置文件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&quot;@/views/Main&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Main</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中配置路由及ElementUI。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入Element</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写APP.vue</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>测试：<a href="http://localhost:8080/#/login">http://localhost:8080/#/login</a></p></li></ol></li></ul><h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><ul><li><p>嵌套路由又称子路由，在实际应用中，通常由多层嵌套的组件组合而成。同样的，URL中各段动态路径也按某种结构对应嵌套着各层组件，例如：</p><img src="image-20221102165836435.png" alt="image-20221102165836435"/></li><li><p>实例</p><ul><li><p>创建用户信息组件：在views&#x2F;user目录下创建一个名为Profile.vue的视图组件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;用户信息&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;Profile&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建用户列表组件：在views&#x2F;user目录下创建一个名为List.vue的视图组件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;用户列表&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;List&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改Main.vue视图组件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">        &lt;el-menu :default-openeds=&quot;[&#x27;1&#x27;]&quot;&gt;</span><br><span class="line">          &lt;el-submenu index=&quot;1&quot;&gt;</span><br><span class="line">            &lt;template slot=&quot;title&quot;&gt;&lt;i class=&quot;el-icon-caret-right&quot;&gt;&lt;/i&gt;用户管理&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;1-1&quot;&gt;</span><br><span class="line">                &lt;!-- 插入的地方 --&gt;</span><br><span class="line">                &lt;router-link to=&quot;/user/profile&quot;&gt;个人信息&lt;/router-link&gt;</span><br><span class="line">              &lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;1-2&quot;&gt;</span><br><span class="line">                &lt;!-- 插入的地方 --&gt;</span><br><span class="line">                &lt;router-link to=&quot;/user/list&quot;&gt;用户列表&lt;/router-link&gt;</span><br><span class="line">              &lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">          &lt;el-submenu index=&quot;2&quot;&gt;</span><br><span class="line">            &lt;template slot=&quot;title&quot;&gt;&lt;i class=&quot;el-icon-caret-right&quot;&gt;&lt;/i&gt;内容管理&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;2-1&quot;&gt;分类管理&lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;2-2&quot;&gt;内容列表&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">      &lt;/el-aside&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-container&gt;</span><br><span class="line">        &lt;el-header style=&quot;text-align: right; font-size: 12px&quot;&gt;</span><br><span class="line">          &lt;el-dropdown&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-setting&quot; style=&quot;margin-right: 15px&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;个人信息&lt;/el-dropdown-item&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;退出登录&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;/el-dropdown-menu&gt;</span><br><span class="line">          &lt;/el-dropdown&gt;</span><br><span class="line">        &lt;/el-header&gt;</span><br><span class="line">        &lt;el-main&gt;</span><br><span class="line">          &lt;!-- 在这里展示视图 --&gt;</span><br><span class="line">          &lt;router-view /&gt;</span><br><span class="line">        &lt;/el-main&gt;</span><br><span class="line">      &lt;/el-container&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;Main&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.el-header &#123;</span><br><span class="line">  background-color: #B3C0D1;</span><br><span class="line">  color: #333;</span><br><span class="line">  line-height: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.el-aside &#123;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改路由配置</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Main&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&quot;@/views/user/Profile&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&quot;@/views/user/List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Main</span>,</span><br><span class="line">            <span class="comment">// 子路由</span></span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;<span class="attr">path</span>: <span class="string">&#x27;/user/profile&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Profile</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">path</span>: <span class="string">&#x27;/user/list&#x27;</span>, <span class="attr">component</span>: <span class="title class_">List</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><em>路由跳转后组件内容会显示在router-view中，此时如果其组件内部也存在路由跳转链接router-link，则需要配置子路由。若此时未配置子路由，则无法在当前组件对应区域显示跳转组件内容，相应内容会显示在App.vue中的router-view中，相当于普通的路由跳转。</em></p></blockquote></li></ul></li></ul><h2 id="参数传递和重定向"><a href="#参数传递和重定向" class="headerlink" title="参数传递和重定向"></a>参数传递和重定向</h2><ul><li><p>参数传递</p><ol><li><p>修改router&#x2F;index.js配置，为path属性增加<code>:id</code>占位符。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/profile/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Profile&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Profile</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">name：绑定组件的名字</span><br><span class="line">params：指需要传递的参数，两个地方的参数名需一致</span><br><span class="line">--&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name: &#x27;Profile&#x27;, params: &#123;id:1&#125;&#125;&quot;&gt;个人信息&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p><em>传递参数时需要使用<code>v-bind</code>来绑定，即：<code>v-bind:to=&quot;&#123;name: 组件名, params: &#123;...&#125;&#125;&quot;</code>或<code>:to=&quot;&#123;name: 组件名, params: &#123;...&#125;&#125;&quot;</code>。</em></p></blockquote></li><li><p>组件接收参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用户信息&lt;/h1&gt;</span><br><span class="line">    &#123;&#123;$route.params.id&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>另一种参数传递方式：使用props减少耦合</p><ul><li><p>修改router&#x2F;index.js配置，为路由增加<code>props: true</code>属性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/profile/:id&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Profile&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">Profile</span>,</span><br><span class="line"><span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数和之前一样。在接收参数的组件中，增加props属性。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用户信息&lt;/h1&gt;</span><br><span class="line">    &#123;&#123;id&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/multi-word-component-names</span><br><span class="line">  name: &quot;Profile&quot;,</span><br><span class="line">  props: [&#x27;id&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>重定向：作用于路径不同但组件相同的情况，即不同路径可跳转到相同组件。</p><ol><li><p>修改router&#x2F;index.js配置，添加重定向路径。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Main&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Main</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/goHome&#x27;</span>,</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;/main&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改Main.vue</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-menu-item index=&quot;1-3&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/goHome&quot;&gt;返回首页&lt;/router-link&gt;</span><br><span class="line">&lt;/el-menu-item&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><p>路由模式有两种：</p><ul><li>hash：路径带#，默认，如：<a href="http://localhost:8080/#/login">http://localhost:8080/#/login</a></li><li>history：路径不带#，如：<a href="http://localhost:8080/login">http://localhost:8080/login</a></li></ul><p>可通过修改路由配置router&#x2F;index.js进行切换：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>:<span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">routes</span>: []</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h2><ul><li><p>创建一个NotFound.vue视图组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;404，您的页面走丢了！&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;NotFound&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改路由配置router&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;../views/NotFound&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        ...</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">NotFound</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="路由钩子"><a href="#路由钩子" class="headerlink" title="路由钩子"></a>路由钩子</h2><ul><li><p>除了钩子函数（mounted）外，还存在两个钩子函数：</p><ol><li>beforeRouteEnter：在进入路由前执行。</li><li>beforeRouteLeave：在离开路由前执行。</li></ol></li><li><p>测试：在Profile.vue组件中使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Profile&quot;</span>,</span><br><span class="line">  <span class="attr">beforeRouteEnter</span>: <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入路由之前&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeRouteLeave</span>: <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;离开路由之前&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li>to：路由将要跳转的路径信息；</li><li>from：路径跳转前的路径信息；</li><li>next：路由的控制参数。<ul><li>next()：跳入下一个页面；</li><li>next(’&#x2F;path’)：改变路由的跳转方向，使其跳到另一个路由；</li><li>next(false)：返回原来的页面；</li><li>next((vm)&#x3D;&gt;{})：仅在<code>beforeRouteEnter</code>中可用，vm是组件实例。</li></ul></li></ol></li><li><p>在钩子函数中使用异步请求</p><ul><li><p>安装Axios</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install axios -s</span><br></pre></td></tr></table></figure></li><li><p>在main.js中应用Axios</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能使用Vue.use(axios)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">axios</span> = axios;</span><br></pre></td></tr></table></figure></li><li><p>准备数据</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cv战士&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blog.csdn.net/qq_45408390?spm=1001.2101.3001.5343&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isNonProfit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;street&quot;</span><span class="punctuation">:</span> <span class="string">&quot;含光门&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;陕西西安&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bilibili&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://bilibili.com&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cv战士&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blog.csdn.net/qq_45408390?spm=1001.2101.3001.5343&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;百度&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>只有<code>public</code>目录下的文件可以被访问，因此把静态资源放入该文件夹下。例如：public&#x2F;mock&#x2F;data.json，访问地址：<a href="http://localhost:8080/mock/data.json">http://localhost:8080/mock/data.json</a></em></p></blockquote></li><li><p>在beforeRouteEnter中进行异步请求</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line vue/multi-word-component-names</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Profile&quot;</span>,</span><br><span class="line">    <span class="attr">beforeRouteEnter</span>: <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入路由之前&quot;</span>)</span><br><span class="line">        <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">            vm.<span class="title function_">getData</span>()</span><br><span class="line">            <span class="comment">// 调用当前组件的getData方法</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">getData</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">axios</span>(&#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/mock/data.json&#x27;</span></span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// axios.get(&quot;http://localhost:8080/mock/data.json&quot;).then(response=&gt;(console.log(response)))</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="安装Bootstrap"><a href="#安装Bootstrap" class="headerlink" title="安装Bootstrap"></a>安装Bootstrap</h2><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install bootstrap@5.0.1 --save-dev</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.css</span></span><br><span class="line"><span class="string">import &#x27;</span>bootstrap/dist/js/bootstrap.<span class="property">bundle</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2022/09/27/Mysql/"/>
      <url>/2022/09/27/Mysql/</url>
      
        <content type="html"><![CDATA[<p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。</p><ul><li><p>关系型数据库（SQL）：通过外键关联来建立表与表之间的关系，有MySQL、Oracle、SQL Server、SQLite、DB2等。</p></li><li><p>非关系型数据库（NOSQL）：通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定，有Redis、MongoDB等。</p></li></ul><p>Mysql官网：<a href="https://www.mysql.com/">https://www.mysql.com/</a></p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line">create database [if not exists] 数据库名;</span><br><span class="line"># 删除数据库</span><br><span class="line">drop database [if exists] 数据库名;</span><br><span class="line"># 查看数据库</span><br><span class="line">show databases;</span><br><span class="line"># 显示指定数据库的所有表</span><br><span class="line">show tables;</span><br><span class="line"># 显示数据表的字段、字段类型、主键信息、是否为NULL、默认值等信息</span><br><span class="line">show columns from 数据表名;</span><br><span class="line"># 显示数据库中所有表的统计信息</span><br><span class="line">show table status from 数据库名;</span><br><span class="line"># 显示表名以xxx开头的表的信息</span><br><span class="line">show table status from 数据库名 LIKE &#x27;xxx%&#x27;;</span><br><span class="line"># 加上\G，查询结果格式化输出，末尾不需要分号，且G大写</span><br><span class="line">show table status from 数据库名 LIKE &#x27;xxx%&#x27;\G</span><br><span class="line"># 使用数据库</span><br><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [if <span class="keyword">not</span> <span class="keyword">exists</span>] `表名`(</span><br><span class="line">   <span class="string">&#x27;字段名1&#x27;</span> 列类型 [属性][索引][注释],</span><br><span class="line">   <span class="string">&#x27;字段名2&#x27;</span> 列类型 [属性][索引][注释],</span><br><span class="line">    ...</span><br><span class="line">   <span class="string">&#x27;字段名n&#x27;</span> 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure><ul><li><p>数据类型</p><ol><li>数值类型有int、float、double等；</li><li>字符串类型有：varchar（变长）、char（定长）、text（长文本）等；</li><li>日期时间类型：date（YYYY-MM-DD）、time（hh:mm:ss）、datetime（YYYY-MM-DD hh:mm:ss）等；</li><li>空值：null。</li></ol></li><li><p>字段属性</p><ol><li>主键：primary key</li><li>无符号（非负）：unsigned</li><li>零填充（不足位用0进行填充）：zerofill</li><li>自增（通常用于设置主键，且为整数类型）：auto_increment</li><li>默认值：default</li><li>不为空：not null</li></ol></li><li><p>设置数据表字符集：创建时通过命令来设置：<code>CREATE TABLE 表名() CHARSET = utf8;</code>，如无设定，则根据MySQL数据库配置文件 my.ini 中的参数设定。</p></li><li><p>设置存储引擎：CREATE TABLE 表名() ENGINE&#x3D;InnoDB;</p></li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li>单行注释：<code># 注释内容</code></li><li>多行注释：<code>/* 注释内容 */</code></li><li>单行注释（中间需要有空格）：<code>-- 注释内容</code></li></ul><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除字段，如果数据表中只剩一个字段则无法使用DROP来删除字段</span><br><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br><span class="line"></span><br><span class="line"># 添加字段，添加到数据表字段的末尾</span><br><span class="line">ALTER TABLE 表名 ADD 字段名 列类型[属性];</span><br><span class="line"># 指定新增字段的位置，可以使用MySQL提供的关键字FIRST(设定位第一列)，AFTER 字段名(设定位于某个字段之后)</span><br><span class="line">ALTER TABLE 表名 ADD 字段名 列类型[属性] FIRST;</span><br><span class="line">ALTER TABLE 表名 ADD 字段名 列类型[属性] AFTER 字段名;</span><br><span class="line"></span><br><span class="line"># 修改字段类型</span><br><span class="line">ALTER TABLE 表名 MODIFY 字段名 列类型[属性];</span><br><span class="line"># 修改字段的相对位置</span><br><span class="line">alter table 表名 modify 字段名 列类型 first|after 字段名;</span><br><span class="line"># 修改字段名称及类型，若只修改字段类型可设置新旧字段名一致</span><br><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列类型[属性];</span><br><span class="line"></span><br><span class="line"># 修改字段默认值</span><br><span class="line">alter table 表名 alter 字段名 set default 默认值;</span><br><span class="line"># 删除字段默认值</span><br><span class="line">alter table 表名 alter 字段名 drop default;</span><br><span class="line"></span><br><span class="line"># 修改数据表存储引擎，例如存储引擎修改为MYISAM </span><br><span class="line">alter table 表名 ENGINE = MYISAM;</span><br><span class="line"># 查看数据表存储引擎可以使用SHOW TABLE STATU语句。</span><br><span class="line"></span><br><span class="line"># 修改表名</span><br><span class="line">ALTER TABLE 旧表名 RENAME AS/TO 新表名;</span><br><span class="line"></span><br><span class="line"># 删除数据表</span><br><span class="line">DROP TABLE [IF EXISTS] 表名;</span><br></pre></td></tr></table></figure><blockquote><p>如果字段未设置默认值，MySQL会自动设置该字段默认为 NULL。</p></blockquote><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名[(字段1,字段2,字段3,...)] </span><br><span class="line">VALUES(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;);</span><br></pre></td></tr></table></figure><ul><li>字段名可省略，但添加的值务必与表中字段顺序相对应，且数量一致。</li><li>可以同时插入多条数据，values 后用英文逗号隔开。</li></ul><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE condition1 [AND [OR]] condition2...]</span><br><span class="line">[LIMIT N][ OFFSET M]</span><br></pre></td></tr></table></figure><ul><li>查询语句中可以使用一个或者多个表，表之间使用逗号分割。</li><li>可以使用星号（*）来代替其他字段，此时会返回表中所有字段。</li><li>可以使用WHERE语句来包含条件，使用AND或者OR指定一个或多个条件，也可以运用于DELETE或者UPDATE命令。</li><li>可以使用 LIMIT 属性来设定返回的记录数。</li><li>可以通过OFFSET指定SELECT语句开始查询的数据偏移量，默认情况下偏移量为0。</li></ul><blockquote><p>WHERE子句的字符串比较是不区分大小写的，可以使用BINARY关键字来设定比较区分大小写：<code>... where binary name=&#39;zs&#39;;</code></p></blockquote><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE 表名 SET column_name=value [,column_name2=value2,...] [WHERE condition];</span><br><span class="line"></span><br><span class="line"># 替换字段中的字符串</span><br><span class="line">UPDATE 表名 SET column_name=REPLACE(column_name, &#x27;old-string&#x27;, &#x27;new-string&#x27;) [WHERE Clause]</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM 表名 [WHERE condition];</span><br><span class="line"></span><br><span class="line"># 用于完全清空表数据，但表结构、索引、约束等不变</span><br><span class="line">TRUNCATE [TABLE] table_name;</span><br></pre></td></tr></table></figure><ul><li><p>删除数据两种方式比较：</p><ol><li>相同点：都能删除数据，不删除表结构，但TRUNCATE速度更快。</li><li>不同点：使用TRUNCATE TABLE会重新设置AUTO_INCREMENT计数器，且不会对事务有影响。</li></ol></li></ul><h4 id="like子句"><a href="#like子句" class="headerlink" title="like子句"></a>like子句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name1, column_name2</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name1 LIKE condition1 [AND [OR]] condition2...</span><br><span class="line"></span><br><span class="line"># 示例：获取user表中name字段以ls结尾的记录</span><br><span class="line">select * from user where name like &#x27;%ls&#x27;;</span><br></pre></td></tr></table></figure><ul><li>LIKE子句中使用百分号<code>%</code>来表示任意字符，如果没有使用百分号，LIKE 子句与等号&#x3D;的效果是一样的。使用<code>_</code>表示任意单个字符。</li><li>可以在DELETE或UPDATE命令中使用WHERE…LIKE子句来指定条件。</li></ul><h4 id="union操作符"><a href="#union操作符" class="headerlink" title="union操作符"></a>union操作符</h4><p>UNION操作符用于连接两个及以上的 SELECT 语句的结果组合到一个结果集合中，多个 SELECT 语句会删除重复的数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions]</span><br><span class="line">UNION [ALL | DISTINCT]</span><br><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions];</span><br></pre></td></tr></table></figure><ul><li>DISTINCT：可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</li><li>ALL：可选，返回所有结果集，包含重复数据。</li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC]]</span><br></pre></td></tr></table></figure><ul><li>可以使用任何字段来作为排序的条件，从而返回排序后的查询结果，且可以设定多个字段来排序。</li><li>使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>可以添加 WHERE…LIKE 子句来设置条件。</li><li>可以对字符串进行排序，此时按照拼音进行排序。</li></ul><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>GROUP BY 语句根据一个或多个列对结果集进行分组，且在分组的列上可以使用 COUNT、SUM、AVG等函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name, function(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value</span><br><span class="line">GROUP BY column_name;</span><br><span class="line"></span><br><span class="line"># 将数据表按名字进行分组，并统计每个人有多少条记录</span><br><span class="line">select name, count(*) from employee_tbl group by name;</span><br><span class="line"></span><br><span class="line"># 按名字进行分组，再统计每个人登录的次数</span><br><span class="line">SELECT name, SUM(signin) as signin_count FROM employee_tbl GROUP BY name WITH ROLLUP;</span><br><span class="line"># +------+--------------+</span><br><span class="line"># | name | signin_count |</span><br><span class="line"># +------+--------------+</span><br><span class="line"># | 小丽 |            2 |</span><br><span class="line"># | 小明 |            7 |</span><br><span class="line"># | 小王 |            7 |</span><br><span class="line"># | NULL |           16 |</span><br><span class="line"># +------+--------------+</span><br><span class="line"></span><br><span class="line"># 替换null</span><br><span class="line">SELECT coalesce(name, &#x27;总数&#x27;), SUM(signin) as signin_count FROM employee_tbl GROUP BY name WITH ROLLUP;</span><br></pre></td></tr></table></figure><ul><li>WITH ROLLUP，在group分组字段的基础上再进行统计数据（汇总）。</li><li>使用 coalesce 来设置一个取代 NUll 的名称，语法：<code>select coalesce(a,b,c);</code>如果a&#x3D;&#x3D;null，则选择b；如果b&#x3D;&#x3D;null，则选择c；如果a!&#x3D;null，则选择a；如果a b c都为null，则返回为null（没意义）。</li></ul><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><ul><li>使用 MySQL 的 JOIN 在两个或多个表中查询数据，也可以在 SELECT、UPDATE 和 DELETE 语句中使用JOIN 来联合多表查询。</li><li>JOIN 按照功能大致分为如下三类：<ol><li>[INNER] JOIN（内连接或等值连接）：获取两个表中字段匹配关系的记录。</li><li>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li><li>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- tcount_tbl表</span><br><span class="line"># +---------------+--------------+</span><br><span class="line"># | runoob_author | runoob_count |</span><br><span class="line"># +---------------+--------------+</span><br><span class="line"># | 菜鸟教程      |           10 |</span><br><span class="line"># | RUNOOB.COM    |           20 |</span><br><span class="line"># | Google        |           22 |</span><br><span class="line"># +---------------+--------------+</span><br><span class="line">-- runoob_tbl表</span><br><span class="line"># +-----------+--------------+---------------+-----------------+</span><br><span class="line"># | runoob_id | runoob_title | runoob_author | submission_date |</span><br><span class="line"># +-----------+--------------+---------------+-----------------+</span><br><span class="line"># |         1 | 学习 PHP     | 菜鸟教程      | 2017-04-12      |</span><br><span class="line"># |         2 | 学习 MySQL   | 菜鸟教程      | 2017-04-12      |</span><br><span class="line"># |         3 | 学习 Java    | RUNOOB.COM    | 2015-05-01      |</span><br><span class="line"># |         4 | 学习 Python  | RUNOOB.COM    | 2016-03-06      |</span><br><span class="line"># |         5 | 学习 C       | FK            | 2017-04-05      |</span><br><span class="line"># +-----------+--------------+---------------+-----------------+</span><br><span class="line"></span><br><span class="line"># INNER JOIN</span><br><span class="line">SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span><br><span class="line"># 可省略INNER，等价于：</span><br><span class="line">SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;</span><br><span class="line"># +-----------+---------------+--------------+</span><br><span class="line"># | runoob_id | runoob_author | runoob_count |</span><br><span class="line"># +-----------+---------------+--------------+</span><br><span class="line"># |         1 | 菜鸟教程      |           10 |</span><br><span class="line"># |         2 | 菜鸟教程      |           10 |</span><br><span class="line"># |         3 | RUNOOB.COM    |           20 |</span><br><span class="line"># |         4 | RUNOOB.COM    |           20 |</span><br><span class="line"># +-----------+---------------+--------------+</span><br><span class="line"></span><br><span class="line"># LEFT JOIN</span><br><span class="line">SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span><br><span class="line"># +-----------+---------------+--------------+</span><br><span class="line"># | runoob_id | runoob_author | runoob_count |</span><br><span class="line"># +-----------+---------------+--------------+</span><br><span class="line"># |         1 | 菜鸟教程      |           10 |</span><br><span class="line"># |         2 | 菜鸟教程      |           10 |</span><br><span class="line"># |         3 | RUNOOB.COM    |           20 |</span><br><span class="line"># |         4 | RUNOOB.COM    |           20 |</span><br><span class="line"># |         5 | FK            |         NULL |</span><br><span class="line"># +-----------+---------------+--------------+</span><br><span class="line"></span><br><span class="line"># RIGHT JOIN</span><br><span class="line">SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a RIGHT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span><br><span class="line"># +-----------+---------------+--------------+</span><br><span class="line"># | runoob_id | runoob_author | runoob_count |</span><br><span class="line"># +-----------+---------------+--------------+</span><br><span class="line"># |         1 | 菜鸟教程      |           10 |</span><br><span class="line"># |         2 | 菜鸟教程      |           10 |</span><br><span class="line"># |         3 | RUNOOB.COM    |           20 |</span><br><span class="line"># |         4 | RUNOOB.COM    |           20 |</span><br><span class="line"># |      NULL | NULL          |           22 |</span><br><span class="line"># +-----------+---------------+--------------+</span><br></pre></td></tr></table></figure><blockquote><p>注意：连接查询时条件使用的是<code>on</code>。</p></blockquote><h4 id="NULL值处理"><a href="#NULL值处理" class="headerlink" title="NULL值处理"></a>NULL值处理</h4><p>查询条件为字段是 NULL 时，存在三种运算符：</p><ul><li>IS NULL：当列的值是 NULL，返回 true。</li><li>IS NOT NULL：当列的值不为 NULL，返回 true。</li><li>&lt;&#x3D;&gt;：比较操作符（不同于 &#x3D; 运算符），当比较的两个值相等或者都为 NULL 时返回 true。</li></ul><blockquote><p>注意：不能使用 <code>=NULL</code> 或 <code>!=NULL</code> 在列中查找 NULL 值。</p><p>NULL 值与任何其它值的比较（即使是 NULL）永远返回 NULL，即 NULL &#x3D; NULL 返回 NULL 。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 字段值为null</span><br><span class="line">select * from 表名 where 列名 is null;</span><br><span class="line">select * from 表名 where 列名 &lt;=&gt; null;</span><br><span class="line"># 字段值不为null</span><br><span class="line">select * from 表名 where 列名 is not null;</span><br><span class="line"></span><br><span class="line"># columnName1、columnName2为int型，当columnName2中有值为null时，columnName1+columnName2=null，而使用ifnull(columnName2,0)可以把columnName2中的null值转为0。</span><br><span class="line">select *, columnName1+ifnull(columnName2,0) from tableName;</span><br></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>MySQL可以通过LIKE子句来进行模糊匹配，也支持其他正则表达式的匹配，MySQL中使用 REGEXP 操作符来进行正则表达式匹配。常见正则模式如下：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串的开始位置。</td></tr><tr><td>$</td><td>匹配字符串的结束位置。</td></tr><tr><td>.</td><td>匹配除 “\n” 之外的任何单个字符。</td></tr><tr><td>[…]</td><td>匹配所包含的任意一个字符。</td></tr><tr><td>[^…]</td><td>匹配未包含的任意字符。</td></tr><tr><td>?</td><td>匹配它前面的零个或一个子表达式（字符串）。例如，com? 能匹配 “co” 以及 “com”。? 等价于{0,1}。</td></tr><tr><td>*</td><td>匹配它前面的零个或多个子表达式（字符串）。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td>匹配它前面的一个或多个子表达式（字符串）。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>[A-Z]</td><td>匹配任何大写字母。</td></tr><tr><td>[a-z]</td><td>匹配任何小写字母。</td></tr><tr><td>[0-9]</td><td>匹配从0到9的任何数字。</td></tr><tr><td>p1|p2|p3</td><td>匹配 p1 或 p2 或 p3。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td>{n}</td><td>n 是一个非负整数，匹配 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 ‘o’。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。</td></tr></tbody></table><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>MySQL 主要有以下几种运算符：算术运算符、比较运算符、逻辑运算符、位运算符。</p><ul><li><p>算术运算符：+、-、*、&#x2F; 或 DIV、% 或 MOD</p><blockquote><p>在除法运算和模运算中，如果除数为0，将是非法除数，返回结果为NULL。</p></blockquote></li><li><p>比较运算符：比较结果为真，则返回 1，为假则返回 0，比较结果不确定则返回 NULL。</p><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt;、!&#x3D;</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>between … and …</td><td>在两值之间</td></tr><tr><td>not between … and …</td><td>不在两值之间</td></tr><tr><td>in</td><td>在集合中</td></tr><tr><td>not in</td><td>不在集合中</td></tr><tr><td>&lt;&#x3D;&gt;</td><td>当比较的两个值相等或都为NULL时返回1。</td></tr><tr><td>like</td><td>模糊匹配</td></tr><tr><td>regexp 或 rlike</td><td>正则式匹配</td></tr><tr><td>is null</td><td>为空</td></tr><tr><td>is not null</td><td>不为空</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在两值之间</span><br><span class="line">select 5 between 1 and 10;</span><br><span class="line"># 在集合中</span><br><span class="line">select * in (1,2,3,4,5);</span><br><span class="line"># 正则匹配，以ab开头</span><br><span class="line">select &#x27;abc&#x27; regexp &#x27;^ab&#x27;;</span><br><span class="line">select &#x27;abc&#x27; rlike &#x27;^ab&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符：用来判断表达式的真假。如果表达式是真，结果返回 1。如果表达式是假，结果返回 0。</p><table><thead><tr><th>运算符号</th><th>作用</th></tr></thead><tbody><tr><td>not 或 !</td><td>逻辑非</td></tr><tr><td>and 或 &amp;&amp;</td><td>逻辑与</td></tr><tr><td>or 或 ||</td><td>逻辑或</td></tr><tr><td>xor</td><td>逻辑异或</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select !0;# 1</span><br><span class="line">select not 0;# 1</span><br><span class="line">select 2 and 1;# 1</span><br><span class="line">select 2 or 0;# 1</span><br><span class="line">select 1 xor 1; # 0</span><br></pre></td></tr></table></figure></li><li><p>位运算符：是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。</p><table><thead><tr><th>运算符号</th><th>作用</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>!</td><td>取反</td></tr><tr><td>&lt;&lt;</td><td>左移</td></tr><tr><td>&gt;&gt;</td><td>右移</td></tr></tbody></table><blockquote><p>按位与：按二进制位对应的位进行与运算，对应位都为1时，结果才为1。</p><p>按位或：按二进制位对应的位进行或运算，对应位只要一个为1，结果就为1。</p><p>按位异或：按二进制位对应的位进行异或运算，相应位上的数字相同时为0，不同时为1。</p></blockquote></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引。组合索引，即一个索引包含多个列。实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p><p>创建索引时，需要确保该索引是应用在 SQL 查询语句的条件（一般作为 WHERE 子句的条件）。</p><p>缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，不仅要保存数据，还要保存一下索引文件；建立索引会占用磁盘空间的索引文件。</p><ul><li><p>普通索引：最基本的索引，它没有任何限制。</p><ol><li><p>创建索引</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建索引</span><br><span class="line">CREATE INDEX indexName ON tableName (column_name);</span><br><span class="line"># 修改表结构，添加索引</span><br><span class="line">ALTER table tableName ADD INDEX indexName(columnName);</span><br><span class="line"># 创建表的时候直接指定</span><br><span class="line">CREATE TABLE mytable(</span><br><span class="line">ID INT NOT NULL,</span><br><span class="line">username VARCHAR(16) NOT NULL,</span><br><span class="line">INDEX [indexName] (username(length))</span><br><span class="line">);  </span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP INDEX [indexName] ON tableName; </span><br></pre></td></tr></table></figure></li></ol></li><li><p>唯一索引：它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建索引</span><br><span class="line">CREATE UNIQUE INDEX indexName ON mytable(username(length));</span><br><span class="line"># 修改表结构</span><br><span class="line">ALTER table mytable ADD UNIQUE [indexName] (username(length));</span><br><span class="line"># 创建表的时候直接指定</span><br><span class="line">CREATE TABLE mytable(</span><br><span class="line">ID INT NOT NULL,</span><br><span class="line">username VARCHAR(16) NOT NULL,</span><br><span class="line">UNIQUE [indexName] (username(length))</span><br><span class="line">);  </span><br></pre></td></tr></table></figure></li><li><p>使用alter命令添加和删除索引</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</span><br><span class="line">ALTER TABLE tbl_name ADD PRIMARY KEY (column_list);</span><br><span class="line"># 创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</span><br><span class="line">ALTER TABLE tbl_name ADD UNIQUE index_name (column_list);</span><br><span class="line"># 添加普通索引，索引值可出现多次。</span><br><span class="line">ALTER TABLE tbl_name ADD INDEX index_name (column_list);</span><br><span class="line"># 指定索引为FULLTEXT，用于全文索引。</span><br><span class="line">ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list);</span><br><span class="line"></span><br><span class="line"># 删除索引</span><br><span class="line">ALTER TABLE tbl_name DROP INDEX index_name;</span><br></pre></td></tr></table></figure></li><li><p>使用alter命令添加和删除主键：主键作用于列上（可以是一个列或多个列联合主键）。添加主键索引时，需要确保该主键所在列上不存在空值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加主键</span><br><span class="line">ALTER TABLE tbl_name ADD PRIMARY KEY (column_name);</span><br><span class="line"># 删除主键</span><br><span class="line">ALTER TABLE tbl_name DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><blockquote><p>删除主键时只需指定PRIMARY KEY，但在删除索引时，必须知道索引名。</p></blockquote></li><li><p>显示索引信息：使用 SHOW INDEX 命令来列出表中相关的索引信息。可以通过添加 \G 来格式化输出信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW INDEX FROM table_name\G</span><br></pre></td></tr></table></figure></li></ul><h2 id="处理重复数据"><a href="#处理重复数据" class="headerlink" title="处理重复数据"></a>处理重复数据</h2><ul><li><p>防止表中出现重复数据</p><ol><li>设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性。</li><li>使用 INSERT IGNORE INTO进行添加数据，此时不会向数据表中插入重复数据。其与 INSERT INTO 的区别就是 INSERT IGNORE INTO 会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。</li></ol></li><li><p>过滤重复数据：可以在 SELECT 语句中使用 DISTINCT 关键字来过滤重复数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select distinct * from 表名;</span><br></pre></td></tr></table></figure></li><li><p>删除重复数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 临时表名 select distinct * from 表名;</span><br><span class="line">drop table 表名;</span><br><span class="line">alter table 临时表名 rename to 表名;</span><br></pre></td></tr></table></figure></li><li><p>统计重复数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 表test数据</span><br><span class="line"># +------+------+</span><br><span class="line"># | id   | name |</span><br><span class="line"># +------+------+</span><br><span class="line"># |    1 | zs   |</span><br><span class="line"># |    2 | ls   |</span><br><span class="line"># |    1 | zs   |</span><br><span class="line"># +------+------+</span><br><span class="line"></span><br><span class="line"># 获取重复的记录数</span><br><span class="line">select count(*),id,name from test group by id,name having count(*)&gt;1;</span><br><span class="line"># +----------+------+------+</span><br><span class="line"># | count(*) | id   | name |</span><br><span class="line"># +----------+------+------+</span><br><span class="line"># |        2 |    1 | zs   |</span><br><span class="line"># +----------+------+------+</span><br></pre></td></tr></table></figure><p>查询重复记录操作步骤：</p><ol><li>使用group by对重复列进行分组；</li><li>使用count(*)进行统计；</li><li>使用having对分组进行过滤，即重复记录数大于1。</li></ol></li></ul><h2 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h2><p>临时表在保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p><p>如果使用MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然也可以手动销毁。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建临时表</span><br><span class="line">CREATE TEMPORARY TABLE SalesSummary (</span><br><span class="line">product_name VARCHAR(50) NOT NULL,</span><br><span class="line">total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00,</span><br><span class="line">    avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00,</span><br><span class="line">total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span><br><span class="line">);</span><br><span class="line"># 插入数据</span><br><span class="line">INSERT INTO SalesSummary</span><br><span class="line">VALUES (&#x27;cucumber&#x27;, 100.25, 90, 2);</span><br><span class="line"># 查询</span><br><span class="line">SELECT * FROM SalesSummary;</span><br><span class="line"># 手动删除临时表</span><br><span class="line">DROP TABLE SalesSummary;</span><br><span class="line"></span><br><span class="line"># 用查询直接创建临时表，内部查询末尾不需要分号</span><br><span class="line">create temporary table 临时表名 as(</span><br><span class="line">select * from 表名</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>show tables;</code>命令显示当前数据库中所有数据表时，无法看到临时表。</p></blockquote><h2 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h2><p>完整的复制MySQL数据表，步骤如下：</p><ul><li>使用<code>SHOW CREATE TABLE 表名\G</code>命令获取创建数据表的语句，该语句包含了原数据表的结构，索引等。</li><li>复制SQL语句并修改表名，执行，此时将完全的复制数据表结构。</li><li>如果想复制表中数据，可以使用<code>INSERT INTO 新表名 SELECT * FROM 旧表名;</code>语句来实现。</li></ul><p>其他方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 复制表结构及数据到新表</span><br><span class="line">create table 新表名 select * from 旧表名;</span><br><span class="line"></span><br><span class="line"># 复制表结构</span><br><span class="line">create table 新表名 select * from 旧表名 where false;</span><br><span class="line"># 或者</span><br><span class="line">create table 新表名 like 旧表名;</span><br><span class="line"></span><br><span class="line"># 完整复制表</span><br><span class="line">CREATE TABLE 新表名 LIKE 旧表名;</span><br><span class="line">INSERT INTO 新表名 SELECT * FROM 旧表名;</span><br><span class="line"></span><br><span class="line"># 复制表中部分字段</span><br><span class="line">create table 新表名 as(</span><br><span class="line">select 字段1[,...] from 旧表名</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 新表字段改名</span><br><span class="line">create table 新表名 as(</span><br><span class="line">select 旧字段1 as 新字段1[,...] from 旧表名</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 可以在创建表的同时定义表中的字段信息，示例</span><br><span class="line">create table user1(</span><br><span class="line">pwd varchar(60)</span><br><span class="line">) as (</span><br><span class="line">select * from user</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>注意：as可省略。</p></blockquote><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>MySQL 序列是一组整数：1、2、3…，可以使用AUTO_INCREMENT来定义序列。</p><p>使用<code>select last_insert_id( );</code>来获取最后插入表中的自增列的值。如果使用单个INSERT语句将多行插入到表中，则last_insert_id()函数将返回插入的第一条记录的自增列的值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tbl (</span><br><span class="line">    id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    description VARCHAR(250) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tbl(description)</span><br><span class="line">VALUES(&#x27;MySQL last_insert_id&#x27;);</span><br><span class="line"></span><br><span class="line">select last_insert_id(); # 结果为1</span><br><span class="line"></span><br><span class="line">INSERT INTO tbl(description)</span><br><span class="line">VALUES(&#x27;record 1&#x27;),</span><br><span class="line">      (&#x27;record 2&#x27;),</span><br><span class="line">      (&#x27;record 3&#x27;);</span><br><span class="line"></span><br><span class="line">select last_insert_id(); # 结果为2</span><br></pre></td></tr></table></figure><p>设定序列的开始值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tb (</span><br><span class="line">id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">description VARCHAR(250) NOT NULL</span><br><span class="line">)auto_increment=100;</span><br><span class="line"></span><br><span class="line"># 也可以在表创建成功后，通过以下语句来实现</span><br><span class="line">alter table tb auto_increment=200;</span><br></pre></td></tr></table></figure><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>数据函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(x); # 绝对值：<span class="built_in">ABS</span>(<span class="number">-8</span>) <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(x); # 向上取整：<span class="built_in">CEILING</span>(<span class="number">9.4</span>) <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(x);# 向上取整</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(x);   # 向下取整：<span class="built_in">FLOOR</span>(<span class="number">9.4</span>) <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">9</span></span><br><span class="line"><span class="keyword">select</span> round(x)        # 四舍五入去整：round(<span class="number">1.56</span>) <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">truncate</span>(x,d);   # 截取d位小数：<span class="keyword">truncate</span>(<span class="number">1.2345</span>,<span class="number">3</span>) <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">1.234</span></span><br><span class="line"><span class="keyword">select</span> format(x,d);# 格式化千分位：format(<span class="number">1234567.456</span>,<span class="number">2</span>) <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">1</span>,<span class="number">234</span>,<span class="number">567.46</span></span><br><span class="line"><span class="keyword">select</span> pow(m,n);        # 计算m<span class="operator">^</span>n：pow(<span class="number">2</span>,<span class="number">3</span>) <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(m,n);# 求余：<span class="built_in">mod</span>(<span class="number">10</span>,<span class="number">3</span>) <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sqrt</span>(x);         # 算术平方根：<span class="built_in">sqrt</span>(<span class="number">4</span>) <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> pi();# 获得圆周率</span><br><span class="line"><span class="keyword">SELECT</span> RAND();  # 随机数，返回一个<span class="number">0</span><span class="number">-1</span>之间的随机数</span><br><span class="line"><span class="keyword">SELECT</span> SIGN(x); # 符号函数：负数返回<span class="number">-1</span>，正数返回<span class="number">1</span>，<span class="number">0</span>返回<span class="number">0</span> </span><br></pre></td></tr></table></figure><p>字符串函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 字符串长度，字节</span><br><span class="line"><span class="keyword">select</span> length(string);</span><br><span class="line"># 返回字符串包含的字符数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(string);</span><br><span class="line"></span><br><span class="line"># 返回substring首次在string中出现的位置</span><br><span class="line"><span class="keyword">select</span> instr(string,substring);</span><br><span class="line"># 返回substring首次在string中出现的位置，可指定开始位置</span><br><span class="line"><span class="keyword">select</span> locate(substring,string[,start_position]);</span><br><span class="line"></span><br><span class="line"># 从str的position开始，取length个字符，省略长度则到末尾</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(str,position[,length]); # 相同功能：substr()</span><br><span class="line"># 在str中用replace_str替换search_str</span><br><span class="line"><span class="keyword">select</span> replace(str,search_str,replace_str);</span><br><span class="line"># 重复用pad加在string开头，直到字符串长度为length</span><br><span class="line"><span class="keyword">select</span> lpad(string,length,pad);</span><br><span class="line"># 重复用pad加在string末尾，直到字符串长度为length</span><br><span class="line"><span class="keyword">select</span> rpad(string, length, pad);</span><br><span class="line"># string重复count次</span><br><span class="line"><span class="keyword">select</span> repeat(string,count);</span><br><span class="line"></span><br><span class="line"># 合并字符串，参数可以有多个</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(str1,str2[,str3]);</span><br><span class="line"># 去除前端空格</span><br><span class="line"><span class="keyword">select</span> ltrim(string);</span><br><span class="line"># 去除后端空格</span><br><span class="line"><span class="keyword">select</span> rtrim(string);</span><br><span class="line"></span><br><span class="line"># 逐字符比较两字符串大小，大于为<span class="number">1</span>，等于为<span class="number">0</span>，小于为<span class="number">-1</span></span><br><span class="line"><span class="keyword">select</span> strcmp(string1,string2);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># 替换字符串,从某个位置开始替换某个长度</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;我爱编程&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;超级热爱&#x27;</span>);</span><br><span class="line"># 小写</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;ABC&#x27;</span>); # 相同功能：lcase()</span><br><span class="line"># 大写</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"># 从左边截取</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;hello,world&#x27;</span>,<span class="number">5</span>);</span><br><span class="line"># 从右边截取</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;hello,world&#x27;</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"># 反转</span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"># 返回字符串对应的字符集</span><br><span class="line"><span class="keyword">select</span> charset(str);</span><br></pre></td></tr></table></figure><p>日期和时间函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取当前日期，有以下方式：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>();</span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();</span><br><span class="line"># 获取当前时间</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">current_time</span>();</span><br><span class="line"># 获取当前日期和时间，有以下方式：</span><br><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">current_timestamp</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>();</span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE();</span><br><span class="line"># 获取时间戳</span><br><span class="line"><span class="keyword">select</span> unix_timestamp();</span><br><span class="line"># 从时间戳获得时间</span><br><span class="line"><span class="keyword">select</span> from_unixtime(); # <span class="keyword">select</span> from_unixtime(unix_timestamp()); <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">2022</span><span class="number">-09</span><span class="number">-28</span> <span class="number">11</span>:<span class="number">01</span>:<span class="number">55</span></span><br><span class="line"># 获取日期部分</span><br><span class="line"><span class="keyword">select</span> <span class="type">date</span>(<span class="type">date</span>); # <span class="keyword">select</span> <span class="type">date</span>(now()); <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">2022</span><span class="number">-09</span><span class="number">-28</span></span><br><span class="line"># 获取时间部分</span><br><span class="line"><span class="keyword">select</span> <span class="type">time</span>(<span class="type">date</span>); # <span class="keyword">select</span> <span class="type">time</span>(now()); <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">11</span>:<span class="number">00</span>:<span class="number">05</span></span><br><span class="line"># 格式化</span><br><span class="line"><span class="keyword">select</span> DATE_FORMAT(<span class="type">date</span>,format) # <span class="keyword">select</span> DATE_FORMAT(NOW(),<span class="string">&#x27;%b %d %Y %h:%i %p&#x27;</span>) <span class="operator">=</span><span class="operator">&gt;</span> Sep <span class="number">28</span> <span class="number">2022</span> <span class="number">11</span>:<span class="number">11</span> AM</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 获取年月日,时分秒</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW());</span><br></pre></td></tr></table></figure><p>系统信息函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION(); # 版本</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>(); # 用户</span><br><span class="line"><span class="keyword">SELECT</span> DATABASE( );  # 当前数据库名或者返回空</span><br></pre></td></tr></table></figure><p>聚合函数</p><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>count()</td><td>返回满足select条件的记录总和数，如select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>sum()</td><td>返回为数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>avg()</td><td>通常为数值字段或表达式列作统计，返回一列的平均值。</td></tr><tr><td>max()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>min()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 从含义上讲，<span class="built_in">count</span>(<span class="number">1</span>) 与 <span class="built_in">count</span>(<span class="operator">*</span>) 都表示对全部数据行的查询。</span><br><span class="line"># <span class="built_in">count</span>(字段)：会统计该字段在表中出现的次数，忽略字段为<span class="keyword">null</span>的情况，即不统计字段为<span class="keyword">null</span>的记录。</span><br><span class="line"># <span class="built_in">count</span>(<span class="operator">*</span>)：包括了所有的列，相当于行数，在统计结果的时候，包含字段为<span class="keyword">null</span>的记录；</span><br><span class="line"># <span class="built_in">count</span>(<span class="number">1</span>)：用<span class="number">1</span>代表代码行，在统计结果的时候，包含字段为<span class="keyword">null</span>的记录 。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(studentname) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student;  <span class="comment">/*推荐*/</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">对比： </span></span><br><span class="line"><span class="comment">1）在表没有主键时，count(1)比count(*)快</span></span><br><span class="line"><span class="comment">2）有主键时，主键作为计算条件，count(主键)效率最高；</span></span><br><span class="line"><span class="comment">3）若表格只有一个字段，则count(*)效率较高。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致，是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">    `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;ls&#x27;</span>,<span class="string">&#x27;456789&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 对pwd这一列数据进行加密</span><br><span class="line"># 该<span class="keyword">sql</span>语句对表中已有密码进行加密，之后新增数据不加密</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> pwd <span class="operator">=</span> md5(pwd);</span><br><span class="line"></span><br><span class="line"># 新增数据，可以发现密码未加密</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;ww&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;ml&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 单独对某个用户（如ml）的密码加密：</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> pwd <span class="operator">=</span> md5(pwd) <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;ml&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 新增数据自动加密</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;张三&#x27;</span>,md5(<span class="string">&#x27;123456&#x27;</span>));</span><br><span class="line"></span><br><span class="line"># 查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;zs&#x27;</span> <span class="keyword">AND</span> pwd<span class="operator">=</span>md5(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"># 输出的密码是经过加密后的密码 <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">1</span> zs e10adc3949ba59abbe56e057f20f883e</span><br><span class="line"></span><br><span class="line"># 输入加密后的密码，结果为空</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;zs&#x27;</span> <span class="keyword">AND</span> pwd<span class="operator">=</span>md5(<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>);</span><br><span class="line"># 结果 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">Empty</span> <span class="keyword">set</span></span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务就是将一组SQL语句放在同一批次内去执行，如果一个SQL语句出错，则该批次内的所有SQL都将被取消执行。MySQL事务处理只支持InnoDB和BDB数据表类型。</p><p>事务的原则：原子性（Atomic）、一致性（Consist）、隔离性（Isolated）、持久性（Durable）。</p><p>MySQL中默认是自动提交，使用事务时应先关闭自动提交。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用<span class="keyword">set</span>语句来改变自动提交模式</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;   # 关闭</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;   # 开启</span><br><span class="line"></span><br><span class="line"># 开始一个事务，标记事务的起始点</span><br><span class="line"><span class="keyword">START</span> TRANSACTION</span><br><span class="line"># 或者使用</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"># 提交一个事务给数据库</span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"># 将事务回滚，数据回到本次事务的初始状态</span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"># 还原MySQL数据库的自动提交</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># 设置一个事务保存点</span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名称</span><br><span class="line"># 回滚到保存点</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名称</span><br><span class="line"># 删除保存点</span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 事务测试</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> runoob_transaction_test(id <span class="type">int</span>(<span class="number">5</span>)) engine<span class="operator">=</span>innodb;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> runoob_transaction_test; # <span class="keyword">Empty</span> <span class="keyword">set</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; # 关闭自动提交</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>; # 开始事务</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> runoob_transaction_test <span class="keyword">value</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> runoob_transaction_test <span class="keyword">value</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">commit</span>; # 提交事务</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> runoob_transaction_test; </span><br><span class="line"># <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"># <span class="operator">|</span> id   <span class="operator">|</span></span><br><span class="line"># <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"># <span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"># <span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"># <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> TRANSACTION; # 开始事务</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> runoob_transaction_test <span class="keyword">values</span>(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">rollback</span>; # 回滚</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> runoob_transaction_test; # 因为回滚所以数据没有插入</span><br><span class="line"># <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"># <span class="operator">|</span> id   <span class="operator">|</span></span><br><span class="line"># <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"># <span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"># <span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"># <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>; # 还原自动提交</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2022/09/25/Mybatis/"/>
      <url>/2022/09/25/Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Mybatis是 <code>持久层框架</code>、也是 <code>半自动化的ORM框架</code>（对象关系映射）。</p><ul><li>持久化：将程序数据在持久状态和瞬时状态间转换的机制，即数据存入硬盘或从硬盘取出。JDBC就是一种持久化机制，文件IO也是一种持久化机制。</li><li>持久层：相当于专注于数据持久化逻辑的实现。</li></ul><p>优势：MyBatis 避免了繁琐的 JDBC 代码和手动设置参数以及获取结果集的过程。通过使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的实体类映射成数据库中的记录。</p><p>官方文档：<a href="https://mybatis.net.cn/">https://mybatis.net.cn/</a></p><p>Maven <code>静态资源过滤</code> 问题：在src或其子文件夹下写了配置文件却无法被导出到target，导致程序发生错误无法执行。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/dbName?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/dao/xxx.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写实体类：编写过程中可以使用 <code>lombok</code> 进行注解开发，其中 <code>@Data</code> 提供get、set、toString方法；<code>@AllArgsConstructor</code> 提供有参构造、<code>@NoArgsConstructor</code> 提供无参构造。</p><p>编写接口及对应的mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><h3 id="传递参数的两种方式"><a href="#传递参数的两种方式" class="headerlink" title="传递参数的两种方式"></a>传递参数的两种方式</h3><p>使用 <code>@Param</code>，例如：<code>@Param(&quot;pwd&quot;) String Password</code></p><p>使用 <code>Map</code>：在接口方法中，参数直接传递Map，而sql语句正常使用参数。在使用方法时，Map的key为sql中取的值即可，没有顺序要求。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mapper接口</span></span><br><span class="line">返回值 方法名(Map&lt;String,Object&gt; map);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapper.xml中的sql语句</span></span><br><span class="line">&lt;select id=<span class="string">&quot;&quot;</span> resultType=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    select * from user <span class="type">where</span> <span class="variable">name</span> <span class="operator">=</span> #&#123;username&#125; <span class="type">and</span> <span class="variable">pwd</span> <span class="operator">=</span> #&#123;pwd&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;pwd&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectUserByNP2(map);</span><br></pre></td></tr></table></figure><blockquote><p>如果参数过多，可以直接使用Map实现；如果参数比较少，直接传递参数即可。</p></blockquote><h3 id="与-的区别"><a href="#与-的区别" class="headerlink" title="#与$的区别"></a>#与$的区别</h3><p><code>#&#123;&#125;</code> 的作用主要是替换预编译语句中的占位符? 【推荐使用】</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO user (name) VALUES (#&#123;name&#125;);</span><br><span class="line">INSERT INTO user (name) VALUES (?);</span><br></pre></td></tr></table></figure><p><code>$&#123;&#125;</code> 的作用是直接进行字符串替换</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;$&#123;name&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;kuangshen&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="提交事务的方式"><a href="#提交事务的方式" class="headerlink" title="提交事务的方式"></a>提交事务的方式</h3><p>增删改查需要 <code>提交事务</code>，即：<code>session.commit()</code>。 也可设置自动提交，改造MybatisUtils工具类的getSession( ) 方法，重载实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取SqlSession连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> getSession(<span class="literal">true</span>); <span class="comment">// 事务自动提交</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">(<span class="type">boolean</span> flag)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> sqlSessionFactory.openSession(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果集映射"><a href="#结果集映射" class="headerlink" title="结果集映射"></a>结果集映射</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- column是数据库表的列名, property是对应实体类的属性名 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多对一、一对多"><a href="#多对一、一对多" class="headerlink" title="多对一、一对多"></a>多对一、一对多</h2><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>按结果嵌套处理：直接查询出结果，进行结果集的映射，相当于联表查询。</p><p>实例：多个学生对应一个老师</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--学生实体增加属性--&gt;</span></span><br><span class="line">private Teacher teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mapper.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span> &gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按查询嵌套处理：相当于子查询【有些麻烦】</p><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>存在<code>按结果嵌套处理</code>和<code>按查询嵌套处理</code>两种方式</p><p>按结果嵌套处理实例：一个老师拥有多个学生</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--老师实体增加属性--&gt;</span></span><br><span class="line">private List<span class="tag">&lt;<span class="name">Student</span>&gt;</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mapper.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">select s.id sid, s.name sname, t.name tname, t.id tid</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关联 -&gt; association -&gt; 用于多对一</p><p>集合 -&gt; collection -&gt; 用于一对多</p><h2 id="模糊查询like语句"><a href="#模糊查询like语句" class="headerlink" title="模糊查询like语句"></a>模糊查询like语句</h2><p>在Java代码中添加sql通配符。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java代码</span></span><br><span class="line"><span class="type">string</span> <span class="variable">wildcardname</span> <span class="operator">=</span> “%smi%”;</span><br><span class="line">list&lt;name&gt; names = mapper.selectlike(wildcardname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapper.xml</span></span><br><span class="line">&lt;select id=”selectlike”&gt;</span><br><span class="line">select * from foo where bar like #&#123;value&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>在sql语句中拼接通配符，会引起sql注入。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java代码</span></span><br><span class="line"><span class="type">string</span> <span class="variable">wildcardname</span> <span class="operator">=</span> “smi”;</span><br><span class="line">list&lt;name&gt; names = mapper.selectlike(wildcardname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapper.xml</span></span><br><span class="line">&lt;select id=”selectlike”&gt;</span><br><span class="line">    select * from foo where bar like <span class="string">&quot;%&quot;</span>#&#123;value&#125;<span class="string">&quot;%&quot;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Mybatis注解的的表达力和灵活性十分有限，最强大的 MyBatis 映射并不能用注解来构建。使用注解和配置文件协同开发，才是MyBatis的最佳实践！</p><p>注解：<code>@select()</code>、<code>@update()</code>、<code>@insert()</code>、<code>@delete()</code></p><p>使用注解开发后就不需要mapper.xml文件，此时sql语句写在接口方法的上方，同时mybatis-config.xml也需要修改。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select id,name,pwd password from user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在mybatis的核心配置文件中注入</span></span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class=<span class="string">&quot;com.kuang.mapper.UserMapper&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><p>Mybatis的核心配置文件mybatis-config.xml，能配置的内容如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">- configuration（配置）</span><br><span class="line">    - properties（属性）</span><br><span class="line">- settings（设置）</span><br><span class="line">    - typeAliases（类型别名）</span><br><span class="line">    - typeHandlers（类型处理器）</span><br><span class="line">    - objectFactory（对象工厂）</span><br><span class="line">    - plugins（插件）</span><br><span class="line">    - environments（环境配置）</span><br><span class="line">- environment（环境变量）</span><br><span class="line">- transactionManager（事务管理器）</span><br><span class="line">- dataSource（数据源）</span><br><span class="line">    - databaseIdProvider（数据库厂商标识）</span><br><span class="line">    - mappers（映射器）</span><br></pre></td></tr></table></figure><h3 id="environments元素"><a href="#environments元素" class="headerlink" title="environments元素"></a>environments元素</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置MyBatis的多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定）。</p><p>子元素节点：environment</p><ul><li><p>具体的一套环境，通过设置id进行区别，id保证唯一。</p></li><li><p>事务管理器：<code>&lt;transactionManager type=&quot;[ JDBC | MANAGED ]&quot;/&gt;</code>。这两种事务管理器类型都不需要设置任何属性。</p></li><li><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p></li><li><p>数据源，必须配置。有三种的数据源类型：type&#x3D;”[UNPOOLED | POOLED | JNDI]”）<br>unpooled：这个数据源的实现只是每次被请求时打开和关闭连接。pooled：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，这是一种使得并发 Web 应用快速响应请求的流行处理方式。jndi：这个数据源的实现是为了能在如 Spring 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。</p></li><li><p>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等….</p></li></ul><h3 id="mappers元素"><a href="#mappers元素" class="headerlink" title="mappers元素"></a>mappers元素</h3><p>映射器：定义映射SQL语句文件</p><p>引入资源方式</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用映射器接口实现类的完全限定类名</span></span><br><span class="line"><span class="comment">    需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    将包内的映射器接口实现全部注册为映射器</span></span><br><span class="line"><span class="comment">    但是需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>数据库这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。</p><p>在资源目录下新建一个db.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/dbName?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>将文件导入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>类型别名，为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当这样配置时，User可以用在任何使用com.pojo.User的地方 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以指定一个包名，MyBatis会在包名下面搜索需要的Java Bean</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每一个在包 com.pojo 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p><p>若有注解，则别名为其注解值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>settings相关</p><ul><li>懒加载</li><li>日志实现</li><li>缓存开启关闭</li></ul><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类型处理器</p><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。可以重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型。</p><p>对象工厂</p><ul><li>MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过有参构造方法来实例化。</li><li>如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。</li></ul><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><img src="image-20220927075925489.png" alt="image-20220927075925489" style="zoom:80%;" /><p>作用域理解</p><ul><li><p>SqlSessionFactoryBuilder 的作用在于创建 SqlSessionFactory，创建成功后，SqlSessionFactoryBuilder 就失去了作用，所以它只能存在于创建 SqlSessionFactory 的方法中，而不要让其长期存在。因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。</p></li><li><p>SqlSessionFactory 可以被认为是一个数据库连接池，它的作用是创建 SqlSession 接口对象。因为 MyBatis 的本质就是 Java 对数据库的操作，所以 SqlSessionFactory 的生命周期存在于整个 MyBatis 的应用之中，所以一旦创建了 SqlSessionFactory，就要长期保存它，直至不再使用 MyBatis 应用，所以可以认为 SqlSessionFactory 的生命周期就等同于 MyBatis 的应用周期。</p></li><li><p>由于 SqlSessionFactory 是一个对数据库的连接池，所以它占据着数据库的连接资源。如果创建多个 SqlSessionFactory，那么就存在多个数据库连接池，这样不利于对数据库资源的控制，也会导致数据库连接资源被消耗光，出现系统宕机等情况，所以尽量避免发生这样的情况。因此在一般的应用中我们往往希望 SqlSessionFactory 作为一个单例，让它在应用中被共享。所以说 SqlSessionFactory 的最佳作用域是应用作用域。</p></li><li><p>如果说 SqlSessionFactory 相当于数据库连接池，那么 SqlSession 就相当于一个数据库连接（Connection 对象），你可以在一个事务里面执行多条 SQL，然后通过它的 commit、rollback 等方法，提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后，应该关闭这条连接，让它归还给 SqlSessionFactory，否则数据库资源就很快被耗费精光，系统就会瘫痪，所以用 try…catch…finally… 语句来保证其正确关闭。所以 SqlSession 的最佳的作用域是请求或方法作用域。</p></li></ul><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><img src="image-20220926183150661.png" alt="image-20220926183150661"/><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种工具：SLF4J、Apache Commons Logging、Log4j 2、Log4j、JDK logging。具体选择哪个日志实现工具由MyBatis的内置日志工厂确定。它会使用最先找到的（按上文列举的顺序查找）。如果一个都未找到，日志功能就会被禁用。</p><h3 id="标准日志实现"><a href="#标准日志实现" class="headerlink" title="标准日志实现"></a>标准日志实现</h3><p>指定 MyBatis 应该使用哪个日志记录实现。如果此设置不存在，则会自动发现日志记录实现。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h3><p>Log4j是Apache的一个开源项目。通过使用Log4j，可以控制日志信息输送的目的地：控制台，文本，GUI组件等，也可以控制每一条日志的输出格式。通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程。这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p><p>导入log4j依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写配置文件log4j.properties：放在resources文件夹下。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/test.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p>setting设置日志实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：控制台输出日志，同时还生成一个日志文件。</p><blockquote><p>注意：log4j可进行信息输出</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(MyTest.class);</span><br><span class="line">logger.info(<span class="string">&quot;info：进入selectUser方法&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug：进入selectUser方法&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error: 进入selectUser方法&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>查询大量数据的时候，往往使用分页进行查询，也就是每次处理小部分数据，这样对数据库的压力就在可控范围内。</p><h3 id="limit实现"><a href="#limit实现" class="headerlink" title="limit实现"></a>limit实现</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 检索startIndex<span class="operator">+</span><span class="number">1</span> <span class="operator">~</span> startIndex<span class="operator">+</span>pageSize</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT stratIndex，pageSize</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">5</span>,<span class="number">10</span>; # 检索记录行 <span class="number">6</span><span class="number">-15</span>  </span><br><span class="line"></span><br><span class="line"># 检索从某一个偏移量到表尾所有的记录行，指定第二个参数为<span class="number">-1</span>：   </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">95</span>,<span class="number">-1</span>; # 检索记录行 <span class="number">96</span><span class="operator">-</span>last.  </span><br><span class="line"></span><br><span class="line"># 如果只给定一个参数，它表示返回最大的记录行数目，即：LIMIT n 等价于 LIMIT <span class="number">0</span>,n。 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">5</span>; # 检索前<span class="number">5</span>个记录行  </span><br></pre></td></tr></table></figure><p>mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">(Map&lt;String,Integer&gt; map)</span>;</span><br></pre></td></tr></table></figure><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：起始位置 &#x3D; (当前页面 - 1) * 页面大小</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第几页</span></span><br><span class="line"><span class="type">int</span> <span class="variable">currentPage</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 每页显示几个</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Integer&gt;();</span><br><span class="line">map.put(<span class="string">&quot;startIndex&quot;</span>,(currentPage-<span class="number">1</span>)*pageSize);</span><br><span class="line">map.put(<span class="string">&quot;pageSize&quot;</span>,pageSize);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = mapper.selectUser(map);</span><br><span class="line"><span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PageHelper"><a href="#PageHelper" class="headerlink" title="PageHelper"></a>PageHelper</h3><p>参考文档：<a href="https://pagehelper.github.io/docs/howtouse/">https://pagehelper.github.io/docs/howtouse/</a></p><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>动态SQL指的是根据不同的查询条件，生成不同的Sql语句。</p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog <span class="keyword">where</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">title <span class="operator">=</span> #&#123;title&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;author != null&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">and</span> author <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果 author 等于 null，那么查询语句为 select * from user where title&#x3D;#{title}，但是如果title为空 author 不为空，那么查询语句为 select * from user where and author&#x3D;#{author}，这是错误的 SQL 语句，此时需要使用where语句。</p></blockquote><h3 id="where语句"><a href="#where语句" class="headerlink" title="where语句"></a>where语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">title <span class="operator">=</span> #&#123;title&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;author != null&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">and</span> author <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个 “where” 标签会知道如果它包含的标签中有返回值的话，它就插入一个 “where”。此外，如果标签返回的内容是以 and 或 or 开头的，则它会被剔除掉。</p></blockquote><h3 id="set语句"><a href="#set语句" class="headerlink" title="set语句"></a>set语句</h3><p>用于更新操作</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> blog</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">set</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">    title <span class="operator">=</span> #&#123;title&#125;,</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;author != null&quot;<span class="operator">&gt;</span></span><br><span class="line">    author <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">set</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;;</span><br></pre></td></tr></table></figure><h3 id="choose语句"><a href="#choose语句" class="headerlink" title="choose语句"></a>choose语句</h3><p>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>choose<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">title <span class="operator">=</span> #&#123;title&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;author != null&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> author <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span>otherwise<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">and</span> views <span class="operator">=</span> #&#123;views&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>otherwise<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>choose<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><p>有时候可能某个 sql 语句用的特别多，为了增加代码的重用性，简化代码，可以将这些代码抽取出来，使用时直接调用即可。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 提取<span class="keyword">sql</span>片段</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">sql</span> id<span class="operator">=</span>&quot;if-title-author&quot;<span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">      title <span class="operator">=</span> #&#123;title&#125;</span><br><span class="line">   <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;author != null&quot;<span class="operator">&gt;</span></span><br><span class="line">      <span class="keyword">and</span> author <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line">   <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">sql</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"># 引用<span class="keyword">sql</span>片段</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"># 引用<span class="keyword">sql</span>片段，如果refid指定的不在本文件中，那么需要在前面加上namespace</span><br><span class="line"><span class="operator">&lt;</span>include refid<span class="operator">=</span>&quot;if-title-author&quot;<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">/</span>include<span class="operator">&gt;</span></span><br><span class="line"># 在这里还可以引用其他的<span class="keyword">sql</span>片段</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>最好基于单表来定义 sql 片段，提高片段的可重用性。并且在 sql 片段中不要包括 where。</p></blockquote><h3 id="foreach语句"><a href="#foreach语句" class="headerlink" title="foreach语句"></a>foreach语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># collection：指定输入对象中的集合属性</span><br><span class="line"># item：每次遍历生成的对象</span><br><span class="line"># <span class="keyword">open</span>：开始遍历时的拼接字符串</span><br><span class="line"># <span class="keyword">close</span>：结束时拼接的字符串</span><br><span class="line"># separator：遍历对象之间需要拼接的字符串</span><br><span class="line"># <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog <span class="keyword">where</span> (id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>foreach collection<span class="operator">=</span>&quot;ids&quot; item<span class="operator">=</span>&quot;id&quot; <span class="keyword">open</span><span class="operator">=</span>&quot;(&quot; <span class="keyword">close</span><span class="operator">=</span>&quot;)&quot; separator<span class="operator">=</span>&quot;or&quot;<span class="operator">&gt;</span></span><br><span class="line">    id<span class="operator">=</span>#&#123;id&#125;</span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">HashMap map <span class="operator">=</span> <span class="keyword">new</span> HashMap();</span><br><span class="line">List<span class="operator">&lt;</span><span class="type">Integer</span><span class="operator">&gt;</span> ids <span class="operator">=</span> <span class="keyword">new</span> ArrayList<span class="operator">&lt;</span><span class="type">Integer</span><span class="operator">&gt;</span>();</span><br><span class="line">ids.add(<span class="number">1</span>);</span><br><span class="line">ids.add(<span class="number">2</span>);</span><br><span class="line">ids.add(<span class="number">3</span>);</span><br><span class="line">map.put(&quot;ids&quot;,ids);</span><br><span class="line">List<span class="operator">&lt;</span>Blog<span class="operator">&gt;</span> blogs <span class="operator">=</span> mapper.queryBlogForeach(map);</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>其实动态 sql 语句的编写往往就是一个拼接的问题，为了保证拼接准确，最好先要写出原生的 sql 语句，然后再通过动态 sql 对照着改，防止出错。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>什么是缓存（cache）</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库数据文件）查询，而从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul><p>为什么使用缓存：减少和数据库的交互次数，减少系统开销，提高系统效率。</p><p>什么样的数据能使用缓存：经常查询并且不经常改变的数据。</p><p>Mybatis缓存：MyBatis系统中默认定义了两级缓存：<code>一级缓存</code> 和 <code>二级缓存</code>。</p><ul><li>默认情况下，只有一级缓存开启（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，它是基于namespace级别的缓存。</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache，我们可以通过实现Cache接口来自定义二级缓存。</li></ul><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存，也叫本地缓存。与数据库同一次会话期间查询到的数据会放在本地缓存中，以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">System.out.println(user==user2);</span><br></pre></td></tr></table></figure><p>一级缓存是SqlSession级别的缓存，是一直开启的，关闭不了。</p><p>一级缓存失效的四种情况，即没有使用到当前的一级缓存，还需要再向数据库中发起一次查询请求。</p><p>第一种，sqlSession不同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session2</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> session2.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">session.close();</span><br><span class="line">session2.close();</span><br></pre></td></tr></table></figure><blockquote><p>观察结果：发现发送了两条SQL语句。</p><p>结论：每个sqlSession中的缓存相互独立。</p></blockquote><p>第二种，sqlSession相同，查询条件不同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">2</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">System.out.println(user==user2);</span><br></pre></td></tr></table></figure><blockquote><p>观察结果：发现发送了两条SQL语句。</p><p>结论：当前缓存中，不存在这个数据。</p></blockquote><p>第三种，sqlSession相同，但两次查询之间 <code>执行了增删改</code> 操作。</p><blockquote><p>观察结果：在执行了增删改操作后，查询操作重新执行了。</p><p>结论：因为增删改操作可能会对当前数据产生影响。</p></blockquote><p>第四种，sqlSession相同，手动清除一级缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="comment">// 手动清除缓存</span></span><br><span class="line">session.clearCache();</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user2);</span><br></pre></td></tr></table></figure><blockquote><p>一级缓存就是一个map</p></blockquote><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存。其是基于namespace级别的缓存。一个名称空间，对应一个二级缓存。</p><p>工作机制：</p><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中。</li></ul><p>步骤1，开启全局缓存 【mybatis-config.xml】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>步骤2，在每个mapper.xml中配置使用二级缓存</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--官方示例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会使不同线程中的调用者产生冲突。 --&gt;</span></span><br></pre></td></tr></table></figure><p>结论</p><ul><li>只要开启了二级缓存，在同一个Mapper中的查询，可以在二级缓存中拿到数据；</li><li>查出的数据都会被默认先放在一级缓存中；</li><li>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中。</li></ul><h3 id="缓存原理图"><a href="#缓存原理图" class="headerlink" title="缓存原理图"></a>缓存原理图</h3><img src="image-20220926183816723.png" alt="image-20220926183816723"/>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2022/09/24/SpringMVC/"/>
      <url>/2022/09/24/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>MVC是 <code>模型</code>（Model）、<code>视图</code>（View）、<code>控制器</code>（Controller）的简写，是一种软件设计规范。以将业务逻辑、数据、显示分离的方式来组织代码，其主要作用是降低视图与业务逻辑间的双向耦合。MVC不是一种设计模式，而是一种架构模式。</p><ul><li>Model：数据模型，提供要展示的数据，因此包含数据（Dao）和行为（Service）。</li><li>View：负责进行模型的展示，一般就是页面。</li><li>Controller：接收用户请求，委托给模型进行处理，处理完毕后把返回的模型数据返回给视图，由视图负责展示。</li></ul><h3 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h3><p>SpringMVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。特点：</p><ul><li>轻量级，简单易学</li><li>高效，基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li><code>约定优于配置</code></li><li>功能强大：RESTFul、数据验证、格式化、本地化、主题等</li><li>简介灵活</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>SpringMVC框架以请求为驱动，围绕 <code>DispatcherServlet</code>（调度servlet，本质上是一个servlet，它继承自HttpServlet）设计，其作用是将请求分发到不同的处理器。</p><img src="image-20220924163248344.png" alt="image-20220924163248344"/><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p>简要分析执行流程：</p><ol><li>获取用户请求对应的url</li><li>DispatcherServlet调用HandlerMapping（处理器映射器），HandlerMapping根据请求的url查找Handler。</li><li>HandlerExecution表示具体的Handler，其主要作用是根据url查找控制器。</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet，如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter，如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li><li>DispatcherServlet调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ol><h3 id="第一个SpringMVC程序"><a href="#第一个SpringMVC程序" class="headerlink" title="第一个SpringMVC程序"></a>第一个SpringMVC程序</h3><p>添加web的支持，配置web.xml，注册DispatcherServlet。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定一个springmvc的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别1：跟服务器一起启动。启动顺序，数字越小，启动越早--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>不会匹配.jsp，只针对我们编写的请求，即：.jsp不会进入DispatcherServlet类 。</p><p><code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code>会匹配 *.jsp，会出现返回 jsp 视图时再次进入DispatcherServlet类，导致找不到对应的controller，所以报404。</p></blockquote><p>编写SpringMVC的配置文件，添加处理器映射器、处理器适配器及视图解析器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--处理器映射器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据url中请求的名字查找对应的bean，例如xxx/hello,则查找/hello--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        视图解析器：解析ModelAndView</span></span><br><span class="line"><span class="comment">        1. 获取ModelAndView的数据</span></span><br><span class="line"><span class="comment">        2. 解析ModelAndView的视图名字</span></span><br><span class="line"><span class="comment">        3. 拼接视图名字，找到对应的视图</span></span><br><span class="line"><span class="comment">        4. 将数据渲染到对应视图上</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写Controller，要么实现Controller接口，要么增加注解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">// 封装对象，放在ModelAndView中，即Model</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;helloSpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">// 封装要跳转的视图，放在ModelAndView中，即View</span></span><br><span class="line">        <span class="comment">// 拼接后为：/WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将Controller类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--id：请求的位置，class：对请求进行处理的Controller（即谁对请求进行处理）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>编写对应的jsp页面，显示ModelandView存放的数据</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>配置Tomcat启动测试</p><blockquote><p>若访问出现404，先查看控制台输出，看一下是否缺少jar包。如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖，然后重启Tomcat。</p></blockquote><h3 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h3><p>编写配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 让SpringMVC不处理静态资源，即过滤.css、.html、.js、.mp3等资源，使它们不被视图解析器处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">        即：替代了处理器映射器、处理器适配器。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用注解，会自动配置bean</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">// @RequestMapping：映射请求路径，可设置多级路径，即在类与方法上都进行映射，但类上的映射可省略</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">// model用于存放数据</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        <span class="comment">// 封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">// 跳转的视图，会被视图解析器处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用springMVC必须配置的三大件：处理器映射器、处理器适配器、视图解析器</p><p>通常，我们只需要手动配置视图解析器，而处理器映射器和处理器适配器只需要开启注解驱动即可。</p></blockquote><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>控制器负责解析用户的请求并将其转换为一个模型返回给视图解析器，可以通过 <code>实现接口</code> 或 <code>使用注解</code> 两种方法来实现。</p><p>实现Controller接口，该接口在org.springframework.web.servlet.mvc包下，接口中只有一个方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现该接口的类获得控制器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">   <span class="comment">// 处理请求且返回一个模型与视图对象</span></span><br><span class="line">   ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Controller类并实现该接口，编写完毕后，需要去Spring配置文件中 <code>注册</code> 请求的bean。name或者id对应请求路径，class对应处理请求的类。</p><blockquote><p>只要实现了Controller接口的类，说明这就是一个控制器。缺点就是一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller，定义的方式比较麻烦。</p><p>注意：这种方式就算只保留视图解析器也能运行。</p></blockquote><p>使用注解@Controller，该注解用于声明该类是一个控制器，该方式需要在配置文件中声明组件扫描。</p><blockquote><p>注意：这种方式就算只保留视图解析器以及注解扫描也能运行。</p></blockquote><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法，即可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要多级路径时也可以直接注解在方法上，例如：@RequestMapping(“&#x2F;c3&#x2F;test1”)</p></blockquote><h3 id="结果跳转方式"><a href="#结果跳转方式" class="headerlink" title="结果跳转方式"></a>结果跳转方式</h3><h4 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h4><p>设置ModelAndView对象，根据view的名称和视图解析器可跳到指定的页面。</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><blockquote><p>此时控制器采用实现接口的方式编写。</p></blockquote><h4 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h4><p>通过设置ServletAPI , 不需要视图解析器：</p><ul><li>通过HttpServletResponse进行输出；</li><li>通过HttpServletResponse实现重定向，<code>不能传递数据</code>；</li><li>通过HttpServletRequest实现转发，<code>不改变地址栏</code>；</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultGo</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">// 转发</span></span><br><span class="line">       req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringMVC实现转发和重定向"><a href="#SpringMVC实现转发和重定向" class="headerlink" title="SpringMVC实现转发和重定向"></a>SpringMVC实现转发和重定向</h4><p>有视图解析器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 重定向，不需要视图解析器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 转发</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">    <span class="comment">// 重定向到另一个请求，&quot;redirect:/t1&quot;也可以</span></span><br><span class="line">    <span class="comment">// return &quot;redirect:t1&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无视图解析器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSpringMVC</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// 转发，两种方式均可</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/jsp/test1.jsp&quot;</span>;</span><br><span class="line">       <span class="comment">// return &quot;forward:/WEB-INF/jsp/test1.jsp&quot;;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t3&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// 重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h4><p>请求地址中参数名和处理方法的参数名 <code>一致</code>，此时能直接得到对应的值。若不存在对应的参数，则方法中的参数值为默认值。</p><p>请求地址中参数名和处理方法的参数名 <code>不一致</code>，使用@RequestParam注解进行参数对应。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/hello?username=zs</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span>&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>无论两者是否对应，都使用注解，表示其需要接收前端传递的参数。使用注解后，请求地址中必须存在对应的参数，否则会报错。</p><p>若提交的是一个 <code>对象</code>，即对象相应属性，方法参数使用对象即可。此时前端传递的参数名和对象属性名必须一致，否则对应的属性为默认值。</p></blockquote><h4 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h4><p>方式一：通过ModelAndView</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    mv.setViewName(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ControllerTest1 implements Controller &#123;</span></span><br><span class="line"><span class="comment">   public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</span></span><br><span class="line"><span class="comment">       //返回一个模型视图对象</span></span><br><span class="line"><span class="comment">       ModelAndView mv = new ModelAndView();</span></span><br><span class="line"><span class="comment">       mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);</span></span><br><span class="line"><span class="comment">       mv.setViewName(&quot;test&quot;);</span></span><br><span class="line"><span class="comment">       return mv;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>方式二：通过Model</p><p>方式三：通过ModelMap</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">test4</span><span class="params">(ModelMap map)</span>&#123;</span><br><span class="line">    map.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><p>解决前端传递的数据为乱码的问题，在web.xml中配置SpringMVC的乱码过滤器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：此处是 <code>“/*”</code>。</p></blockquote><h3 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h3><p>RestFul是一种资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>传统方式操作资源，通过 <code>不同的参数</code> 来实现不同的效果，方法单一，post和get。</p><ul><li><p><code>http://127.0.0.1/item/queryItem.action?id=1——查询，GET</code></p></li><li><p><code>http://127.0.0.1/item/saveItem.action——新增，POST</code></p></li><li><p><code>http://127.0.0.1/item/updateItem.action——更新，POST</code></p></li><li><p><code>http://127.0.0.1/item/deleteItem.action?id=1——删除，GET或POST</code></p></li></ul><p>使用RestFul操作资源，可以通过 <code>不同的请求方式</code>来实现不同的效果！如下：<code>请求地址一样</code>，但是 <code>功能不同</code>。</p><ul><li><code>http://127.0.0.1/item/1——查询，GET</code></li><li><code>http://127.0.0.1/item——新增，POST</code></li><li><code>http://127.0.0.1/item——更新，PUT</code></li><li><code>http://127.0.0.1/item/1——删除，DELETE</code></li></ul><p>在SpringMVC中可以使用 <code>@PathVariable</code> 注解，让方法参数的值对应绑定到一个URL模板变量上，同时参数也可以从URL上获取传递的值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestFulController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="comment">// RestFul风格：http://localhost:8080/add/a/b</span></span><br><span class="line">    <span class="comment">// 例如：http://localhost:8080/add/1/2</span></span><br><span class="line">    <span class="comment">// 此时传统拼接方法就不能使用了</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> <span class="type">int</span> b, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为：&quot;</span>+(a+b));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    也可以这样写：</span></span><br><span class="line"><span class="comment">    @RequestMapping(&quot;/add/&#123;a1&#125;&quot;)</span></span><br><span class="line"><span class="comment">    public String test(@PathVariable(&quot;a1&quot;) int a)&#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>使用 <code>method属性</code> 指定请求类型，用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET，POST，HEAD，OPTIONS，PUT，PATCH，DELETE，TRACE等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> String b, Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为：&quot;</span>+(a+b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只有请求类型相同时才能访问，若请求类型不相同，会报错405。</p><p>所有的地址栏请求默认是 <code>GET类型</code>。</p><p>可以把value改为path，即@RequestMapping(path &#x3D; “&#x2F;add&#x2F;{a}&#x2F;{b}”, method &#x3D; …)</p></blockquote><p>方法级别的注解变体有如下几个</p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li><li>@PatchMapping</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等价于@RequestMapping(method = RequestMethod.GET) </span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> String b, Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为1：&quot;</span>+(a+b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求的URL地址相同，都是/add/a/b，但结果不同：因为请求的方式不同，此时会调用不同的方法。</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> String b, Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为2：&quot;</span>+(a+b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用路径变量的好处</p><ul><li>使路径变得更加简洁；</li><li>获得参数更加方便，框架会自动进行类型转换。</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法。例如需要的两个参数都是int，而访问的路径是&#x2F;add&#x2F;1&#x2F;a，则请求失败，因为路径与方法不匹配，而不是参数转换失败。</li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>概念：JSON（JavaScript Object Notation，JS对象标记）是一种轻量级的数据交换格式，采用完全独立于编程语言的文本格式来存储和表示数据，简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言，易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript支持的类型都可以通过 JSON 来表示。</p><p>关于 JSON 和 JavaScript 对象，可以理解为 JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个 <code>字符串</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;; </span><br><span class="line"><span class="comment">// 这是一个 JSON 字符串，本质是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; </span><br></pre></td></tr></table></figure><p>JSON 和 JavaScript 对象互转</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JavaScript -&gt; JSON：使用JSON.stringify()方法</span></span><br><span class="line">user = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zs&quot;</span>&#125;</span><br><span class="line">json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON -&gt; JavaScript：使用JSON.parse()方法</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);</span><br></pre></td></tr></table></figure><h4 id="Controller返回JSON数据"><a href="#Controller返回JSON数据" class="headerlink" title="Controller返回JSON数据"></a>Controller返回JSON数据</h4><p><code>Jackson</code>：json解析工具，需要导入对应依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">// 加上这个注解后就不会走视图解析器，会直接返回一个字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">// 创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">// 将对象解析成为json格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以在类上使用@RestController注解（@RestController是@Controller和@ResponseBody两个注解的结合体）。使用该注解后，该类下的方法返回的都是字符串，此时就不需要为每个方法都添加@ResponseBody。</p></blockquote><p>测试发现乱码，需要设置一下它的编码格式为utf-8，以及它返回的类型，通过@RequestMaping的produces属性来实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// produces:指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/j1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure><p>多请求时可以通过Spring配置统一配置。在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSON乱码问题配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这部分乱码处理的是 <code>后台返回前端</code> 所带来的乱码，使用时需要引入 <code>Jackson的依赖</code>。</p></blockquote><p>对于时间对象，返回的是当前日期的毫秒数，即Jackson默认是会把时间转成 <code>时间戳</code> 的形式。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想得到日期格式，可以自定义日期格式或使用ObjectMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义日期格式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(sdf.format(date));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ObjectMapper</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="comment">// 不使用时间戳的方式</span></span><br><span class="line">    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 自定义日期格式对象</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="comment">// 指定日期格式</span></span><br><span class="line">    mapper.setDateFormat(sdf);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(sdf.format(date));   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽取为工具类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(object,<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个参数为日期格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object, String dataFormat)</span>&#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(dataFormat);</span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> JsonUtils.getJson(date,<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用 <code>FastJson</code>，它是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换。</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>fastjson 三个主要的类：</p><ul><li><p>JSONObject 代表 json 对象；</p></li><li><p>JSONArray 代表 json 对象数组；</p></li><li><p>JSON 用于 JSONObject 和 JSONArray 的转化。</p></li></ul><p>方法</p><ul><li>java对象 -&gt; JSON字符串：JSON.toJSONString(list)</li><li>JSON字符串 -&gt; java对象：JSON.parseObject(str2,User.class)</li><li>java对象 -&gt; JSON对象：(JSONObject)JSON.toJSON(user1)</li><li>JSON对象 -&gt; java对象：JSON.toJavaObject(jsonObject1, User.class)</li></ul><h3 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h3><p>步骤：</p><p>创建数据库 -&gt; 创建项目 -&gt; 导入依赖 -&gt; 编写配置文件（database.properties、mybatis-config.xml（可省略）、applicationContext.xml） -&gt; pojo（实体类） -&gt; dao（接口以及接口对应的mapper.xml） -&gt; service（接口以及实现类，在实现类中调用dao层） -&gt; spring整合mybatis（spring-dao.xml） -&gt; spring整合service（spring-service.xml） -&gt; 增加web支持 -&gt; springmvc（web.xml以及spring-mvc.xml） -&gt; controller和视图层编写</p><p>依赖：junit、数据库驱动、连接池、jsp、jstl、servlet、mybatis、spring、lombok</p><p>数据库配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--编码格式/安全连接/时区--&gt;</span></span><br><span class="line">jdbc:mysql://localhost:3306/dbName?userUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span><br></pre></td></tr></table></figure><p>数据库配置文件 <code>database.properties</code></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/dbName?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>Spring整合Mybatis的相关的配置文件 <code>spring-dao.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库配置文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">数据库连接池</span></span><br><span class="line"><span class="comment">dbcp：半自动化操作，不能自动连接</span></span><br><span class="line"><span class="comment">c3p0：自动化操作(自动加载配置文件，并且可以自动设置到对象中)</span></span><br><span class="line"><span class="comment">druid、hikari</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 绑定MyBaties的配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中，此后就不需要编写mapper的实现类了 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory，也可以选择注入SqlSessionTemplate --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描的Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.kuang.dao&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>MapperScannerConfigurer自动扫描，将Mapper接口生成代理注入到Spring。basePackage 属性是让你为映射器接口文件设置基本的包路径。你可以使用分号或逗号作为分隔符设置多于一个的包路径。每个映射器将会在指定的包路径中递归地被搜索到。</p><p>注意：没有必要去指定SqlSessionFactory或SqlSessionTemplate，因为MapperScannerConfigurer将会创建MapperFactoryBean，之后自动装配。但是，如果你使用了一个以上的DataSource，那么自动装配可能会失效 。</p></blockquote><p>Spring整合service：<code>spring-service.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描service下的包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--将所有业务类注入到spring中，可以通过配置，或者注解实现--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--注意：这里加载的是总的配置文件--&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--乱码过滤--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">          org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.扫描包：controller--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">&lt;!-- 2.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 3.静态资源过滤--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring配置整合文件：<code>applicationContext.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p>过滤器与拦截器的区别：拦截器是AOP思想的具体应用。</p><p><code>过滤器</code></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了&#x2F;*之后，可以对所有要访问的资源进行拦截</li></ul><p><code>拦截器</code></p><ul><li><p>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</p></li><li><p>拦截器只会拦截访问的控制器方法</p></li></ul><p>自定义拦截器，需要实现 HandlerInterceptor接口。编写拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在请求处理的方法之前执行</span></span><br><span class="line">   <span class="comment">// 如果返回true执行下一个拦截器</span></span><br><span class="line">   <span class="comment">// 如果返回false就不执行下一个拦截器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理前------------&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在请求处理方法执行之后执行</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理后------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------清理------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只需重写第一个方法即可，当返回false时可进行重定向或转发。</p></blockquote><p>在springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/**包括路径及其子路径，即过滤所有请求--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/* 拦截的是/admin/*这种, /admin/*/*不会被拦截--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h3><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为 <code>multipart/form-data</code>。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器。</p><p>对表单中的 <code>enctype</code> 属性做个详细的说明：</p><ul><li>application&#x2F;x-www&#x3D;form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li><li>multipart&#x2F;form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text&#x2F;plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件上传，导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的，否则下方控制器可能出错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置bean：multipartResolver</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id必须为：multipartResolver，否则上传文件会报400的错误！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M），可省略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端页面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @RequestParam(&quot;file&quot;)：将name=file控件得到的文件封装成CommonsMultipartFile对象</span></span><br><span class="line"><span class="comment">// 批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件名：file.getOriginalFilename();</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uploadFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 如果文件名为空，直接回到首页！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;上传文件名 : &quot;</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传路径保存设置</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    <span class="comment">// 如果路径不存在，创建一个</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">        realPath.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> file.getInputStream(); </span><br><span class="line">    <span class="comment">// 文件输出流</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath,uploadFileName)); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取写出</span></span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    os.close();</span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可采用 <code>file.Transto</code> 来保存上传的文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传路径保存设置</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">        realPath.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 上传文件地址</span></span><br><span class="line">    System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过CommonsMultipartFile的方法直接写文件</span></span><br><span class="line">    file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(realPath +<span class="string">&quot;/&quot;</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件下载步骤</p><ul><li>设置 response 响应头</li><li>读取文件 – InputStream</li><li>写出文件 – OutputStream</li><li>执行操作</li><li>关闭流 （先开后关）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloads</span><span class="params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   <span class="comment">// 要下载的图片地址</span></span><br><span class="line">   <span class="type">String</span>  <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   <span class="type">String</span>  <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;基础语法.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 1、设置response 响应头</span></span><br><span class="line">   response.reset(); <span class="comment">// 设置页面不缓存,清空buffer</span></span><br><span class="line">   response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">// 字符编码</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">// 二进制传输数据</span></span><br><span class="line">   <span class="comment">// 设置响应头</span></span><br><span class="line">   response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">   <span class="comment">// 2、 读取文件--输入流</span></span><br><span class="line">   InputStream input=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">   <span class="comment">// 3、 写出文件--输出流</span></span><br><span class="line">   <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">   <span class="type">byte</span>[] buff =<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">// 4、执行写出操作</span></span><br><span class="line">   <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">       out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">       out.flush();</span><br><span class="line">  &#125;</span><br><span class="line">   out.close();</span><br><span class="line">   input.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2022/09/22/Spring/"/>
      <url>/2022/09/22/Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官网：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/">https://docs.spring.io/spring-framework/docs/current/reference/html/</a></p><p>下载地址：<a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">https://repo.spring.io/ui/native/release/org/springframework/spring/</a></p><p>github：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p><p>优点：</p><ul><li>Spring是一个开源、免费、<code>轻量级</code>、非入侵式（即引用后程序依旧能正常运行）的框架；</li><li>控制反转（<code>IOC</code>）、面向切面编程（<code>AOP</code>）；</li><li>支持事务处理、框架整合。</li></ul><p>Maven依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>控制反转IOC（Inversion of Control），是一种设计思想，而 <code>DI（依赖注入）</code>是实现IOC的一种方法。没有IOC的程序中，使用面向对象编程时，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由<code>程序</code>自己控制。而控制反转后将对象的创建转移给<code>第三方</code>。即所谓控制反转就是：<code>获得依赖对象的方式反转了</code>。</p><img src="image-20220922184922803.png" alt="image-20220922184922803"/><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象并存入容器中，程序使用时再从IOC容器中取出需要的对象。</p><img src="image-20220922185943310.png" alt="image-20220922185943310" style="zoom:60%;" /><p>采用 <code>XML方式</code> 配置Bean的时候，Bean的定义信息是和实现 <code>分离</code> 的，而采用 <code>注解</code> 的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了<code>零配置</code>的目的。</p><p>控制反转是一种使用描述（XML或注解）并通过第三方去生产获取特定对象的方式。在Spring中实现控制反转的是 <code>IOC容器</code>，其实现方法是 <code>依赖注入</code>（DI，Dependency Injection）。</p><h2 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h2><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">使用Spring来创建对象，在Spring中这些都称为Bean。等价于: 类型 变量名 = new 类型();</span></span><br><span class="line"><span class="comment">参数说明：id: 等价于变量名；class: 需创建的对象；property: 给对象的属性赋值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取Spring的上下文对象，可以传递多个参数，为配置文件的路径。</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 从容器中取出对象</span></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 传递第二个参数就可以省略类型转换</span></span><br><span class="line">        <span class="comment">// Hello people = context.getBean(&quot;hello&quot;, Hello.class);       </span></span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程就叫控制反转：</p><ul><li>控制：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的。使用Spring后，对象由Spring来创建。</li><li>反转：程序本身不创建对象，而变成被动的接收对象。</li></ul><p>IOC是一种编程思想，由主动的编程变成被动的接收。所谓的IOC，即：<code>对象由Spring来创建，管理，装配</code>。</p><h2 id="IOC创建对象方式"><a href="#IOC创建对象方式" class="headerlink" title="IOC创建对象方式"></a>IOC创建对象方式</h2><p>默认使用 <code>无参构造方法</code> 创建对象，当需要为属性赋值时需要有对应的 <code>set方法</code>。</p><p>使用 <code>有参构造方法</code> 来创建对象时，此时只能通过以下方式进行属性赋值，且 <code>可以省略set方法</code>。</p><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>下标</code> 赋值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据 <code>类型</code> 赋值，但类型相同时会出错，不建议使用</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>参数名</code> 来赋值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在 <code>配置文件加载</code> 的时候，容器中管理的对象就已经 <code>初始化</code> 了。</p></blockquote><h2 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h2><p>依赖 : 指Bean对象的 <code>创建</code> 依赖于容器 。</p><p>注入 : 指Bean对象所依赖的 <code>资源</code> , 例如属性，由容器来设置和装配 。</p><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><p>此时使用的是 <code>有参构造方法</code>，参考 <code>IOC创建对象方式</code> 的第二种。</p><h3 id="Set方式注入【主要方式】"><a href="#Set方式注入【主要方式】" class="headerlink" title="Set方式注入【主要方式】"></a>Set方式注入【主要方式】</h3><p>此时必须有 <code>无参构造方法</code> 以及 <code>set方法</code>。</p><p>Address类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx-xxx-xx&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基本数据类型，即普通值注入，value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;property name=&quot;name&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;value&gt;张三&lt;/value&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--对象类型，即bean注入，ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数组类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>《红楼梦》<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>《西游记》<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--List类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>阅读<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>绘画<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Map类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;001&quot;</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;002&quot;</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Set类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--null值和空值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;wife&quot; value=&quot;&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Properties类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>1910121029<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="P命名空间、C命名空间注入"><a href="#P命名空间、C命名空间注入" class="headerlink" title="P命名空间、C命名空间注入"></a>P命名空间、C命名空间注入</h3><p>p命名空间注入：对应于 <code>set注入</code>，依赖于 <code>无参构造和set方法</code>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用时需要导入p命名空间对应的xml约束--&gt;</span></span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值，property的缩写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>c命名空间注入：对应于 <code>构造器注入</code>，依赖于 <code>有参构造</code>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用时需要导入c命名空间对应的xml约束--&gt;</span></span><br><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--c命名空间注入，通过有参构造器进行注入，constructor-arg的缩写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean属性的自动装配"><a href="#Bean属性的自动装配" class="headerlink" title="Bean属性的自动装配"></a>Bean属性的自动装配</h2><p><code>自动装配</code> 是Spring满足bean依赖的一种方式，Spring会在上下文中自动寻找，并自动给bean <code>装配属性</code>。</p><p>在Spring中有三种装配的方式：</p><ul><li>在xml中显式配置【传统方式】</li><li>在Java中显式配置【使用java方式，不需要xml配置文件】</li><li>隐式的自动装配bean【注解】</li></ul><p>以下主要讲解第三种方式：</p><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 狗类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;miao~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;wang~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h3><p><code>byName</code>，按 <code>名称</code> 自动装配。修改bean配置，增加属性 <code>autowire=&quot;byName&quot;</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>规则：查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。然后去spring容器中寻找是否有此字符串名称id的对象，如果有，就取出注入；如果没有，就报空指针异常。</p><h3 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h3><p><code>byType</code>，按 <code>类型</code> 自动装配。会自动在容器上下文中查找和自己属性 <code>类型相同</code> 的bean，使用时需要保证：<code>同一类型</code> 的对象，在spring容器中 <code>唯一</code>。如果不唯一，会报不唯一的异常，即：<code>NoUniqueBeanDefinitionException</code></p><p>修改bean配置，增加属性 <code>autowire=&quot;byType&quot;</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>此时属性对应的bean就算 <code>不提供id</code> 也能装配成功，因为byType是根据类型来装配的，例如：<code>&lt;bean class=&quot;com.pojo.Cat&quot;/&gt;</code></p></blockquote><h3 id="使用注解实现属性的自动装配"><a href="#使用注解实现属性的自动装配" class="headerlink" title="使用注解实现属性的自动装配"></a>使用注解实现属性的自动装配</h3><p>jdk1.5后支持注解，Spring2.5后支持注解。</p><p>使用注解须知</p><ul><li>导入约束：context约束</li><li>开启属性注解支持：<code>&lt;context:annotation-config/&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>@Autowired注解</code>，直接在属性上使用，或是在set方法上使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;   </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        @Autowired</span></span><br><span class="line"><span class="comment">        public void setDog(Dog dog) &#123;</span></span><br><span class="line"><span class="comment">            this.dog = dog;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时它会依照byName或是byType方式进行自动装配，因此要么存在 <code>id值与名字相同</code>，要么 <code>该类型的bean唯一</code>，否则会报错。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">@Autowired</span></span><br><span class="line"><span class="comment">private Dog dog;</span></span><br><span class="line"><span class="comment">此时不存在与名字相同的id值，且该类型的bean也不唯一，因此不能完成自动装配</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>存在所需id值的bean时又存在同类型的bean对象时 <code>优先使用byName方式</code>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此时优先使用byName方式进行注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小灰&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当既不存在与名字相同的id值，且该类型的bean又不唯一时，可以在属性上方加上 <code>@Qualifier(value=&quot;xxx&quot;)</code> 来指定一个bean，即可完成自动装配。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;dog11&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><blockquote><p>使用@Autowired，即使 <code>没有set方法</code> 也能正常运行，前提是自动装配的属性在IOC（Spring）容器中存在且符合byName或byType。</p><p>如果显式定义了@Autowired的required的属性为false，说明这个对象可以为 <code>null</code>，否则不允许为空，即：<code>@Autowired(required = false)</code></p></blockquote><p><code>@Resource注解</code>，直接在属性上使用，或是在set方法上使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        @Resource</span></span><br><span class="line"><span class="comment">    public void setCat(Cat cat) &#123;</span></span><br><span class="line"><span class="comment">        this.cat = cat;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它也是依据byName或byType来实现的，因此要么存在id值与名字相同，要么该类型的bean唯一，否则会报错。当存在所需id值的bean时又存在同类型的bean对象时<code>优先使用byName方式</code>。这种注解也可以省略set方法。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此时优先使用byName方式进行注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小灰&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当既不存在与名字相同的id值，且该类型的bean又不唯一时，可以通过 <code>name</code> 来指定bean。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Resource(name = &quot;dog1&quot;)</span><br><span class="line">private Dog dog;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><h3 id="alias标签"><a href="#alias标签" class="headerlink" title="alias标签"></a>alias标签</h3><p>设置 <code>别名</code>，可以使用原名称或别名来获取这个对象</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bean标签的配置"><a href="#bean标签的配置" class="headerlink" title="bean标签的配置"></a>bean标签的配置</h3><ul><li>id：bean的标识符，相当于对象名</li><li>class：bean对象所对应的全限定名：包名 + 类名</li><li>name：<code>别名</code>，可以同时取多个别名，可以用逗号、空格、分号分隔。</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2 u2,u3;u4&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> id是bean的标识符，<code>唯一</code>。如果没有配置id，name就是默认标识符。</p><p>如果 <code>不配置id和name</code>，可以根据 <code>Context.getBean(类名.class)</code> 获取对象。</p></blockquote><h3 id="import标签"><a href="#import标签" class="headerlink" title="import标签"></a>import标签</h3><p>import标签一般用于团队开发，它可以将多个配置文件导入 <code>合并</code> 为一个。使用的时候，直接使用总的配置文件即可。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--当前为applicationContext.xml，另外两个分别为beans1.xml、beans2.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans1.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若两个配置文件中存在 <code>相同的bean</code>，例如配置文件1中的bean与配置文件2中某一个bean的 <code>id相同</code>，则后导入的配置文件中的bean会 <code>覆盖</code> 之前导入的配置文件中的bean，同时它的别名为两者别名的 <code>并集</code>。</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--beans1.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u1,u2,u3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--beans2.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u2,u3,u4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans1.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--合并后该bean在applicationContext.xml中的结果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u1,u2,u3,u4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p>参考文档：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes</a></p><p><code>singleton</code>（单例模式）：每次从容器中get到的都是同一个对象，Spring的默认机制，也可显式设置。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">System.out.println(user==user2); <span class="comment">// 结果为true</span></span><br></pre></td></tr></table></figure><p><code>prototype</code>（原型模式）：每次从容器中get的时候，都会产生一个新对象。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">System.out.println(user.hashCode());</span><br><span class="line">System.out.println(user2.hashCode());</span><br><span class="line">System.out.println(user==user2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果</span></span><br><span class="line"><span class="comment">2074185499</span></span><br><span class="line"><span class="comment">797925218</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>其余的request、session、application、websocket，这些只能在web开发中使用。</p></blockquote><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证导入了 <code>aop</code> 的包。</p><img src="image-20220922222210070.png" alt="image-20220922222210070"/><p>使用注解需要导入 <code>context约束</code>，增加注解的支持。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bean的自动装配"><a href="#bean的自动装配" class="headerlink" title="bean的自动装配"></a>bean的自动装配</h3><p>使用 <code>@Component</code> 注解，放在类上，说明这个类被Spring管理了，等价于bean。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// component: 组件</span></span><br><span class="line"><span class="comment">// 等价于 &lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 此时id就是类名小写</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">System.out.println(user.name);</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用@Component注解需要导入约束：<code>&lt;context:component-scan base-package=&quot;com.pojo&quot;/&gt;</code></p></blockquote><h3 id="属性的自动装配"><a href="#属性的自动装配" class="headerlink" title="属性的自动装配"></a>属性的自动装配</h3><p>除之前介绍的方法外，还可以使用 <code>@Value</code> 注解，实现属性的注入。可以放在属性上（此时可以 <code>省略</code> set方法），也可以放在set方法上。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123; </span><br><span class="line">    <span class="comment">// 相当于 &lt;property name=&quot;name&quot; value=&quot;张三&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Value(&quot;张三&quot;)</span></span><br><span class="line"><span class="comment">    public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment">        this.name = name;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Component的衍生注解"><a href="#Component的衍生注解" class="headerlink" title="@Component的衍生注解"></a>@Component的衍生注解</h3><p>在web开发中按照MVC三层架构分层，对应的注解为：</p><ul><li>dao 【<code>@Repository</code>】</li><li>service  【<code>@Service</code>】</li><li>controller  【<code>@Controller</code>】</li></ul><p>这三个注解以及@Component的功能都是一样的，都代表将某个类注册到Spring容器中，即装配bean。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li><code>singleton</code>：默认的，Spring会采用单例模式创建这个对象。关闭工厂，所有的对象都会销毁。</li><li><code>prototype</code>：多例模式。关闭工厂，所有的对象不会销毁。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="comment">// @Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：若要使用@Scope注解，此时的bean需要使用 <code>@Component</code> 注解来配置。若用xml来配置bean，@Scope无法生效。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>xml与注解</p><ul><li>xml：更加万能，适用于任何场合，维护简单方便。</li><li>注解：维护相对复杂。</li></ul><p>xml与注解配合使用：xml用来管理bean，注解只负责完成属性的注入。</p><p>注解与约束的对应关系</p><ul><li>@Autowired和@Resource——<code>&lt;context:annotation-config/&gt;</code></li><li>@Component——<code>&lt;context:component-scan base-package=&quot;com.pojo&quot;/&gt;</code></li><li>@Value——<code>&lt;context:component-scan base-package=&quot;com.pojo&quot;/&gt;</code> 或 <code>&lt;context:annotation-config/&gt;</code></li><li>@Scope——<code>&lt;context:component-scan base-package=&quot;com.pojo&quot;/&gt;</code></li></ul><h2 id="IOC小结"><a href="#IOC小结" class="headerlink" title="IOC小结"></a>IOC小结</h2><p>bean的创建方式：</p><ul><li>无参构造</li><li>有参构造</li><li>@Compenent——需要导入扫描组件的约束</li></ul><p>属性装配方式：</p><ul><li>构造器——对应有参构造</li><li>set注入——对应无参构造和set方法</li><li>P、C命名空间——需要导入对应命名空间的约束</li><li>隐式装配：byName、byType、@Autowired、@Resource——后两个需要开启注解支持</li><li>@Value——要么导入扫描组件的约束、要么开启注解驱动</li></ul><h2 id="Java方式配置Spring"><a href="#Java方式配置Spring" class="headerlink" title="Java方式配置Spring"></a>Java方式配置Spring</h2><p>完全不使用Spring的xml配置，全权交给Java。</p><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="comment">// 使用这种java方式进行配置时，可以不导入@Value所需约束</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 使该类成为配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"><span class="comment">// 注册一个bean，此时bean中的id属性值即为方法名，即user，class属性值即为返回值类型</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="comment">// 原型模式</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用java进行Spring配置，使用AnnotationConfigApplicationContext来获取上下文，参数为配置类</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure><p>存在多个配置类时，也可以通过 <code>@Import</code> 注解导入合并其他配置类，类似于配置文件中的 import 标签。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(MyConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig1</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式分为：<code>静态代理</code> 和 <code>动态代理</code>，其中AOP的底层机制就是动态代理。</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>角色分析</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决。</li><li>真实角色：被代理的角色。</li><li>代理角色：代理真色角色，代理真实角色后，一般会做一些附属操作，例如收中介费。</li><li>客户：访问代理角色的人。</li></ul><p>代码实现</p><p>抽象角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 房屋出租</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东有房子准备出租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        host.rent();</span><br><span class="line">        contract();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contract</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租赁合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户，访问代理角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：在这个过程中，客户直接接触的就是中介，就如同现实生活中的样子，客户看不到房东，但是通过中介代理租到了房东的房子，这就是所谓的代理模式。可以 <code>在不改变原来的代码的情况下，实现了对原有功能的增强</code>。</p><p>优点：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务。</li><li>公共业务交给代理角色，实现了业务的分工。</li><li>公共业务发生扩展的时候，方便集中管理。</li></ul><p>缺点：一个真实角色就需要一个代理角色，代码量大。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理和静态代理的角色相同，即：抽象角色、真实角色、代理角色、客户。区别之处在于动态代理的 <code>代理类</code>（代理角色）是 <code>动态生成</code> 的，不是直接写好的。</p><p>动态代理分为：基于 <code>接口</code> 的动态代理、基于 <code>类</code> 的动态代理，实现方法有：</p><ul><li>基于接口 —— JDK动态代理</li><li>基于类 —— cglib</li><li>java字节码实现 —— javasist</li></ul><p>JDK动态代理的核心：Proxy【代理】、InvocationHandler【调用处理程序】</p><p>优点：</p><ul><li>涵盖静态代理的优点。</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务。因此一个动态代理类可以代理多个类，只需这些类实现了同一个接口。</li></ul><p>抽象角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 房屋出租</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东有房子准备出租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理类（通用版）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成得到代理类</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 第一个参数：类加载器第二个参数：代理类实现的接口列表</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理代理实例上的方法调用并返回结果</span></span><br><span class="line">    <span class="comment">// proxy：代理类method：代理类的调用处理程序的方法对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 动态代理的本质，就是使用反射机制实现</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="comment">// 调用附属方法</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编写附属方法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 真实角色</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="comment">// 代理角色</span></span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">pih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">        <span class="comment">// 设置要代理的对象</span></span><br><span class="line">        pih.setTarget(host);</span><br><span class="line">        <span class="comment">// 动态生成代理类</span></span><br><span class="line">        <span class="type">Rent</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rent) pih.getProxy();</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP（Aspect Oriented Programming），面向切面编程。可在不影响原来业务类的情况下，实现动态的增强。</p><p>作用：提供声明式事务；允许用户自定义切面。</p><p>相关名词：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能，即与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点，如日志、安全、缓存、事务等等。</li><li>切面（Aspect）：横切关注点被模块化的特殊对象，即它是一个类。</li><li>通知（Advice）：切面必须要完成的工作，即它是类中的一个方法。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知执行的“地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><img src="image-20220924102955138.png" alt="image-20220924102955138" style="zoom:70%;" /><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice：</p><table><thead><tr><th>通知类型</th><th>连接点</th><th>实现接口</th></tr></thead><tbody><tr><td>前置通知</td><td>方法前</td><td>org.springframework.aop.MethodBeforeAdvice</td></tr><tr><td>后置通知</td><td>方法后</td><td>org.springframework.aop.AfterReturningAdvice</td></tr><tr><td>环绕通知</td><td>方法前后</td><td>org.aopalliance.intercept.MethodInterceptor</td></tr><tr><td>异常抛出通知</td><td>方法抛出异常</td><td>org.springfarmework.aop.ThrowsAdvice</td></tr><tr><td>引介通知</td><td>类中增加新的方法属性</td><td>org.springframework.aop.IntroductionInterceptor</td></tr></tbody></table><p>Spring实现AOP织入，需要先导入一个依赖，且有以下几种方式</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式一：使用Spring的API接口</p><p>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前置通知</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        method: 要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">        args: 参数</span></span><br><span class="line"><span class="comment">        target: 目标对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置通知</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// returnValue: 方法执行后的返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span> + method.getName() + <span class="string">&quot;方法，返回结果为&quot;</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring的XML配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一：使用原生的SpringAPI接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP：需要导入AOP的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--expression：切入点表达式，指定要执行的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行增强--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>切入点表达式：execution( [权限修饰符] 返回值类型 包名.类名.方法名(参数列表))</p><p>修饰符可以省略。返回值类型可以指定，也可以使用*，表示任意类型。</p><p>​方法切入点：</p><p>​* *(..)：所有包中所有类的所有方法</p><p>​* login(..)</p><p>​* login(String, String)</p><p>​* login(String, ..)</p><p>​* register(com.*.*.User)：参数为自定义对象时需要使用类的全类名</p><p>​类切入点：</p><p>​* *..UserServiceImpl.*(..)：所有包中的USerServiceImple类内部的所有方法</p><p>​* *.UserServiceImpl.*(..)：一级包中的USerServiceImple类内部的所有方法</p><p>​* *..UserServiceImpl.login(..)：所有包中的USerServiceImple类中的login方法</p><p>​包切入点：</p><p>​* com.baizhi..*.*(..)：com.baizhi包下及其子包中所有类中的所有方法</p><p>​* com.baizhi.*.*(..)：com.baizhi包下所有类中的所有方法</p><p>​* *..*.*(..)：所有包中所有类的所有方法</p></blockquote><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 动态代理代理的是接口</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userServiceImpl</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userServiceImpl&quot;</span>, UserService.class);</span><br><span class="line">        userServiceImpl.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">com.service.UserServiceImpl的add被执行了</span></span><br><span class="line"><span class="comment">增加了一个用户</span></span><br><span class="line"><span class="comment">执行了add方法，返回结果为null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>动态代理代理的是接口，因此context.getbean()返回的是接口类型。</p></blockquote><p>方式二：使用自定义类来实现AOP【主要是切面定义】</p><p>接口和实现类不变，定义切面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">diyPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====方法执行前=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====方法执行后=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring的XML配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式二：自定义类--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.diy.diyPointCut&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义切面，ref：要引用的类(切面)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通知，即什么时候执行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类不变，结果示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=====方法执行前=====</span><br><span class="line">增加了一个用户</span><br><span class="line">=====方法执行后=====</span><br></pre></td></tr></table></figure><p>方式三：使用注解实现AOP</p><p>接口和实现类不变，定义切面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// 标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> String str=<span class="string">&quot;execution(* com.service.UserServiceImpl.*(..))&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====方法执行前=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(str)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====方法执行后=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="comment">// 在环绕增强中，可以给定一个参数，用以获取切入点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行前&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring的XML配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式三：使用注解实现AOP--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持，为容器中配置@Aspect切面的bean创建代理，织入切面。--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">默认是JDK动态代理(即proxy-target-class=&quot;false&quot;)，可修改为cglib(proxy-target-class=&quot;true&quot;)。两者方式不同，结果相同</span></span><br><span class="line"><span class="comment">        基于接口: JDK动态代理</span></span><br><span class="line"><span class="comment">        基于类: cglib</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;aop:aspectj-autoproxy proxy-target-class=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类不变，结果示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">执行前</span><br><span class="line">=====方法执行前=====</span><br><span class="line">增加了一个用户</span><br><span class="line">=====方法执行后=====</span><br><span class="line">执行后</span><br></pre></td></tr></table></figure><h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><p>依赖：mybatis、mybatis-spring、mysql、spring、spring-jdbc、AOP织入、junit、lombok</p><p>数据源配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--DataSource: 使用Spring的数据源替换Mybatis的配置，这里使用Spring提供的jdbc，需要导入Spring-jdbc依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?userUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sqlSessionFactory</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定Mybatis配置文件，可以省略--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当mapper映射写在mybatis-config.xml中时，此处需要绑定MyBatis的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--当mapper.xml被省略时，即使用注解开发，此时不能在此配置mapper映射，因为不存在xml文件。此时只能在mapper-config中配置，并在此处绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sqlSessionTemplate</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sqlSessionTemplate: 使用的sqlSession--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只能使用构造器注入sqlSessionFactory，因为它没有set方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这种方式，需要编写接口的实现类，例如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有操作原来都是用sqlSession来执行，现在都使用SqlSessionTemplate</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring中注入实现类，同时引用之前的配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">List&lt;User&gt; userList = userMapper.select();</span><br><span class="line"><span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种方式，省略SqlSessionTemplate，使用SqlSessionDaoSupport</p><p>接口的实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImplTwo</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span></span><br><span class="line"><span class="comment">        return mapper.select();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring中注入实现类，同时引用Mybatis的配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--applicationContext.xml--&gt;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="keyword">import</span> resource=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;userMapper2&quot;</span> class=<span class="string">&quot;com.mapper.UserMapperImplTwo&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;sqlSessionFactory&quot;</span> ref=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：可以不编写接口对应的实现类，参考SpringMVC中SSM整合。</p></blockquote><p>java注解实现</p><p>实体类和接口不变，使用注解来指定sql。</p><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 配置数据源</span></span><br><span class="line">    <span class="keyword">public</span> DriverManagerDataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 配置SqlSessionFactory</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 将Mapper接口加入Spring中，MapperFactoryBean将会负责SqlSession的创建和关闭。</span></span><br><span class="line">    <span class="keyword">public</span> MapperFactoryBean <span class="title function_">userMapper</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MapperFactoryBean</span> <span class="variable">mapperFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperFactoryBean</span>();</span><br><span class="line">        mapperFactoryBean.setMapperInterface(com.mapper.UserMapper.class);</span><br><span class="line">        mapperFactoryBean.setSqlSessionFactory(sqlSessionFactory());</span><br><span class="line">        <span class="keyword">return</span> mapperFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">List&lt;User&gt; list = mapper.select();</span><br><span class="line"><span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>一组事务要么都成功，要么都失败，其在项目开发中十分重要，涉及到数据的一致性问题，因此要确保其完整性和一致性。</p><p>事务的ACID原则：原子性、一致性、隔离性、持久性。</p><p>Spring支持编程式事务管理和声明式事务管理。</p><ul><li><p>编程式事务管理</p><ul><li><p>将事务管理代码嵌到业务方法中来控制事务的提交和回滚。</p></li><li><p>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码。</p></li></ul></li><li><p>声明式事务管理</p><ul><li><p>一般情况下比编程式事务好用。</p></li><li><p>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</p></li><li><p>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过AOP支持声明式事务管理。</p></li></ul></li></ul><p>声明式事务：简单来说，就是用于控制事务的提交和回滚，可通过AOP实现。</p><p>spring配置：配置事务管理器、配置事务通知、配置aop</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;constructor-arg ref=&quot;dataSource&quot; /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给哪些方法配置事务，可针对某一方法，也可针对所有方法--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务的传播特性：propagation，不配置时默认为REQUIRED，表示支持事务，此时针对所有方法进行配置即可--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;tx:method name=&quot;update&quot; propagation=&quot;REQUIRED&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;delete&quot; propagation=&quot;REQUIRED&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;select&quot; read-only=&quot;true&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name=&quot;insert&quot; propagation=&quot;REQUIRED&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结合AOP实现事务的织入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;teAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用声明式事务时需要导入tx约束以及AOP约束。</p></blockquote><p>spring事务传播特性：事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</p><ul><li>propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。</li></ul><p>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。</p><p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1() -&gt; Service2#method2() -&gt; Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p><p>声明式事务示例：</p><p>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from User&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(name,sex,age) values(#&#123;name&#125;,#&#123;sex&#125;,#&#123;age&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;deletes from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;丽丽&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        mapper.insert(user);</span><br><span class="line">        mapper.delete(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mapper.select();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        getSqlSession().getMapper(UserMapper.class).insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        getSqlSession().getMapper(UserMapper.class).delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">List&lt;User&gt; list = mapper.select();</span><br><span class="line"><span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于sql语句中的删除语句存在问题，在不进行事务处理时能成功插入，但删除异常，导致未能删除，造成数据不一致。而通过声明式事务可让其在出现异常后回滚，保证数据的一致性。</p></blockquote><p>思考：为什么需要事务？</p><ul><li>如果不配置事务，可能存在数据提交不一致的情况。</li><li>如果不在Spring中配置声明式事务，就需要在代码中手动配置事务。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2022/09/20/AJAX/"/>
      <url>/2022/09/20/AJAX/</url>
      
        <content type="html"><![CDATA[<p>Ajax &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML），其最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</p><h2 id="JS实现"><a href="#JS实现" class="headerlink" title="JS实现"></a>JS实现</h2><h3 id="创建XHR对象"><a href="#创建XHR对象" class="headerlink" title="创建XHR对象"></a>创建XHR对象</h3><p>Ajax的核心是<code>XMLHttpRequest</code>（XHR）对象，其是一个javascript对象，为向服务器发送请求和解析服务器响应提供了接口，能够以<code>异步方式</code>从服务器获取新数据。</p><p>语法：<code>xmlhttp = new XMLHttpRequest();</code></p><blockquote><p>老版本的 Internet Explorer（IE5和IE6）使用 <code>ActiveX</code> 对象。为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveX 对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xmlhttp</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span><br><span class="line">    <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">    xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">    xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h3><p>发送请求使用XHR对象的<code>open()</code>和<code>send()</code>方法。</p><ol><li><p>open(method, url, async)：规定请求的类型、URL以及是否异步处理请求。</p><ul><li>metod：请求的类型，Get或Post；</li><li>url：文件在服务器上的位置，该文件可以是任何类型的文件，例如.txt或.xml；</li><li>async：true（异步）或false（同步）。</li></ul><blockquote><p>请求txt文件可直接得到文本内容。<br>对于不同类型的文件，处理方式不同，例如访问xml，返回的响应数据就需要进行解析。</p></blockquote></li><li><p>send(string)：将请求发送到服务器，其中string为POST请求携带的数据。</p><p>使用Get还是Post：与Post相比，Get更简单也更快，并且在大部分情况下都能用。然而，在以下情况中，请使用Post请求：</p><ul><li>不愿使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（Post请求没有数据量限制）</li><li>发送包含未知字符的用户输入时，Post比Get更稳定也更可靠</li></ul></li><li><p>GET请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的get请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/demo_get.php&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上面的例子中，得到的是缓存的结果。为了避免这种情况，给URL添加一个唯一的ID</span></span><br><span class="line">xmhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/demo_get.php?t=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>(), <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带数据的get请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/demo_get2.php?fname=Henry&amp;lname=Ford&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure></li><li><p>Post请求示例：需要传递数据时，使用 <code>setRequestHeader()</code> 来添加 <code>HTTP头</code>，然后在send()方法中传递要发送的数据。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单post请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/demo_post.php&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带数据的post请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/demo_post2.php&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>(<span class="string">&quot;fname=Henry&amp;lname=Ford&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>setRequestHeader(header,value)：用于给请求添加HTTP头，Post请求携带数据时必须使用。其中header规定头的名称；value规定头的值。</p></blockquote></li></ol><h3 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h3><p>对于来自服务器的响应，可以使用 XHR对象的<code>responseText</code>或<code>responseXML</code>属性，其中responseText用来获得字符串形式的响应数据，responseXML用来获得XML形式的响应数据。</p><p>当请求被发送到服务器时，需要执行一些基于响应的任务。<code>readyState</code>属性存有XHR的状态信息，每当readyState改变时，就会触发<code>onreadystatechange</code>事件。</p><ul><li>0：请求未初始化（还没有调用 open()）。</li><li>1：请求已经建立，但是还没有发送（还没有调用 send()）。</li><li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li><li>3：请求在处理中，通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li><li>4：响应已完成，可以获取并使用服务器的响应了。</li></ul><p>在onreadystatechange事件中，规定当服务器响应已做好被处理的准备时所执行的任务。当readyState等于4且状态为200时，表示<code>响应已就绪</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>onreadystatechange 事件被触发4次，分别是：0-1、1-2、2-3、3-4，对应着readyState的每个变化。</p><p>status存在两种状态：200表示成功、404表示失败。</p></blockquote><h3 id="整合示例"><a href="#整合示例" class="headerlink" title="整合示例"></a>整合示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uname&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;login()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        username = $(<span class="string">&quot;#uname&quot;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        password = $(<span class="string">&quot;#pwd&quot;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        url = <span class="string">&quot;/login?username=&quot;</span> + username + <span class="string">&quot;&amp;password=&quot;</span> + password</span></span><br><span class="line"><span class="language-javascript">        xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">        xmlhttp.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>异步 - True 或 False</p><p>XHR对象如果要用于Ajax的话，其open()方法的<code>async</code>参数必须设置为<code>true</code>。通过Ajax，JavaScript无需等待服务器的响应，而是在等待服务器响应时执行其他脚本，当响应就绪后对响应进行处理。</p><p>当<code>async=true</code>时，需要规定在响应处于onreadystatechange事件中的<code>就绪状态</code>时执行的函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>)</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax_info.txt&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><p>当<code>async=false</code>，JavaScript会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。注意：此时不需要onreadystatechang函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax_info.txt&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">xmlhttp.<span class="title function_">send</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xmlhttp.<span class="property">responseText</span>)</span><br></pre></td></tr></table></figure><h2 id="jQuery实现"><a href="#jQuery实现" class="headerlink" title="jQuery实现"></a>jQuery实现</h2><p>jQuery提供多个与Ajax有关的方法，通过这些方法，能够使用Get或Post从远程服务器上请求文本、HTML、XML或JSON，同时能够把这些外部数据直接载入网页的被选元素中。示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;a1()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">a1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 可直接传递参数：$.post(url, data, success)。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 其中data可省略，例如：$.post(&quot;/a2&quot;, function(data)&#123;&#125;)</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 也可使用$.get()或$.ajax()。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// $.get()、$.post()在内部调用$.ajax()。</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">post</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/url&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 传递数据，键值对形式，逗号分隔</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;<span class="string">&quot;name&quot;</span>: $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>()&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 成功后执行回调函数，此时data为后端返回的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(data)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 失败后执行的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue实现"><a href="#Vue实现" class="headerlink" title="Vue实现"></a>Vue实现</h2><p>Vue中使用<code>axios</code>来完成Ajax请求。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script src=&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>Get请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123; </span><br><span class="line">    <span class="comment">// 请求失败处理</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?id=12345&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 通过params设置参数</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">params</span>: &#123;</span><br><span class="line"><span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Post请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，此方式存在问题，后端接收不到参数，可使用下面两种方式</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,    </span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据，能正常接收</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;qs&#x27;</span>)</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, qs.<span class="title function_">stringify</span>(&#123;<span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;)).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种正常接收的方式</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">username</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">password</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">            str += <span class="built_in">encodeURIComponent</span>(key) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[key]) + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>第一种携带数据的post请求在传递参数时存在问题：<code>前端能传递参数，但后端接收不到</code>。</p><p>更多解决<code>post传参问题</code>的方法可参考：<a href="https://blog.csdn.net/lihchweb/article/details/79884134">https://blog.csdn.net/lihchweb/article/details/79884134</a></p></blockquote><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>Vue的异步加载也可以使用<code>vue-resource</code>来完成（2.0后停止维护，推荐使用Axios）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Get请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/url&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;get.php&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;...&#125;)</span><br></pre></td></tr></table></figure><p>Post请求示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/url&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>&#125;, &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>post请求发送数据到后端，需要第三个参数<code>&#123;emulateJSON:true&#125;</code>。emulateJSON的作用：如果Web服务器无法处理编码为<code>application/json</code>的请求，可以启用emulateJSON选项。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo框架搭建博客</title>
      <link href="/2022/09/15/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/09/15/%E5%9F%BA%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>搭建博客前需要安装一些必要软件：<code>Node.js</code>及<code>git</code>，此外还可以安装编写博客的Markdown编译器，例如：Typora。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li><p>建立对应的博客文件夹，例如：<code>F:\学习\Blogroot</code>，该目录将作为博客的根目录。</p></li><li><p>安装Hexo：在博客根目录下右击打开<code>Git Bash Here</code>，输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将npm源替换为阿里的镜像，之后的安装就会迅速很多了</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># hexo-cli是hexo的指令集</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># 有了指令集以后，使用它的初始化指令来初始化安装Hexo博客</span></span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li><p>本地浏览：在博客根目录下右击打开<code>Git Bash Here</code>，输入：<code>hexo server</code>，简写：<code>hexo s</code></p></li><li><p>常用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清空缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 重新编译</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 本地访问</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment"># 新建文章</span></span><br><span class="line">hexo new <span class="string">&quot;文章title&quot;</span></span><br><span class="line"><span class="comment"># 部署到云端</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><h2 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h2><h3 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h3><p>在博客根目录下右击打开<code>Git Bash Here</code>，输入：<code>hexo new page categories</code>创建分类页面。打开<code>Blogroot\source\categories\index.md</code>，在头部加上<code>type</code>属性：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line"><span class="built_in">date</span>: 2022-09-14 20:42:34</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure><p>给文章添加分类，例如：给<code>Hello-world</code>添加分类，打开<code>Blogroot\source\_posts\Hello-world.md</code>，修改头部：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">categories: 学习笔记</span><br></pre></td></tr></table></figure><h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><p>在博客根目录下右击打开<code>Git Bash Here</code>，输入：<code>hexo new page tags</code>创建标签页面。打开<code>Blogroot\source\tags\index.md</code>， 在头部加上<code>type</code>属性：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line"><span class="built_in">date</span>: 2022-09-14 20:43:40</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>给文章添加标签，例如：给<code>hello-world</code>添加标签，打开<code>Blogroot\source\_posts\Hello-world.md</code>，修改头部：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">categories: 学习笔记</span><br><span class="line">tags: [Node.js, Hexo]</span><br></pre></td></tr></table></figure><blockquote><p>注：添加标签的第二种写法——使用<code>-</code>短划线列出来</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">categories: 学习笔记</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">-</span> Node.js # 短划线后有空格</span><br><span class="line"><span class="bullet">-</span> Hexo</span><br></pre></td></tr></table></figure></blockquote><h3 id="添加友情链接页面"><a href="#添加友情链接页面" class="headerlink" title="添加友情链接页面"></a>添加友情链接页面</h3><p>在博客根目录下右击打开<code>Git Bash Here</code>，输入：<code>hexo new page link</code>创建友情链接页面。打开<code>Blogroot\source\link\index.md</code>， 在头部加上<code>type</code>属性：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 友情链接</span><br><span class="line"><span class="built_in">date</span>: 2022-09-14 22:30:33</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;link&quot;</span></span><br></pre></td></tr></table></figure><p>添加友情链接采用本地生成方式。在<code>Blogroot\source\_data</code>（如果没有_data，则创建一个）下创建<code>link.yml</code>文件：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure><blockquote><p>注：<code>class_name</code>和<code>class_desc</code>支持html格式书写，如不需要，也可以留空。</p><p>注：自2.2.0起，友情链接界面可以由用户自定义，只需要在友情链接的md中设置即可，以普通的Markdown格式书写。</p></blockquote><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>博客主题使用<code>Butterfly</code>，可直接参照<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly主题官方文档</a>进行主题配置。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>Hexo博客搭建：<a href="https://akilar.top/posts/6ef63e2d/">https://akilar.top/posts/6ef63e2d/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
